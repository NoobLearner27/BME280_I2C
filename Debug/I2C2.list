
I2C2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007120  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080072b0  080072b0  000082b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d0  080076d0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080076d0  080076d0  000086d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076d8  080076d8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d8  080076d8  000086d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076dc  080076dc  000086dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080076e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000001c4  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000398  20000398  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000083c5  00000000  00000000  000091fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000175c  00000000  00000000  000115c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  00012d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006bc  00000000  00000000  000135f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210dc  00000000  00000000  00013cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b564  00000000  00000000  00034d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c58e6  00000000  00000000  000402f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105bda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034a4  00000000  00000000  00105c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  001090c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007298 	.word	0x08007298

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007298 	.word	0x08007298

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
 int8_t bme280_init(struct bme280_dev *dev)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73bb      	strb	r3, [r7, #14]

    /* Read the chip-id of bme280 sensor */
    rslt = bme280_get_regs(BME280_REG_CHIP_ID, &chip_id, 1, dev);
 8000ea4:	f107 010e 	add.w	r1, r7, #14
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	20d0      	movs	r0, #208	@ 0xd0
 8000eae:	f000 f823 	bl	8000ef8 <bme280_get_regs>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]

    /* Check for chip id validity */
    if (rslt == BME280_OK)
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d116      	bne.n	8000eec <bme280_init+0x54>
    {
        if (chip_id == BME280_CHIP_ID)
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	2b60      	cmp	r3, #96	@ 0x60
 8000ec2:	d111      	bne.n	8000ee8 <bme280_init+0x50>
        {
            dev->chip_id = chip_id;
 8000ec4:	7bba      	ldrb	r2, [r7, #14]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	701a      	strb	r2, [r3, #0]

            /* Reset the sensor */
            rslt = bme280_soft_reset(dev);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f958 	bl	8001180 <bme280_soft_reset>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME280_OK)
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d107      	bne.n	8000eec <bme280_init+0x54>
            {
                /* Read the calibration data */
                rslt = get_calib_data(dev);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f001 f825 	bl	8001f2c <get_calib_data>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e001      	b.n	8000eec <bme280_init+0x54>
            }
        }
        else
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8000ee8:	23fc      	movs	r3, #252	@ 0xfc
 8000eea:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000eec:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f08:	6838      	ldr	r0, [r7, #0]
 8000f0a:	f001 f996 	bl	800223a <null_ptr_check>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BME280_OK) && (reg_data != NULL))
 8000f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d11e      	bne.n	8000f58 <bme280_get_regs+0x60>
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d01b      	beq.n	8000f58 <bme280_get_regs+0x60>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	785b      	ldrb	r3, [r3, #1]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d003      	beq.n	8000f30 <bme280_get_regs+0x38>
        {
            reg_addr = reg_addr | 0x80;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f2e:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68dc      	ldr	r4, [r3, #12]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	7bf8      	ldrb	r0, [r7, #15]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	47a0      	blx	r4
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	721a      	strb	r2, [r3, #8]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d004      	beq.n	8000f5c <bme280_get_regs+0x64>
        {
            rslt = BME280_E_COMM_FAIL;
 8000f52:	23fe      	movs	r3, #254	@ 0xfe
 8000f54:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000f56:	e001      	b.n	8000f5c <bme280_get_regs+0x64>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8000f58:	23ff      	movs	r3, #255	@ 0xff
 8000f5a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd90      	pop	{r4, r7, pc}

08000f68 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b08d      	sub	sp, #52	@ 0x34
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */
    uint32_t temp_len;
    uint32_t reg_addr_cnt;

    if (len > BME280_MAX_LEN)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0a      	cmp	r3, #10
 8000f7a:	d901      	bls.n	8000f80 <bme280_set_regs+0x18>
    {
        len = BME280_MAX_LEN;
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	607b      	str	r3, [r7, #4]
    }

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f80:	6838      	ldr	r0, [r7, #0]
 8000f82:	f001 f95a 	bl	800223a <null_ptr_check>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000f8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d150      	bne.n	8001036 <bme280_set_regs+0xce>
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d04d      	beq.n	8001036 <bme280_set_regs+0xce>
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d04a      	beq.n	8001036 <bme280_set_regs+0xce>
    {
        if (len != 0)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d043      	beq.n	800102e <bme280_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	743b      	strb	r3, [r7, #16]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d014      	beq.n	8000fde <bme280_set_regs+0x76>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fb8:	e00d      	b.n	8000fd6 <bme280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d3ed      	bcc.n	8000fba <bme280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d90b      	bls.n	8000ffc <bme280_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8000fe4:	f107 0110 	add.w	r1, r7, #16
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f000 ffe2 	bl	8001fb6 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ffa:	e001      	b.n	8001000 <bme280_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691c      	ldr	r4, [r3, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	7818      	ldrb	r0, [r3, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f107 0110 	add.w	r1, r7, #16
 8001010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001012:	47a0      	blx	r4
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	721a      	strb	r2, [r3, #8]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00b      	beq.n	800103e <bme280_set_regs+0xd6>
            {
                rslt = BME280_E_COMM_FAIL;
 8001026:	23fe      	movs	r3, #254	@ 0xfe
 8001028:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (len != 0)
 800102c:	e007      	b.n	800103e <bme280_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800102e:	23fd      	movs	r3, #253	@ 0xfd
 8001030:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (len != 0)
 8001034:	e003      	b.n	800103e <bme280_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001036:	23ff      	movs	r3, #255	@ 0xff
 8001038:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800103c:	e000      	b.n	8001040 <bme280_set_regs+0xd8>
        if (len != 0)
 800103e:	bf00      	nop
    }

    return rslt;
 8001040:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001044:	4618      	mov	r0, r3
 8001046:	3734      	adds	r7, #52	@ 0x34
 8001048:	46bd      	mov	sp, r7
 800104a:	bd90      	pop	{r4, r7, pc}

0800104c <bme280_set_sensor_settings>:
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings,
                                  const struct bme280_settings *settings,
                                  struct bme280_dev *dev)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t sensor_mode;

    if (settings != NULL)
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d03c      	beq.n	80010da <bme280_set_sensor_settings+0x8e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001060:	f107 0316 	add.w	r3, r7, #22
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f86a 	bl	8001140 <bme280_get_sensor_mode>
 800106c:	4603      	mov	r3, r0
 800106e:	75fb      	strb	r3, [r7, #23]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_POWERMODE_SLEEP))
 8001070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d107      	bne.n	8001088 <bme280_set_sensor_settings+0x3c>
 8001078:	7dbb      	ldrb	r3, [r7, #22]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <bme280_set_sensor_settings+0x3c>
        {
            rslt = put_device_to_sleep(dev);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fb4c 	bl	800171c <put_device_to_sleep>
 8001084:	4603      	mov	r3, r0
 8001086:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BME280_OK)
 8001088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d126      	bne.n	80010de <bme280_set_sensor_settings+0x92>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	4619      	mov	r1, r3
 8001094:	2007      	movs	r0, #7
 8001096:	f001 f8b5 	bl	8002204 <are_settings_changed>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <bme280_set_sensor_settings+0x64>
            {
                rslt = set_osr_settings(desired_settings, settings, dev);
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f94a 	bl	8001340 <set_osr_settings>
 80010ac:	4603      	mov	r3, r0
 80010ae:	75fb      	strb	r3, [r7, #23]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80010b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d112      	bne.n	80010de <bme280_set_sensor_settings+0x92>
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4619      	mov	r1, r3
 80010bc:	2018      	movs	r0, #24
 80010be:	f001 f8a1 	bl	8002204 <are_settings_changed>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00a      	beq.n	80010de <bme280_set_sensor_settings+0x92>
            {
                rslt = set_filter_standby_settings(desired_settings, settings, dev);
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f9d3 	bl	800147a <set_filter_standby_settings>
 80010d4:	4603      	mov	r3, r0
 80010d6:	75fb      	strb	r3, [r7, #23]
 80010d8:	e001      	b.n	80010de <bme280_set_sensor_settings+0x92>
            }
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80010da:	23ff      	movs	r3, #255	@ 0xff
 80010dc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	6039      	str	r1, [r7, #0]
 80010f4:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80010f6:	f107 030e 	add.w	r3, r7, #14
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f81f 	bl	8001140 <bme280_get_sensor_mode>
 8001102:	4603      	mov	r3, r0
 8001104:	73fb      	strb	r3, [r7, #15]

    /* If the sensor is not in sleep mode put the device to sleep
     * mode
     */
    if ((rslt == BME280_OK) && (last_set_mode != BME280_POWERMODE_SLEEP))
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d107      	bne.n	800111e <bme280_set_sensor_mode+0x34>
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <bme280_set_sensor_mode+0x34>
    {
        rslt = put_device_to_sleep(dev);
 8001114:	6838      	ldr	r0, [r7, #0]
 8001116:	f000 fb01 	bl	800171c <put_device_to_sleep>
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the power mode */
    if (rslt == BME280_OK)
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d106      	bne.n	8001134 <bme280_set_sensor_mode+0x4a>
    {
        rslt = write_power_mode(sensor_mode, dev);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fac3 	bl	80016b6 <write_power_mode>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (sensor_mode != NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00f      	beq.n	8001170 <bme280_get_sensor_mode+0x30>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_REG_PWR_CTRL, sensor_mode, 1, dev);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	20f4      	movs	r0, #244	@ 0xf4
 8001158:	f7ff fece 	bl	8000ef8 <bme280_get_regs>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode to variable */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	b2da      	uxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e001      	b.n	8001174 <bme280_get_sensor_mode+0x34>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001170:	23ff      	movs	r3, #255	@ 0xff
 8001172:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_RESET;
 8001188:	23e0      	movs	r3, #224	@ 0xe0
 800118a:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 8001190:	2305      	movs	r3, #5
 8001192:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8001194:	23b6      	movs	r3, #182	@ 0xb6
 8001196:	72fb      	strb	r3, [r7, #11]

    /* Write the soft reset command in the sensor */
    rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001198:	f107 010b 	add.w	r1, r7, #11
 800119c:	f107 000d 	add.w	r0, r7, #13
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f7ff fee0 	bl	8000f68 <bme280_set_regs>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 80011ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d125      	bne.n	8001200 <bme280_soft_reset+0x80>
    {
        /* If NVM not copied yet, Wait for NVM to copy */
        do
        {
            /* As per data sheet - Table 1, startup time is 2 ms. */
            dev->delay_us(BME280_STARTUP_DELAY, dev->intf_ptr);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6852      	ldr	r2, [r2, #4]
 80011bc:	4611      	mov	r1, r2
 80011be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011c2:	4798      	blx	r3
            rslt = bme280_get_regs(BME280_REG_STATUS, &status_reg, 1, dev);
 80011c4:	f107 010c 	add.w	r1, r7, #12
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	20f3      	movs	r0, #243	@ 0xf3
 80011ce:	f7ff fe93 	bl	8000ef8 <bme280_get_regs>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]

        } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <bme280_soft_reset+0x72>
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	1e5a      	subs	r2, r3, #1
 80011e2:	73ba      	strb	r2, [r7, #14]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d004      	beq.n	80011f2 <bme280_soft_reset+0x72>
 80011e8:	7b3b      	ldrb	r3, [r7, #12]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1e0      	bne.n	80011b4 <bme280_soft_reset+0x34>

        if (status_reg & BME280_STATUS_IM_UPDATE)
 80011f2:	7b3b      	ldrb	r3, [r7, #12]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <bme280_soft_reset+0x80>
        {
            rslt = BME280_E_NVM_COPY_FAILED;
 80011fc:	23fa      	movs	r3, #250	@ 0xfa
 80011fe:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_LEN_P_T_H_DATA] = { 0 };
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]

    if (comp_data != NULL)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d021      	beq.n	8001278 <bme280_get_sensor_data+0x6c>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_REG_DATA, reg_data, BME280_LEN_P_T_H_DATA, dev);
 8001234:	f107 011c 	add.w	r1, r7, #28
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2208      	movs	r2, #8
 800123c:	20f7      	movs	r0, #247	@ 0xf7
 800123e:	f7ff fe5b 	bl	8000ef8 <bme280_get_regs>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME280_OK)
 8001248:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800124c:	2b00      	cmp	r3, #0
 800124e:	d116      	bne.n	800127e <bme280_get_sensor_data+0x72>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001250:	f107 0210 	add.w	r2, r7, #16
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f9e6 	bl	800162c <parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3318      	adds	r3, #24
 8001264:	f107 0110 	add.w	r1, r7, #16
 8001268:	7bf8      	ldrb	r0, [r7, #15]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f000 f80d 	bl	800128a <bme280_compensate_data>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001276:	e002      	b.n	800127e <bme280_get_sensor_data+0x72>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001278:	23ff      	movs	r3, #255	@ 0xff
 800127a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800127e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001282:	4618      	mov	r0, r3
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d045      	beq.n	8001330 <bme280_compensate_data+0xa6>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d042      	beq.n	8001330 <bme280_compensate_data+0xa6>
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d03f      	beq.n	8001330 <bme280_compensate_data+0xa6>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <bme280_compensate_data+0x6c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80012e4:	6839      	ldr	r1, [r7, #0]
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f000 fa66 	bl	80017b8 <compensate_temperature>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        if (sensor_comp & BME280_PRESS)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <bme280_compensate_data+0x88>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f000 fb28 	bl	8001958 <compensate_pressure>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BME280_HUM)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00b      	beq.n	8001334 <bme280_compensate_data+0xaa>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800131c:	6839      	ldr	r1, [r7, #0]
 800131e:	68b8      	ldr	r0, [r7, #8]
 8001320:	f000 fce8 	bl	8001cf4 <compensate_humidity>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        if (sensor_comp & BME280_HUM)
 800132e:	e001      	b.n	8001334 <bme280_compensate_data+0xaa>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001330:	23ff      	movs	r3, #255	@ 0xff
 8001332:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001334:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800134e:	2301      	movs	r3, #1
 8001350:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_SEL_OSR_HUM)
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f000 f815 	bl	800138e <set_osr_humidity_settings>
 8001364:	4603      	mov	r3, r0
 8001366:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & (BME280_SEL_OSR_PRESS | BME280_SEL_OSR_TEMP))
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f842 	bl	8001402 <set_osr_press_temp_settings>
 800137e:	4603      	mov	r3, r0
 8001380:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_REG_CTRL_HUM;
 8001398:	23f2      	movs	r3, #242	@ 0xf2
 800139a:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	789b      	ldrb	r3, [r3, #2]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80013a8:	f107 010e 	add.w	r1, r7, #14
 80013ac:	f107 000c 	add.w	r0, r7, #12
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f7ff fdd8 	bl	8000f68 <bme280_set_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 80013bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d118      	bne.n	80013f6 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_REG_CTRL_MEAS;
 80013c4:	23f4      	movs	r3, #244	@ 0xf4
 80013c6:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80013c8:	7b38      	ldrb	r0, [r7, #12]
 80013ca:	f107 010d 	add.w	r1, r7, #13
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f7ff fd91 	bl	8000ef8 <bme280_get_regs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80013e2:	f107 010d 	add.w	r1, r7, #13
 80013e6:	f107 000c 	add.w	r0, r7, #12
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f7ff fdbb 	bl	8000f68 <bme280_set_regs>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_CTRL_MEAS;
 8001410:	23f4      	movs	r3, #244	@ 0xf4
 8001412:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001414:	7db8      	ldrb	r0, [r7, #22]
 8001416:	f107 0115 	add.w	r1, r7, #21
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f7ff fd6b 	bl	8000ef8 <bme280_get_regs>
 8001422:	4603      	mov	r3, r0
 8001424:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001426:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d11f      	bne.n	800146e <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_SEL_OSR_PRESS)
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8001438:	f107 0315 	add.w	r3, r7, #21
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f88c 	bl	800155c <fill_osr_press_settings>
        }

        if (desired_settings & BME280_SEL_OSR_TEMP)
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 800144e:	f107 0315 	add.w	r3, r7, #21
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f89d 	bl	8001594 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800145a:	f107 0115 	add.w	r1, r7, #21
 800145e:	f107 0016 	add.w	r0, r7, #22
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f7ff fd7f 	bl	8000f68 <bme280_set_regs>
 800146a:	4603      	mov	r3, r0
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800146e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_CONFIG;
 8001488:	23f5      	movs	r3, #245	@ 0xf5
 800148a:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800148c:	7db8      	ldrb	r0, [r7, #22]
 800148e:	f107 0115 	add.w	r1, r7, #21
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f7ff fd2f 	bl	8000ef8 <bme280_get_regs>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 800149e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d11f      	bne.n	80014e6 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_SEL_FILTER)
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 80014b0:	f107 0315 	add.w	r3, r7, #21
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f81b 	bl	80014f2 <fill_filter_settings>
        }

        if (desired_settings & BME280_SEL_STANDBY)
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 80014c6:	f107 0315 	add.w	r3, r7, #21
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 f82c 	bl	800152a <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80014d2:	f107 0115 	add.w	r1, r7, #21
 80014d6:	f107 0016 	add.w	r0, r7, #22
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f7ff fd43 	bl	8000f68 <bme280_set_regs>
 80014e2:	4603      	mov	r3, r0
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80014e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b25b      	sxtb	r3, r3
 8001502:	f023 031c 	bic.w	r3, r3, #28
 8001506:	b25a      	sxtb	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	78db      	ldrb	r3, [r3, #3]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	b25b      	sxtb	r3, r3
 8001510:	f003 031c 	and.w	r3, r3, #28
 8001514:	b25b      	sxtb	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b25b      	sxtb	r3, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	701a      	strb	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b25b      	sxtb	r3, r3
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	b25a      	sxtb	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	791b      	ldrb	r3, [r3, #4]
 8001544:	015b      	lsls	r3, r3, #5
 8001546:	b25b      	sxtb	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b25b      	sxtb	r3, r3
 800154c:	b2da      	uxtb	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	701a      	strb	r2, [r3, #0]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b25b      	sxtb	r3, r3
 800156c:	f023 031c 	bic.w	r3, r3, #28
 8001570:	b25a      	sxtb	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	b25b      	sxtb	r3, r3
 800157a:	f003 031c 	and.w	r3, r3, #28
 800157e:	b25b      	sxtb	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b25b      	sxtb	r3, r3
 8001584:	b2da      	uxtb	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	701a      	strb	r2, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	b25a      	sxtb	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	785b      	ldrb	r3, [r3, #1]
 80015ae:	015b      	lsls	r3, r3, #5
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	701a      	strb	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * bme280_settings structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3302      	adds	r3, #2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	109b      	asrs	r3, r3, #2
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3302      	adds	r3, #2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	095b      	lsrs	r3, r3, #5
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3303      	adds	r3, #3
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	109b      	asrs	r3, r3, #2
 8001608:	b2db      	uxtb	r3, r3
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	b2da      	uxtb	r2, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3303      	adds	r3, #3
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	b2da      	uxtb	r2, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	711a      	strb	r2, [r3, #4]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << BME280_12_BIT_SHIFT;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	031b      	lsls	r3, r3, #12
 800163c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << BME280_4_BIT_SHIFT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3301      	adds	r3, #1
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> BME280_4_BIT_SHIFT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3302      	adds	r3, #2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	b2db      	uxtb	r3, r3
 8001652:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	431a      	orrs	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	431a      	orrs	r2, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << BME280_12_BIT_SHIFT;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3303      	adds	r3, #3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	031b      	lsls	r3, r3, #12
 800166a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << BME280_4_BIT_SHIFT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3304      	adds	r3, #4
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> BME280_4_BIT_SHIFT;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3305      	adds	r3, #5
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	b2db      	uxtb	r3, r3
 8001680:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	431a      	orrs	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	431a      	orrs	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << BME280_8_BIT_SHIFT;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3306      	adds	r3, #6
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3307      	adds	r3, #7
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	609a      	str	r2, [r3, #8]
}
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	6039      	str	r1, [r7, #0]
 80016c0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_PWR_CTRL;
 80016c2:	23f4      	movs	r3, #244	@ 0xf4
 80016c4:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80016c6:	7bb8      	ldrb	r0, [r7, #14]
 80016c8:	f107 010d 	add.w	r1, r7, #13
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f7ff fc12 	bl	8000ef8 <bme280_get_regs>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 80016d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d117      	bne.n	8001710 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80016e0:	7b7b      	ldrb	r3, [r7, #13]
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f023 0303 	bic.w	r3, r3, #3
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80016fc:	f107 010d 	add.w	r1, r7, #13
 8001700:	f107 000e 	add.w	r0, r7, #14
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2201      	movs	r2, #1
 8001708:	f7ff fc2e 	bl	8000f68 <bme280_set_regs>
 800170c:	4603      	mov	r3, r0
 800170e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_REG_CTRL_HUM, reg_data, 4, dev);
 8001724:	f107 0110 	add.w	r1, r7, #16
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2204      	movs	r2, #4
 800172c:	20f2      	movs	r0, #242	@ 0xf2
 800172e:	f7ff fbe3 	bl	8000ef8 <bme280_get_regs>
 8001732:	4603      	mov	r3, r0
 8001734:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001736:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d118      	bne.n	8001770 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 800173e:	f107 0208 	add.w	r2, r7, #8
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff3c 	bl	80015c6 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fd16 	bl	8001180 <bme280_soft_reset>
 8001754:	4603      	mov	r3, r0
 8001756:	75fb      	strb	r3, [r7, #23]

        if (rslt == BME280_OK)
 8001758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d107      	bne.n	8001770 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f808 	bl	800177c <reload_device_settings>
 800176c:	4603      	mov	r3, r0
 800176e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001770:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	201f      	movs	r0, #31
 800178c:	f7ff fdd8 	bl	8001340 <set_osr_settings>
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 8001794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d106      	bne.n	80017aa <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	201f      	movs	r0, #31
 80017a2:	f7ff fe6a 	bl	800147a <set_filter_standby_settings>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b08c      	sub	sp, #48	@ 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b5d      	ldr	r3, [pc, #372]	@ (800193c <compensate_temperature+0x184>)
 80017c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001940 <compensate_temperature+0x188>)
 80017d2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = (((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fe92 	bl	8000504 <__aeabi_ui2d>
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <compensate_temperature+0x18c>)
 80017e6:	f7ff f831 	bl	800084c <__aeabi_ddiv>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4614      	mov	r4, r2
 80017f0:	461d      	mov	r5, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe84 	bl	8000504 <__aeabi_ui2d>
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b51      	ldr	r3, [pc, #324]	@ (8001948 <compensate_temperature+0x190>)
 8001802:	f7ff f823 	bl	800084c <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7fe fd3b 	bl	8000288 <__aeabi_dsub>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe7f 	bl	8000524 <__aeabi_i2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800182e:	f7fe fee3 	bl	80005f8 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe60 	bl	8000504 <__aeabi_ui2d>
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800184c:	f7fe fffe 	bl	800084c <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4614      	mov	r4, r2
 8001856:	461d      	mov	r5, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe51 	bl	8000504 <__aeabi_ui2d>
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	4b39      	ldr	r3, [pc, #228]	@ (800194c <compensate_temperature+0x194>)
 8001868:	f7fe fff0 	bl	800084c <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fd08 	bl	8000288 <__aeabi_dsub>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8001880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001884:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001888:	f7fe feb6 	bl	80005f8 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4614      	mov	r4, r2
 8001892:	461d      	mov	r5, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe42 	bl	8000524 <__aeabi_i2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fea6 	bl	80005f8 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 80018b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018bc:	f7fe fce6 	bl	800028c <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f946 	bl	8000b58 <__aeabi_d2iz>
 80018cc:	4602      	mov	r2, r0
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24
    temperature = (var1 + var2) / 5120.0;
 80018d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018da:	f7fe fcd7 	bl	800028c <__adddf3>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <compensate_temperature+0x198>)
 80018ec:	f7fe ffae 	bl	800084c <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    if (temperature < temperature_min)
 80018f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001900:	f7ff f8ec 	bl	8000adc <__aeabi_dcmplt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 800190a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800190e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001912:	e00c      	b.n	800192e <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8001914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001918:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800191c:	f7ff f8fc 	bl	8000b18 <__aeabi_dcmpgt>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8001926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800192a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    }

    return temperature;
 800192e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	3730      	adds	r7, #48	@ 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bdb0      	pop	{r4, r5, r7, pc}
 800193c:	c0440000 	.word	0xc0440000
 8001940:	40554000 	.word	0x40554000
 8001944:	40d00000 	.word	0x40d00000
 8001948:	40900000 	.word	0x40900000
 800194c:	40c00000 	.word	0x40c00000
 8001950:	40b40000 	.word	0x40b40000
 8001954:	00000000 	.word	0x00000000

08001958 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b08e      	sub	sp, #56	@ 0x38
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8001962:	a3c5      	add	r3, pc, #788	@ (adr r3, 8001c78 <compensate_pressure+0x320>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double pressure_max = 110000.0;
 800196c:	a3c4      	add	r3, pc, #784	@ (adr r3, 8001c80 <compensate_pressure+0x328>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fdd2 	bl	8000524 <__aeabi_i2d>
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001988:	f7fe ff60 	bl	800084c <__aeabi_ddiv>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4bbd      	ldr	r3, [pc, #756]	@ (8001c90 <compensate_pressure+0x338>)
 800199a:	f7fe fc75 	bl	8000288 <__aeabi_dsub>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 80019a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019ae:	f7fe fe23 	bl	80005f8 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4614      	mov	r4, r2
 80019b8:	461d      	mov	r5, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdaf 	bl	8000524 <__aeabi_i2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4620      	mov	r0, r4
 80019cc:	4629      	mov	r1, r5
 80019ce:	f7fe fe13 	bl	80005f8 <__aeabi_dmul>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4bad      	ldr	r3, [pc, #692]	@ (8001c94 <compensate_pressure+0x33c>)
 80019e0:	f7fe ff34 	bl	800084c <__aeabi_ddiv>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd96 	bl	8000524 <__aeabi_i2d>
 80019f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fc:	f7fe fdfc 	bl	80005f8 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	f7fe fc3e 	bl	800028c <__adddf3>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a18:	f7fe fc38 	bl	800028c <__adddf3>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	4b9b      	ldr	r3, [pc, #620]	@ (8001c98 <compensate_pressure+0x340>)
 8001a2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a2e:	f7fe ff0d 	bl	800084c <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4614      	mov	r4, r2
 8001a38:	461d      	mov	r5, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fd6f 	bl	8000524 <__aeabi_i2d>
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4b94      	ldr	r3, [pc, #592]	@ (8001c9c <compensate_pressure+0x344>)
 8001a4c:	f7fe fdd4 	bl	80005f8 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4620      	mov	r0, r4
 8001a56:	4629      	mov	r1, r5
 8001a58:	f7fe fc18 	bl	800028c <__adddf3>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd5a 	bl	8000524 <__aeabi_i2d>
 8001a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a74:	f7fe fdc0 	bl	80005f8 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a84:	f7fe fdb8 	bl	80005f8 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	4b82      	ldr	r3, [pc, #520]	@ (8001ca0 <compensate_pressure+0x348>)
 8001a96:	f7fe fed9 	bl	800084c <__aeabi_ddiv>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd3b 	bl	8000524 <__aeabi_i2d>
 8001aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab2:	f7fe fda1 	bl	80005f8 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ac2:	f7fe fbe3 	bl	800028c <__adddf3>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b73      	ldr	r3, [pc, #460]	@ (8001ca0 <compensate_pressure+0x348>)
 8001ad4:	f7fe feba 	bl	800084c <__aeabi_ddiv>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c94 <compensate_pressure+0x33c>)
 8001ae6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aea:	f7fe feaf 	bl	800084c <__aeabi_ddiv>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca4 <compensate_pressure+0x34c>)
 8001afc:	f7fe fbc6 	bl	800028c <__adddf3>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	88db      	ldrh	r3, [r3, #6]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fcf9 	bl	8000504 <__aeabi_ui2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4620      	mov	r0, r4
 8001b18:	4629      	mov	r1, r5
 8001b1a:	f7fe fd6d 	bl	80005f8 <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* Avoid exception caused by division by zero */
    if (var1 > (0.0))
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b32:	f7fe fff1 	bl	8000b18 <__aeabi_dcmpgt>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80d0 	beq.w	8001cde <compensate_pressure+0x386>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fcde 	bl	8000504 <__aeabi_ui2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	4955      	ldr	r1, [pc, #340]	@ (8001ca8 <compensate_pressure+0x350>)
 8001b52:	f7fe fb99 	bl	8000288 <__aeabi_dsub>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b52      	ldr	r3, [pc, #328]	@ (8001cac <compensate_pressure+0x354>)
 8001b64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b68:	f7fe fe70 	bl	800084c <__aeabi_ddiv>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b74:	f7fe fb88 	bl	8000288 <__aeabi_dsub>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	a341      	add	r3, pc, #260	@ (adr r3, 8001c88 <compensate_pressure+0x330>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	f7fe fd37 	bl	80005f8 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b96:	f7fe fe59 	bl	800084c <__aeabi_ddiv>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcbb 	bl	8000524 <__aeabi_i2d>
 8001bae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bb2:	f7fe fd21 	bl	80005f8 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bc2:	f7fe fd19 	bl	80005f8 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	4b37      	ldr	r3, [pc, #220]	@ (8001cb0 <compensate_pressure+0x358>)
 8001bd4:	f7fe fe3a 	bl	800084c <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc9c 	bl	8000524 <__aeabi_i2d>
 8001bec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bf0:	f7fe fd02 	bl	80005f8 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <compensate_pressure+0x33c>)
 8001c02:	f7fe fe23 	bl	800084c <__aeabi_ddiv>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 8001c0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c16:	f7fe fb39 	bl	800028c <__adddf3>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4614      	mov	r4, r2
 8001c20:	461d      	mov	r5, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fc7b 	bl	8000524 <__aeabi_i2d>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f7fe fb29 	bl	800028c <__adddf3>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <compensate_pressure+0x35c>)
 8001c48:	f7fe fe00 	bl	800084c <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001c54:	f7fe fb1a 	bl	800028c <__adddf3>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

        if (pressure < pressure_min)
 8001c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001c68:	f7fe ff38 	bl	8000adc <__aeabi_dcmplt>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d027      	beq.n	8001cc2 <compensate_pressure+0x36a>
 8001c72:	e021      	b.n	8001cb8 <compensate_pressure+0x360>
 8001c74:	f3af 8000 	nop.w
 8001c78:	00000000 	.word	0x00000000
 8001c7c:	40dd4c00 	.word	0x40dd4c00
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40fadb00 	.word	0x40fadb00
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	40b86a00 	.word	0x40b86a00
 8001c90:	40ef4000 	.word	0x40ef4000
 8001c94:	40e00000 	.word	0x40e00000
 8001c98:	40100000 	.word	0x40100000
 8001c9c:	40f00000 	.word	0x40f00000
 8001ca0:	41200000 	.word	0x41200000
 8001ca4:	3ff00000 	.word	0x3ff00000
 8001ca8:	41300000 	.word	0x41300000
 8001cac:	40b00000 	.word	0x40b00000
 8001cb0:	41e00000 	.word	0x41e00000
 8001cb4:	40300000 	.word	0x40300000
        {
            pressure = pressure_min;
 8001cb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001cc0:	e011      	b.n	8001ce6 <compensate_pressure+0x38e>
        }
        else if (pressure > pressure_max)
 8001cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cc6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001cca:	f7fe ff25 	bl	8000b18 <__aeabi_dcmpgt>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <compensate_pressure+0x38e>
        {
            pressure = pressure_max;
 8001cd4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cd8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001cdc:	e003      	b.n	8001ce6 <compensate_pressure+0x38e>
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8001cde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ce2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    }

    return pressure;
 8001ce6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	3738      	adds	r7, #56	@ 0x38
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}

08001cf4 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b094      	sub	sp, #80	@ 0x50
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double humidity_max = 100.0;
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f0c <compensate_humidity+0x218>)
 8001d10:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc03 	bl	8000524 <__aeabi_i2d>
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	4b7b      	ldr	r3, [pc, #492]	@ (8001f10 <compensate_humidity+0x21c>)
 8001d24:	f7fe fab0 	bl	8000288 <__aeabi_dsub>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fbf4 	bl	8000524 <__aeabi_i2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b74      	ldr	r3, [pc, #464]	@ (8001f14 <compensate_humidity+0x220>)
 8001d42:	f7fe fc59 	bl	80005f8 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4614      	mov	r4, r2
 8001d4c:	461d      	mov	r5, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbe5 	bl	8000524 <__aeabi_i2d>
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f18 <compensate_humidity+0x224>)
 8001d60:	f7fe fd74 	bl	800084c <__aeabi_ddiv>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d70:	f7fe fc42 	bl	80005f8 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fa86 	bl	800028c <__adddf3>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    var3 = uncomp_data->humidity - var2;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbb9 	bl	8000504 <__aeabi_ui2d>
 8001d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d96:	f7fe fa77 	bl	8000288 <__aeabi_dsub>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fbbb 	bl	8000524 <__aeabi_i2d>
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f1c <compensate_humidity+0x228>)
 8001db4:	f7fe fd4a 	bl	800084c <__aeabi_ddiv>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	7f1b      	ldrb	r3, [r3, #28]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fb9d 	bl	8000504 <__aeabi_ui2d>
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b54      	ldr	r3, [pc, #336]	@ (8001f20 <compensate_humidity+0x22c>)
 8001dd0:	f7fe fd3c 	bl	800084c <__aeabi_ddiv>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001de0:	f7fe fc0a 	bl	80005f8 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	4b4c      	ldr	r3, [pc, #304]	@ (8001f24 <compensate_humidity+0x230>)
 8001df2:	f7fe fa4b 	bl	800028c <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b44      	ldr	r3, [pc, #272]	@ (8001f20 <compensate_humidity+0x22c>)
 8001e10:	f7fe fd1c 	bl	800084c <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e20:	f7fe fbea 	bl	80005f8 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e30:	f7fe fbe2 	bl	80005f8 <__aeabi_dmul>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <compensate_humidity+0x230>)
 8001e42:	f7fe fa23 	bl	800028c <__adddf3>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8001e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e56:	f7fe fbcf 	bl	80005f8 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4614      	mov	r4, r2
 8001e60:	461d      	mov	r5, r3
 8001e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e6a:	f7fe fbc5 	bl	80005f8 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4620      	mov	r0, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe fbbf 	bl	80005f8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	7e1b      	ldrb	r3, [r3, #24]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb3c 	bl	8000504 <__aeabi_ui2d>
 8001e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e90:	f7fe fbb2 	bl	80005f8 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <compensate_humidity+0x234>)
 8001ea2:	f7fe fcd3 	bl	800084c <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	491d      	ldr	r1, [pc, #116]	@ (8001f24 <compensate_humidity+0x230>)
 8001eb0:	f7fe f9ea 	bl	8000288 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ebc:	f7fe fb9c 	bl	80005f8 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    if (humidity > humidity_max)
 8001ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ecc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001ed0:	f7fe fe22 	bl	8000b18 <__aeabi_dcmpgt>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 8001eda:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ede:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001ee2:	e00c      	b.n	8001efe <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8001ee4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ee8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001eec:	f7fe fdf6 	bl	8000adc <__aeabi_dcmplt>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 8001ef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001efa:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    }

    return humidity;
 8001efe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
}
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	3750      	adds	r7, #80	@ 0x50
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0c:	40590000 	.word	0x40590000
 8001f10:	40f2c000 	.word	0x40f2c000
 8001f14:	40500000 	.word	0x40500000
 8001f18:	40d00000 	.word	0x40d00000
 8001f1c:	40f00000 	.word	0x40f00000
 8001f20:	41900000 	.word	0x41900000
 8001f24:	3ff00000 	.word	0x3ff00000
 8001f28:	41200000 	.word	0x41200000

08001f2c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_TEMP_PRESS_CALIB_DATA;
 8001f34:	2388      	movs	r3, #136	@ 0x88
 8001f36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_LEN_TEMP_PRESS_CALIB_DATA] = { 0 };
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_TEMP_PRESS_CALIB_DATA, dev);
 8001f50:	f107 010c 	add.w	r1, r7, #12
 8001f54:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	221a      	movs	r2, #26
 8001f5c:	f7fe ffcc 	bl	8000ef8 <bme280_get_regs>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BME280_OK)
 8001f66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d11d      	bne.n	8001faa <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f848 	bl	800200a <parse_temp_press_calib_data>
        reg_addr = BME280_REG_HUMIDITY_CALIB_DATA;
 8001f7a:	23e1      	movs	r3, #225	@ 0xe1
 8001f7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_HUMIDITY_CALIB_DATA, dev);
 8001f80:	f107 010c 	add.w	r1, r7, #12
 8001f84:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	f7fe ffb4 	bl	8000ef8 <bme280_get_regs>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME280_OK)
 8001f96:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d105      	bne.n	8001faa <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f8df 	bl	8002168 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8001faa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3728      	adds	r7, #40	@ 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e015      	b.n	8001ff6 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	441a      	add	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	440b      	add	r3, r1
 8001fda:	7812      	ldrb	r2, [r2, #0]
 8001fdc:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	441a      	add	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	440b      	add	r3, r1
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d3e5      	bcc.n	8001fca <interleave_reg_addr+0x14>
    }
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800200a:	b480      	push	{r7}
 800200c:	b085      	sub	sp, #20
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3318      	adds	r3, #24
 8002018:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3301      	adds	r3, #1
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	b21a      	sxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21b      	sxth	r3, r3
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3303      	adds	r3, #3
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	b21a      	sxth	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3302      	adds	r3, #2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b21b      	sxth	r3, r3
 8002046:	4313      	orrs	r3, r2
 8002048:	b21a      	sxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3305      	adds	r3, #5
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b21a      	sxth	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b21b      	sxth	r3, r3
 8002060:	4313      	orrs	r3, r2
 8002062:	b21a      	sxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	b21a      	sxth	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3306      	adds	r3, #6
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b21b      	sxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b21b      	sxth	r3, r3
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3309      	adds	r3, #9
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	b21a      	sxth	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3308      	adds	r3, #8
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b21b      	sxth	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	b21a      	sxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	330b      	adds	r3, #11
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	330a      	adds	r3, #10
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	330d      	adds	r3, #13
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	330c      	adds	r3, #12
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	330f      	adds	r3, #15
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	b21a      	sxth	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	330e      	adds	r3, #14
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3311      	adds	r3, #17
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3310      	adds	r3, #16
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21a      	sxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3313      	adds	r3, #19
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	b21a      	sxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3312      	adds	r3, #18
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b21b      	sxth	r3, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	b21a      	sxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3315      	adds	r3, #21
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b21a      	sxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3314      	adds	r3, #20
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b21b      	sxth	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b21a      	sxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3317      	adds	r3, #23
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	b21a      	sxth	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3316      	adds	r3, #22
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b21b      	sxth	r3, r3
 800214c:	4313      	orrs	r3, r2
 800214e:	b21a      	sxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3319      	adds	r3, #25
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	761a      	strb	r2, [r3, #24]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	3318      	adds	r3, #24
 8002176:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3301      	adds	r3, #1
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b21a      	sxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b21b      	sxth	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b21a      	sxth	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3302      	adds	r3, #2
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3303      	adds	r3, #3
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 80021b8:	8a7a      	ldrh	r2, [r7, #18]
 80021ba:	8a3b      	ldrh	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	b21a      	sxth	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3305      	adds	r3, #5
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3304      	adds	r3, #4
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80021e0:	89fa      	ldrh	r2, [r7, #14]
 80021e2:	89bb      	ldrh	r3, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3306      	adds	r3, #6
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b25a      	sxtb	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	460a      	mov	r2, r1
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	4613      	mov	r3, r2
 8002212:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002218:	79fa      	ldrb	r2, [r7, #7]
 800221a:	79bb      	ldrb	r3, [r7, #6]
 800221c:	4013      	ands	r3, r2
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e001      	b.n	800222e <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00b      	beq.n	8002260 <null_ptr_check+0x26>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <null_ptr_check+0x26>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <null_ptr_check+0x26>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8002260:	23ff      	movs	r3, #255	@ 0xff
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e001      	b.n	800226a <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002280:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002284:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002290:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002294:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002298:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80022a0:	e000      	b.n	80022a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80022a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80022a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f9      	beq.n	80022a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80022ae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80022b8:	687b      	ldr	r3, [r7, #4]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <i2c_read>:
// chi id = 0xD0 , 11010000

int8_t i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr); // to read the data from sensor
int8_t i2c_write(uint8_t reg_addr,  uint8_t *reg_data, uint32_t len, void *intf_ptr);  // to write data to sensor

int8_t i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
    uint16_t dev_addr = (uint16_t)(uintptr_t)intf_ptr;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	82fb      	strh	r3, [r7, #22]
  //  uint16_t dev_addr1 = 0xED;
   // reg_addr |= 0x60;
    // Send register address
    if (HAL_I2C_Master_Transmit(&hi2c1, dev_addr << 1, &reg_addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80022d8:	8afb      	ldrh	r3, [r7, #22]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	b299      	uxth	r1, r3
 80022de:	f107 020f 	add.w	r2, r7, #15
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2301      	movs	r3, #1
 80022ea:	4810      	ldr	r0, [pc, #64]	@ (800232c <i2c_read+0x68>)
 80022ec:	f000 ffa8 	bl	8003240 <HAL_I2C_Master_Transmit>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <i2c_read+0x38>
        return -1; // Error in transmitting register address
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e012      	b.n	8002322 <i2c_read+0x5e>
    }

    // Read data
    if (HAL_I2C_Master_Receive(&hi2c1, dev_addr << 1, data, len, HAL_MAX_DELAY) != HAL_OK) {
 80022fc:	8afb      	ldrh	r3, [r7, #22]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	b299      	uxth	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f04f 32ff 	mov.w	r2, #4294967295
 800230a:	9200      	str	r2, [sp, #0]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	4807      	ldr	r0, [pc, #28]	@ (800232c <i2c_read+0x68>)
 8002310:	f001 f894 	bl	800343c <HAL_I2C_Master_Receive>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <i2c_read+0x5c>
        return -1; // Error in receiving data
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	e000      	b.n	8002322 <i2c_read+0x5e>
    }
    return 0; // Success
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200001f0 	.word	0x200001f0

08002330 <i2c_write>:


int8_t i2c_write(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr) {
 8002330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002334:	b08b      	sub	sp, #44	@ 0x2c
 8002336:	af02      	add	r7, sp, #8
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	466b      	mov	r3, sp
 8002344:	461e      	mov	r6, r3
    uint16_t dev_addr = (uint16_t)(uintptr_t)intf_ptr;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	83fb      	strh	r3, [r7, #30]
    uint8_t buffer[len + 1];
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	1c59      	adds	r1, r3, #1
 800234e:	460b      	mov	r3, r1
 8002350:	3b01      	subs	r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	2300      	movs	r3, #0
 8002356:	4688      	mov	r8, r1
 8002358:	4699      	mov	r9, r3
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800236a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800236e:	2300      	movs	r3, #0
 8002370:	460c      	mov	r4, r1
 8002372:	461d      	mov	r5, r3
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	00eb      	lsls	r3, r5, #3
 800237e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002382:	00e2      	lsls	r2, r4, #3
 8002384:	1dcb      	adds	r3, r1, #7
 8002386:	08db      	lsrs	r3, r3, #3
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	ebad 0d03 	sub.w	sp, sp, r3
 800238e:	ab02      	add	r3, sp, #8
 8002390:	3300      	adds	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

    // Prepare data with register address at the start
    buffer[0] = reg_addr;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[1], data, len);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 f96b 	bl	800567e <memcpy>

    // Write data
    if (HAL_I2C_Master_Transmit(&hi2c1, dev_addr << 1, buffer, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 80023a8:	8bfb      	ldrh	r3, [r7, #30]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	b299      	uxth	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ba:	9200      	str	r2, [sp, #0]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4808      	ldr	r0, [pc, #32]	@ (80023e0 <i2c_write+0xb0>)
 80023c0:	f000 ff3e 	bl	8003240 <HAL_I2C_Master_Transmit>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <i2c_write+0xa0>
        return -1; // Error in transmitting data
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	e000      	b.n	80023d2 <i2c_write+0xa2>
    }
    return 0; // Success
 80023d0:	2300      	movs	r3, #0
 80023d2:	46b5      	mov	sp, r6
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3724      	adds	r7, #36	@ 0x24
 80023d8:	46bd      	mov	sp, r7
 80023da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023de:	bf00      	nop
 80023e0:	200001f0 	.word	0x200001f0

080023e4 <user_delay_us>:


void user_delay_us(uint32_t period, void *intf_ptr) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);  //  for millisecond delay
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <user_delay_us+0x24>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fb3b 	bl	8002a74 <HAL_Delay>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	10624dd3 	.word	0x10624dd3

0800240c <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b09a      	sub	sp, #104	@ 0x68
 8002410:	af00      	add	r7, sp, #0


  HAL_Init();
 8002412:	f000 fac1 	bl	8002998 <HAL_Init>


  SystemClock_Config();
 8002416:	f000 f877 	bl	8002508 <SystemClock_Config>
  MX_GPIO_Init();
 800241a:	f000 f903 	bl	8002624 <MX_GPIO_Init>
  MX_I2C1_Init();
 800241e:	f000 f8d3 	bl	80025c8 <MX_I2C1_Init>

     int8_t rslt;

     // Initialize the sensor

     	dev.intf_ptr = (void *)(uintptr_t)BME280_I2C_ADDR_PRIM;
 8002422:	2376      	movs	r3, #118	@ 0x76
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
     	dev.intf = BME280_I2C_INTF;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
     	dev.read = (bme280_read_fptr_t)i2c_read;
 800242c:	4b2e      	ldr	r3, [pc, #184]	@ (80024e8 <main+0xdc>)
 800242e:	633b      	str	r3, [r7, #48]	@ 0x30
     	dev.write = (bme280_write_fptr_t)i2c_write;
 8002430:	4b2e      	ldr	r3, [pc, #184]	@ (80024ec <main+0xe0>)
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
     	dev.delay_us = user_delay_us;
 8002434:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <main+0xe4>)
 8002436:	63bb      	str	r3, [r7, #56]	@ 0x38

     	rslt = bme280_init(&dev);
 8002438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe fd2b 	bl	8000e98 <bme280_init>
 8002442:	4603      	mov	r3, r0
 8002444:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
     	// Check if the initialization was successful
     		if (rslt == BME280_OK) {
 8002448:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800244c:	2b00      	cmp	r3, #0
 800244e:	d120      	bne.n	8002492 <main+0x86>
     			printf("BME280 initialization successful!\n");
 8002450:	4828      	ldr	r0, [pc, #160]	@ (80024f4 <main+0xe8>)
 8002452:	f002 ffb5 	bl	80053c0 <puts>
     			return 0;
     		}

     		// settings configuration for BME280
     			uint8_t settings_sel;
     			settings.osr_h = BME280_OVERSAMPLING_16X;
 8002456:	2305      	movs	r3, #5
 8002458:	77bb      	strb	r3, [r7, #30]
     			settings.osr_p = BME280_OVERSAMPLING_16X;
 800245a:	2305      	movs	r3, #5
 800245c:	773b      	strb	r3, [r7, #28]
     			settings.osr_p = BME280_OVERSAMPLING_16X;
 800245e:	2305      	movs	r3, #5
 8002460:	773b      	strb	r3, [r7, #28]
     			settings.filter = BME280_FILTER_COEFF_16;
 8002462:	2304      	movs	r3, #4
 8002464:	77fb      	strb	r3, [r7, #31]
     			settings.standby_time = BME280_STANDBY_TIME_1000_MS;
 8002466:	2305      	movs	r3, #5
 8002468:	f887 3020 	strb.w	r3, [r7, #32]

     		settings_sel = BME280_SEL_OSR_PRESS | BME280_SEL_OSR_TEMP| BME280_SEL_OSR_HUM | BME280_SEL_FILTER | BME280_SEL_STANDBY;
 800246c:	231f      	movs	r3, #31
 800246e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
   		bme280_set_sensor_settings(settings_sel, &settings, &dev); // applying setting configurations to sensor
 8002472:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002476:	f107 011c 	add.w	r1, r7, #28
 800247a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fde4 	bl	800104c <bme280_set_sensor_settings>
   		bme280_set_sensor_mode(BME280_POWERMODE_NORMAL, &dev); // applying sensor mode
 8002484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002488:	4619      	mov	r1, r3
 800248a:	2003      	movs	r0, #3
 800248c:	f7fe fe2d 	bl	80010ea <bme280_set_sensor_mode>
 8002490:	e007      	b.n	80024a2 <main+0x96>
     			printf("BME280 initialization failed with code: %d\n", rslt);
 8002492:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8002496:	4619      	mov	r1, r3
 8002498:	4817      	ldr	r0, [pc, #92]	@ (80024f8 <main+0xec>)
 800249a:	f002 ff29 	bl	80052f0 <iprintf>
     			return 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	e01e      	b.n	80024e0 <main+0xd4>
    while (1)
    {
  	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev); // reading and compensating temperature,pressure and humidity values from the sensor
 80024a2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80024a6:	463b      	mov	r3, r7
 80024a8:	4619      	mov	r1, r3
 80024aa:	2007      	movs	r0, #7
 80024ac:	f7fe feae 	bl	800120c <bme280_get_sensor_data>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  		  		printf("Temperature: %0.2f °C\n", comp_data.temperature);
 80024b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ba:	4810      	ldr	r0, [pc, #64]	@ (80024fc <main+0xf0>)
 80024bc:	f002 ff18 	bl	80052f0 <iprintf>
  		  		printf("Pressure: %0.2f hPa\n", comp_data.pressure);
 80024c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c4:	480e      	ldr	r0, [pc, #56]	@ (8002500 <main+0xf4>)
 80024c6:	f002 ff13 	bl	80052f0 <iprintf>
  		  		printf("Humidity: %0.2f %%\n", comp_data.humidity);
 80024ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024ce:	480d      	ldr	r0, [pc, #52]	@ (8002504 <main+0xf8>)
 80024d0:	f002 ff0e 	bl	80052f0 <iprintf>
  		  		HAL_Delay(1000);
 80024d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024d8:	f000 facc 	bl	8002a74 <HAL_Delay>
  	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev); // reading and compensating temperature,pressure and humidity values from the sensor
 80024dc:	bf00      	nop
 80024de:	e7e0      	b.n	80024a2 <main+0x96>

    }

  }
 80024e0:	4618      	mov	r0, r3
 80024e2:	3768      	adds	r7, #104	@ 0x68
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	080022c5 	.word	0x080022c5
 80024ec:	08002331 	.word	0x08002331
 80024f0:	080023e5 	.word	0x080023e5
 80024f4:	080072b0 	.word	0x080072b0
 80024f8:	080072d4 	.word	0x080072d4
 80024fc:	08007300 	.word	0x08007300
 8002500:	08007318 	.word	0x08007318
 8002504:	08007330 	.word	0x08007330

08002508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b094      	sub	sp, #80	@ 0x50
 800250c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800250e:	f107 0320 	add.w	r3, r7, #32
 8002512:	2230      	movs	r2, #48	@ 0x30
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f003 f832 	bl	8005580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <SystemClock_Config+0xb8>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <SystemClock_Config+0xb8>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253a:	6413      	str	r3, [r2, #64]	@ 0x40
 800253c:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <SystemClock_Config+0xb8>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <SystemClock_Config+0xbc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <SystemClock_Config+0xbc>)
 8002552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <SystemClock_Config+0xbc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002568:	2301      	movs	r3, #1
 800256a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800256c:	2310      	movs	r3, #16
 800256e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002570:	2300      	movs	r3, #0
 8002572:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002574:	f107 0320 	add.w	r3, r7, #32
 8002578:	4618      	mov	r0, r3
 800257a:	f001 fd17 	bl	8003fac <HAL_RCC_OscConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002584:	f000 f874 	bl	8002670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002588:	230f      	movs	r3, #15
 800258a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002594:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800259a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800259e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 ff78 	bl	800449c <HAL_RCC_ClockConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80025b2:	f000 f85d 	bl	8002670 <Error_Handler>
  }
}
 80025b6:	bf00      	nop
 80025b8:	3750      	adds	r7, #80	@ 0x50
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40007000 	.word	0x40007000

080025c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025cc:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025ce:	4a13      	ldr	r2, [pc, #76]	@ (800261c <MX_I2C1_Init+0x54>)
 80025d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025d4:	4a12      	ldr	r2, [pc, #72]	@ (8002620 <MX_I2C1_Init+0x58>)
 80025d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f8:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <MX_I2C1_Init+0x50>)
 8002600:	2200      	movs	r2, #0
 8002602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002604:	4804      	ldr	r0, [pc, #16]	@ (8002618 <MX_I2C1_Init+0x50>)
 8002606:	f000 fcd7 	bl	8002fb8 <HAL_I2C_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002610:	f000 f82e 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200001f0 	.word	0x200001f0
 800261c:	40005400 	.word	0x40005400
 8002620:	000186a0 	.word	0x000186a0

08002624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <MX_GPIO_Init+0x48>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	4a0e      	ldr	r2, [pc, #56]	@ (800266c <MX_GPIO_Init+0x48>)
 8002634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002638:	6313      	str	r3, [r2, #48]	@ 0x30
 800263a:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <MX_GPIO_Init+0x48>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4b08      	ldr	r3, [pc, #32]	@ (800266c <MX_GPIO_Init+0x48>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a07      	ldr	r2, [pc, #28]	@ (800266c <MX_GPIO_Init+0x48>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <MX_GPIO_Init+0x48>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	40023800 	.word	0x40023800

08002670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002674:	b672      	cpsid	i
}
 8002676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <Error_Handler+0x8>

0800267c <_write>:
  }
  /* USER CODE END Error_Handler_Debug */
}

int _write(int file, char *ptr, int len)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e009      	b.n	80026a2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	60ba      	str	r2, [r7, #8]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fdee 	bl	8002278 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	dbf1      	blt.n	800268e <_write+0x12>
  }
  return len;
 80026aa:	687b      	ldr	r3, [r7, #4]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <HAL_MspInit+0x4c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002700 <HAL_MspInit+0x4c>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <HAL_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	4a08      	ldr	r2, [pc, #32]	@ (8002700 <HAL_MspInit+0x4c>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026f2:	2007      	movs	r0, #7
 80026f4:	f000 fa92 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	@ 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a19      	ldr	r2, [pc, #100]	@ (8002788 <HAL_I2C_MspInit+0x84>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d12b      	bne.n	800277e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <HAL_I2C_MspInit+0x88>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a17      	ldr	r2, [pc, #92]	@ (800278c <HAL_I2C_MspInit+0x88>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <HAL_I2C_MspInit+0x88>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002742:	23c0      	movs	r3, #192	@ 0xc0
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002746:	2312      	movs	r3, #18
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274a:	2301      	movs	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002752:	2304      	movs	r3, #4
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	480c      	ldr	r0, [pc, #48]	@ (8002790 <HAL_I2C_MspInit+0x8c>)
 800275e:	f000 fa91 	bl	8002c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_I2C_MspInit+0x88>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	4a08      	ldr	r2, [pc, #32]	@ (800278c <HAL_I2C_MspInit+0x88>)
 800276c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002770:	6413      	str	r3, [r2, #64]	@ 0x40
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_I2C_MspInit+0x88>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800277e:	bf00      	nop
 8002780:	3728      	adds	r7, #40	@ 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40005400 	.word	0x40005400
 800278c:	40023800 	.word	0x40023800
 8002790:	40020400 	.word	0x40020400

08002794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <NMI_Handler+0x4>

0800279c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <HardFault_Handler+0x4>

080027a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <MemManage_Handler+0x4>

080027ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <BusFault_Handler+0x4>

080027b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <UsageFault_Handler+0x4>

080027bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e4:	f000 f92a 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return 1;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <_kill>:

int _kill(int pid, int sig)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002804:	f002 ff0e 	bl	8005624 <__errno>
 8002808:	4603      	mov	r3, r0
 800280a:	2216      	movs	r2, #22
 800280c:	601a      	str	r2, [r3, #0]
  return -1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <_exit>:

void _exit (int status)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002822:	f04f 31ff 	mov.w	r1, #4294967295
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffe7 	bl	80027fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <_exit+0x12>

08002830 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e00a      	b.n	8002858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002842:	f3af 8000 	nop.w
 8002846:	4601      	mov	r1, r0
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	60ba      	str	r2, [r7, #8]
 800284e:	b2ca      	uxtb	r2, r1
 8002850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	dbf0      	blt.n	8002842 <_read+0x12>
  }

  return len;
 8002860:	687b      	ldr	r3, [r7, #4]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_close>:
  }
  return len;
}

int _close(int file)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002890:	605a      	str	r2, [r3, #4]
  return 0;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <_isatty>:

int _isatty(int file)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
	...

080028cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d4:	4a14      	ldr	r2, [pc, #80]	@ (8002928 <_sbrk+0x5c>)
 80028d6:	4b15      	ldr	r3, [pc, #84]	@ (800292c <_sbrk+0x60>)
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e0:	4b13      	ldr	r3, [pc, #76]	@ (8002930 <_sbrk+0x64>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e8:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <_sbrk+0x64>)
 80028ea:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <_sbrk+0x68>)
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d207      	bcs.n	800290c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028fc:	f002 fe92 	bl	8005624 <__errno>
 8002900:	4603      	mov	r3, r0
 8002902:	220c      	movs	r2, #12
 8002904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	e009      	b.n	8002920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002912:	4b07      	ldr	r3, [pc, #28]	@ (8002930 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <_sbrk+0x64>)
 800291c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800291e:	68fb      	ldr	r3, [r7, #12]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20020000 	.word	0x20020000
 800292c:	00000400 	.word	0x00000400
 8002930:	20000244 	.word	0x20000244
 8002934:	20000398 	.word	0x20000398

08002938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800297c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002948:	f7ff fff6 	bl	8002938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800294c:	480c      	ldr	r0, [pc, #48]	@ (8002980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800294e:	490d      	ldr	r1, [pc, #52]	@ (8002984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002950:	4a0d      	ldr	r2, [pc, #52]	@ (8002988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002954:	e002      	b.n	800295c <LoopCopyDataInit>

08002956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295a:	3304      	adds	r3, #4

0800295c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800295c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002960:	d3f9      	bcc.n	8002956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002962:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002964:	4c0a      	ldr	r4, [pc, #40]	@ (8002990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002968:	e001      	b.n	800296e <LoopFillZerobss>

0800296a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800296c:	3204      	adds	r2, #4

0800296e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002970:	d3fb      	bcc.n	800296a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002972:	f002 fe5d 	bl	8005630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002976:	f7ff fd49 	bl	800240c <main>
  bx  lr    
 800297a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800297c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002984:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002988:	080076e0 	.word	0x080076e0
  ldr r2, =_sbss
 800298c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002990:	20000398 	.word	0x20000398

08002994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002994:	e7fe      	b.n	8002994 <ADC_IRQHandler>
	...

08002998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <HAL_Init+0x40>)
 80029a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_Init+0x40>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <HAL_Init+0x40>)
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <HAL_Init+0x40>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f000 f92b 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f000 f808 	bl	80029dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029cc:	f7ff fe72 	bl	80026b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00

080029dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e4:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_InitTick+0x54>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_InitTick+0x58>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f935 	bl	8002c6a <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f000 f90b 	bl	8002c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	@ (8002a38 <HAL_InitTick+0x5c>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000008 	.word	0x20000008
 8002a38:	20000004 	.word	0x20000004

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_IncTick+0x1c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a03      	ldr	r2, [pc, #12]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000248 	.word	0x20000248

08002a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return uwTick;
 8002a64:	4b02      	ldr	r3, [pc, #8]	@ (8002a70 <HAL_GetTick+0x10>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000248 	.word	0x20000248

08002a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d005      	beq.n	8002a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_Delay+0x44>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a9a:	bf00      	nop
 8002a9c:	f7ff ffe0 	bl	8002a60 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d8f7      	bhi.n	8002a9c <HAL_Delay+0x28>
  {
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000008 	.word	0x20000008

08002abc <__NVIC_SetPriorityGrouping>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aee:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60d3      	str	r3, [r2, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_GetPriorityGrouping>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b08:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <__NVIC_GetPriorityGrouping+0x18>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	f003 0307 	and.w	r3, r3, #7
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_SetPriority>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	@ (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	@ (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	@ 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <SysTick_Config>:
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	@ (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff90 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff49 	bl	8002abc <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c44:	f7ff ff5e 	bl	8002b04 <__NVIC_GetPriorityGrouping>
 8002c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff90 	bl	8002b74 <NVIC_EncodePriority>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff5f 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff ffb0 	bl	8002bd8 <SysTick_Config>
 8002c78:	4603      	mov	r3, r0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e16b      	b.n	8002f78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	f040 815a 	bne.w	8002f72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d005      	beq.n	8002cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d130      	bne.n	8002d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 0201 	and.w	r2, r3, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d017      	beq.n	8002d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2203      	movs	r2, #3
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d123      	bne.n	8002dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	08da      	lsrs	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3208      	adds	r2, #8
 8002d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	08da      	lsrs	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3208      	adds	r2, #8
 8002dc2:	69b9      	ldr	r1, [r7, #24]
 8002dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0203 	and.w	r2, r3, #3
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80b4 	beq.w	8002f72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8002f8c <HAL_GPIO_Init+0x308>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	4a5e      	ldr	r2, [pc, #376]	@ (8002f8c <HAL_GPIO_Init+0x308>)
 8002e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8002f8c <HAL_GPIO_Init+0x308>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e26:	4a5a      	ldr	r2, [pc, #360]	@ (8002f90 <HAL_GPIO_Init+0x30c>)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a51      	ldr	r2, [pc, #324]	@ (8002f94 <HAL_GPIO_Init+0x310>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d02b      	beq.n	8002eaa <HAL_GPIO_Init+0x226>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a50      	ldr	r2, [pc, #320]	@ (8002f98 <HAL_GPIO_Init+0x314>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d025      	beq.n	8002ea6 <HAL_GPIO_Init+0x222>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f9c <HAL_GPIO_Init+0x318>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01f      	beq.n	8002ea2 <HAL_GPIO_Init+0x21e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa0 <HAL_GPIO_Init+0x31c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d019      	beq.n	8002e9e <HAL_GPIO_Init+0x21a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fa4 <HAL_GPIO_Init+0x320>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_GPIO_Init+0x216>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00d      	beq.n	8002e96 <HAL_GPIO_Init+0x212>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002fac <HAL_GPIO_Init+0x328>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d007      	beq.n	8002e92 <HAL_GPIO_Init+0x20e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb0 <HAL_GPIO_Init+0x32c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_GPIO_Init+0x20a>
 8002e8a:	2307      	movs	r3, #7
 8002e8c:	e00e      	b.n	8002eac <HAL_GPIO_Init+0x228>
 8002e8e:	2308      	movs	r3, #8
 8002e90:	e00c      	b.n	8002eac <HAL_GPIO_Init+0x228>
 8002e92:	2306      	movs	r3, #6
 8002e94:	e00a      	b.n	8002eac <HAL_GPIO_Init+0x228>
 8002e96:	2305      	movs	r3, #5
 8002e98:	e008      	b.n	8002eac <HAL_GPIO_Init+0x228>
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x228>
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e004      	b.n	8002eac <HAL_GPIO_Init+0x228>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e002      	b.n	8002eac <HAL_GPIO_Init+0x228>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_GPIO_Init+0x228>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	f002 0203 	and.w	r2, r2, #3
 8002eb2:	0092      	lsls	r2, r2, #2
 8002eb4:	4093      	lsls	r3, r2
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ebc:	4934      	ldr	r1, [pc, #208]	@ (8002f90 <HAL_GPIO_Init+0x30c>)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eca:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eee:	4a31      	ldr	r2, [pc, #196]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f18:	4a26      	ldr	r2, [pc, #152]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f1e:	4b25      	ldr	r3, [pc, #148]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f42:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f48:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f6c:	4a11      	ldr	r2, [pc, #68]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3301      	adds	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	f67f ae90 	bls.w	8002ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
 8002f84:	3724      	adds	r7, #36	@ 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40013800 	.word	0x40013800
 8002f94:	40020000 	.word	0x40020000
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	40020800 	.word	0x40020800
 8002fa0:	40020c00 	.word	0x40020c00
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40021400 	.word	0x40021400
 8002fac:	40021800 	.word	0x40021800
 8002fb0:	40021c00 	.word	0x40021c00
 8002fb4:	40013c00 	.word	0x40013c00

08002fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e12b      	b.n	8003222 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fb90 	bl	8002704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	@ 0x24
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800300a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800301a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800301c:	f001 fc3a 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 8003020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4a81      	ldr	r2, [pc, #516]	@ (800322c <HAL_I2C_Init+0x274>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d807      	bhi.n	800303c <HAL_I2C_Init+0x84>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a80      	ldr	r2, [pc, #512]	@ (8003230 <HAL_I2C_Init+0x278>)
 8003030:	4293      	cmp	r3, r2
 8003032:	bf94      	ite	ls
 8003034:	2301      	movls	r3, #1
 8003036:	2300      	movhi	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e006      	b.n	800304a <HAL_I2C_Init+0x92>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a7d      	ldr	r2, [pc, #500]	@ (8003234 <HAL_I2C_Init+0x27c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0e7      	b.n	8003222 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4a78      	ldr	r2, [pc, #480]	@ (8003238 <HAL_I2C_Init+0x280>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0c9b      	lsrs	r3, r3, #18
 800305c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a6a      	ldr	r2, [pc, #424]	@ (800322c <HAL_I2C_Init+0x274>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d802      	bhi.n	800308c <HAL_I2C_Init+0xd4>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	3301      	adds	r3, #1
 800308a:	e009      	b.n	80030a0 <HAL_I2C_Init+0xe8>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	4a69      	ldr	r2, [pc, #420]	@ (800323c <HAL_I2C_Init+0x284>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	3301      	adds	r3, #1
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	495c      	ldr	r1, [pc, #368]	@ (800322c <HAL_I2C_Init+0x274>)
 80030bc:	428b      	cmp	r3, r1
 80030be:	d819      	bhi.n	80030f4 <HAL_I2C_Init+0x13c>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e59      	subs	r1, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ce:	1c59      	adds	r1, r3, #1
 80030d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030d4:	400b      	ands	r3, r1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_I2C_Init+0x138>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1e59      	subs	r1, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ee:	e051      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 80030f0:	2304      	movs	r3, #4
 80030f2:	e04f      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d111      	bne.n	8003120 <HAL_I2C_Init+0x168>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1e58      	subs	r0, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e012      	b.n	8003146 <HAL_I2C_Init+0x18e>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e58      	subs	r0, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	0099      	lsls	r1, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	fbb0 f3f3 	udiv	r3, r0, r3
 8003136:	3301      	adds	r3, #1
 8003138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Init+0x196>
 800314a:	2301      	movs	r3, #1
 800314c:	e022      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10e      	bne.n	8003174 <HAL_I2C_Init+0x1bc>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1e58      	subs	r0, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	440b      	add	r3, r1
 8003164:	fbb0 f3f3 	udiv	r3, r0, r3
 8003168:	3301      	adds	r3, #1
 800316a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003172:	e00f      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	0099      	lsls	r1, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	fbb0 f3f3 	udiv	r3, r0, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003190:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	6809      	ldr	r1, [r1, #0]
 8003198:	4313      	orrs	r3, r2
 800319a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6911      	ldr	r1, [r2, #16]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68d2      	ldr	r2, [r2, #12]
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	000186a0 	.word	0x000186a0
 8003230:	001e847f 	.word	0x001e847f
 8003234:	003d08ff 	.word	0x003d08ff
 8003238:	431bde83 	.word	0x431bde83
 800323c:	10624dd3 	.word	0x10624dd3

08003240 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	460b      	mov	r3, r1
 800324e:	817b      	strh	r3, [r7, #10]
 8003250:	4613      	mov	r3, r2
 8003252:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7ff fc04 	bl	8002a60 <HAL_GetTick>
 8003258:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	f040 80e0 	bne.w	8003428 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2319      	movs	r3, #25
 800326e:	2201      	movs	r2, #1
 8003270:	4970      	ldr	r1, [pc, #448]	@ (8003434 <HAL_I2C_Master_Transmit+0x1f4>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fc64 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
 8003280:	e0d3      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_I2C_Master_Transmit+0x50>
 800328c:	2302      	movs	r3, #2
 800328e:	e0cc      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d007      	beq.n	80032b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2221      	movs	r2, #33	@ 0x21
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2210      	movs	r2, #16
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	893a      	ldrh	r2, [r7, #8]
 80032e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a50      	ldr	r2, [pc, #320]	@ (8003438 <HAL_I2C_Master_Transmit+0x1f8>)
 80032f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f8:	8979      	ldrh	r1, [r7, #10]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	6a3a      	ldr	r2, [r7, #32]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 face 	bl	80038a0 <I2C_MasterRequestWrite>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e08d      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003324:	e066      	b.n	80033f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	6a39      	ldr	r1, [r7, #32]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fd22 	bl	8003d74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b04      	cmp	r3, #4
 800333c:	d107      	bne.n	800334e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06b      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d11b      	bne.n	80033c8 <HAL_I2C_Master_Transmit+0x188>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d017      	beq.n	80033c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	6a39      	ldr	r1, [r7, #32]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fd19 	bl	8003e04 <I2C_WaitOnBTFFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d107      	bne.n	80033f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e01a      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d194      	bne.n	8003326 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	00100002 	.word	0x00100002
 8003438:	ffff0000 	.word	0xffff0000

0800343c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08c      	sub	sp, #48	@ 0x30
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	461a      	mov	r2, r3
 8003448:	460b      	mov	r3, r1
 800344a:	817b      	strh	r3, [r7, #10]
 800344c:	4613      	mov	r3, r2
 800344e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003450:	f7ff fb06 	bl	8002a60 <HAL_GetTick>
 8003454:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	f040 8217 	bne.w	8003892 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2319      	movs	r3, #25
 800346a:	2201      	movs	r2, #1
 800346c:	497c      	ldr	r1, [pc, #496]	@ (8003660 <HAL_I2C_Master_Receive+0x224>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fb66 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	e20a      	b.n	8003894 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_I2C_Master_Receive+0x50>
 8003488:	2302      	movs	r3, #2
 800348a:	e203      	b.n	8003894 <HAL_I2C_Master_Receive+0x458>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d007      	beq.n	80034b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2222      	movs	r2, #34	@ 0x22
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2210      	movs	r2, #16
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	893a      	ldrh	r2, [r7, #8]
 80034e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003664 <HAL_I2C_Master_Receive+0x228>)
 80034f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034f4:	8979      	ldrh	r1, [r7, #10]
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fa52 	bl	80039a4 <I2C_MasterRequestRead>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e1c4      	b.n	8003894 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d113      	bne.n	800353a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	623b      	str	r3, [r7, #32]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e198      	b.n	800386c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353e:	2b01      	cmp	r3, #1
 8003540:	d11b      	bne.n	800357a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e178      	b.n	800386c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357e:	2b02      	cmp	r3, #2
 8003580:	d11b      	bne.n	80035ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003590:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	e158      	b.n	800386c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035e0:	e144      	b.n	800386c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	f200 80f1 	bhi.w	80037ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d123      	bne.n	800363c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fc4b 	bl	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e145      	b.n	8003894 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800363a:	e117      	b.n	800386c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003640:	2b02      	cmp	r3, #2
 8003642:	d14e      	bne.n	80036e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	2200      	movs	r2, #0
 800364c:	4906      	ldr	r1, [pc, #24]	@ (8003668 <HAL_I2C_Master_Receive+0x22c>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fa76 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e11a      	b.n	8003894 <HAL_I2C_Master_Receive+0x458>
 800365e:	bf00      	nop
 8003660:	00100002 	.word	0x00100002
 8003664:	ffff0000 	.word	0xffff0000
 8003668:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800367a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036e0:	e0c4      	b.n	800386c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	2200      	movs	r2, #0
 80036ea:	496c      	ldr	r1, [pc, #432]	@ (800389c <HAL_I2C_Master_Receive+0x460>)
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fa27 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0cb      	b.n	8003894 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	2200      	movs	r2, #0
 8003746:	4955      	ldr	r1, [pc, #340]	@ (800389c <HAL_I2C_Master_Receive+0x460>)
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f9f9 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e09d      	b.n	8003894 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037cc:	e04e      	b.n	800386c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fb5e 	bl	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e058      	b.n	8003894 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b04      	cmp	r3, #4
 8003820:	d124      	bne.n	800386c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003826:	2b03      	cmp	r3, #3
 8003828:	d107      	bne.n	800383a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003838:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f aeb6 	bne.w	80035e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e000      	b.n	8003894 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003892:	2302      	movs	r3, #2
  }
}
 8003894:	4618      	mov	r0, r3
 8003896:	3728      	adds	r7, #40	@ 0x28
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	00010004 	.word	0x00010004

080038a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	460b      	mov	r3, r1
 80038ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d006      	beq.n	80038ca <I2C_MasterRequestWrite+0x2a>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d003      	beq.n	80038ca <I2C_MasterRequestWrite+0x2a>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038c8:	d108      	bne.n	80038dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e00b      	b.n	80038f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	2b12      	cmp	r3, #18
 80038e2:	d107      	bne.n	80038f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f91d 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800391a:	d103      	bne.n	8003924 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003922:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e035      	b.n	8003994 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003930:	d108      	bne.n	8003944 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003932:	897b      	ldrh	r3, [r7, #10]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003940:	611a      	str	r2, [r3, #16]
 8003942:	e01b      	b.n	800397c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003944:	897b      	ldrh	r3, [r7, #10]
 8003946:	11db      	asrs	r3, r3, #7
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f003 0306 	and.w	r3, r3, #6
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f063 030f 	orn	r3, r3, #15
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	490e      	ldr	r1, [pc, #56]	@ (800399c <I2C_MasterRequestWrite+0xfc>)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f966 	bl	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e010      	b.n	8003994 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003972:	897b      	ldrh	r3, [r7, #10]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4907      	ldr	r1, [pc, #28]	@ (80039a0 <I2C_MasterRequestWrite+0x100>)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f956 	bl	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	00010008 	.word	0x00010008
 80039a0:	00010002 	.word	0x00010002

080039a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	460b      	mov	r3, r1
 80039b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d006      	beq.n	80039de <I2C_MasterRequestRead+0x3a>
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d003      	beq.n	80039de <I2C_MasterRequestRead+0x3a>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039dc:	d108      	bne.n	80039f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e00b      	b.n	8003a08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f4:	2b11      	cmp	r3, #17
 80039f6:	d107      	bne.n	8003a08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f893 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00d      	beq.n	8003a3c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a2e:	d103      	bne.n	8003a38 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e079      	b.n	8003b30 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a44:	d108      	bne.n	8003a58 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a46:	897b      	ldrh	r3, [r7, #10]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]
 8003a56:	e05f      	b.n	8003b18 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a58:	897b      	ldrh	r3, [r7, #10]
 8003a5a:	11db      	asrs	r3, r3, #7
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 0306 	and.w	r3, r3, #6
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f063 030f 	orn	r3, r3, #15
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4930      	ldr	r1, [pc, #192]	@ (8003b38 <I2C_MasterRequestRead+0x194>)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f8dc 	bl	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e054      	b.n	8003b30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a86:	897b      	ldrh	r3, [r7, #10]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4929      	ldr	r1, [pc, #164]	@ (8003b3c <I2C_MasterRequestRead+0x198>)
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f8cc 	bl	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e044      	b.n	8003b30 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f831 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00d      	beq.n	8003b00 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af2:	d103      	bne.n	8003afc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e017      	b.n	8003b30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b00:	897b      	ldrh	r3, [r7, #10]
 8003b02:	11db      	asrs	r3, r3, #7
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 0306 	and.w	r3, r3, #6
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f063 030e 	orn	r3, r3, #14
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4907      	ldr	r1, [pc, #28]	@ (8003b3c <I2C_MasterRequestRead+0x198>)
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f888 	bl	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	00010008 	.word	0x00010008
 8003b3c:	00010002 	.word	0x00010002

08003b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b50:	e048      	b.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d044      	beq.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7fe ff81 	bl	8002a60 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d139      	bne.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	0c1b      	lsrs	r3, r3, #16
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d10d      	bne.n	8003b96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	43da      	mvns	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4013      	ands	r3, r2
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	e00c      	b.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	43da      	mvns	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d116      	bne.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e023      	b.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d10d      	bne.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	43da      	mvns	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	e00c      	b.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d093      	beq.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c42:	e071      	b.n	8003d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c52:	d123      	bne.n	8003c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	f043 0204 	orr.w	r2, r3, #4
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e067      	b.n	8003d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d041      	beq.n	8003d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca4:	f7fe fedc 	bl	8002a60 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d136      	bne.n	8003d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d10c      	bne.n	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	e00b      	b.n	8003cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	43da      	mvns	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e021      	b.n	8003d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	0c1b      	lsrs	r3, r3, #16
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d10c      	bne.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	43da      	mvns	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf14      	ite	ne
 8003d44:	2301      	movne	r3, #1
 8003d46:	2300      	moveq	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e00b      	b.n	8003d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4013      	ands	r3, r2
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f47f af6d 	bne.w	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d80:	e034      	b.n	8003dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f8e3 	bl	8003f4e <I2C_IsAcknowledgeFailed>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e034      	b.n	8003dfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d028      	beq.n	8003dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9a:	f7fe fe61 	bl	8002a60 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d302      	bcc.n	8003db0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11d      	bne.n	8003dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dba:	2b80      	cmp	r3, #128	@ 0x80
 8003dbc:	d016      	beq.n	8003dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e007      	b.n	8003dfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df6:	2b80      	cmp	r3, #128	@ 0x80
 8003df8:	d1c3      	bne.n	8003d82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e10:	e034      	b.n	8003e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f89b 	bl	8003f4e <I2C_IsAcknowledgeFailed>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e034      	b.n	8003e8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d028      	beq.n	8003e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fe fe19 	bl	8002a60 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d11d      	bne.n	8003e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d016      	beq.n	8003e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e007      	b.n	8003e8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d1c3      	bne.n	8003e12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ea0:	e049      	b.n	8003f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d119      	bne.n	8003ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0210 	mvn.w	r2, #16
 8003eb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e030      	b.n	8003f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee4:	f7fe fdbc 	bl	8002a60 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d11d      	bne.n	8003f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f04:	2b40      	cmp	r3, #64	@ 0x40
 8003f06:	d016      	beq.n	8003f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e007      	b.n	8003f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f40:	2b40      	cmp	r3, #64	@ 0x40
 8003f42:	d1ae      	bne.n	8003ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f64:	d11b      	bne.n	8003f9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	f043 0204 	orr.w	r2, r3, #4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e267      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d075      	beq.n	80040b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fca:	4b88      	ldr	r3, [pc, #544]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fd6:	4b85      	ldr	r3, [pc, #532]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d112      	bne.n	8004008 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe2:	4b82      	ldr	r3, [pc, #520]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fee:	d10b      	bne.n	8004008 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d05b      	beq.n	80040b4 <HAL_RCC_OscConfig+0x108>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d157      	bne.n	80040b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e242      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004010:	d106      	bne.n	8004020 <HAL_RCC_OscConfig+0x74>
 8004012:	4b76      	ldr	r3, [pc, #472]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a75      	ldr	r2, [pc, #468]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e01d      	b.n	800405c <HAL_RCC_OscConfig+0xb0>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x98>
 800402a:	4b70      	ldr	r3, [pc, #448]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a6f      	ldr	r2, [pc, #444]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b6d      	ldr	r3, [pc, #436]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6c      	ldr	r2, [pc, #432]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0xb0>
 8004044:	4b69      	ldr	r3, [pc, #420]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a68      	ldr	r2, [pc, #416]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800404a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4b66      	ldr	r3, [pc, #408]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a65      	ldr	r2, [pc, #404]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800405a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d013      	beq.n	800408c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fe fcfc 	bl	8002a60 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7fe fcf8 	bl	8002a60 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	@ 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e207      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	4b5b      	ldr	r3, [pc, #364]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0xc0>
 800408a:	e014      	b.n	80040b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe fce8 	bl	8002a60 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004094:	f7fe fce4 	bl	8002a60 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	@ 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1f3      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a6:	4b51      	ldr	r3, [pc, #324]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0xe8>
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d063      	beq.n	800418a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040c2:	4b4a      	ldr	r3, [pc, #296]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00b      	beq.n	80040e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ce:	4b47      	ldr	r3, [pc, #284]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d11c      	bne.n	8004114 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040da:	4b44      	ldr	r3, [pc, #272]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d116      	bne.n	8004114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	4b41      	ldr	r3, [pc, #260]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_RCC_OscConfig+0x152>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e1c7      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fe:	4b3b      	ldr	r3, [pc, #236]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4937      	ldr	r1, [pc, #220]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004112:	e03a      	b.n	800418a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d020      	beq.n	800415e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411c:	4b34      	ldr	r3, [pc, #208]	@ (80041f0 <HAL_RCC_OscConfig+0x244>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fe fc9d 	bl	8002a60 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412a:	f7fe fc99 	bl	8002a60 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e1a8      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413c:	4b2b      	ldr	r3, [pc, #172]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	4b28      	ldr	r3, [pc, #160]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4925      	ldr	r1, [pc, #148]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]
 800415c:	e015      	b.n	800418a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415e:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <HAL_RCC_OscConfig+0x244>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe fc7c 	bl	8002a60 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416c:	f7fe fc78 	bl	8002a60 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e187      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417e:	4b1b      	ldr	r3, [pc, #108]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d036      	beq.n	8004204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d016      	beq.n	80041cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <HAL_RCC_OscConfig+0x248>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a4:	f7fe fc5c 	bl	8002a60 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ac:	f7fe fc58 	bl	8002a60 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e167      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041be:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80041c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x200>
 80041ca:	e01b      	b.n	8004204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <HAL_RCC_OscConfig+0x248>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d2:	f7fe fc45 	bl	8002a60 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d8:	e00e      	b.n	80041f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041da:	f7fe fc41 	bl	8002a60 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d907      	bls.n	80041f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e150      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
 80041ec:	40023800 	.word	0x40023800
 80041f0:	42470000 	.word	0x42470000
 80041f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	4b88      	ldr	r3, [pc, #544]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80041fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1ea      	bne.n	80041da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 8097 	beq.w	8004340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004216:	4b81      	ldr	r3, [pc, #516]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	4b7d      	ldr	r3, [pc, #500]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	4a7c      	ldr	r2, [pc, #496]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004230:	6413      	str	r3, [r2, #64]	@ 0x40
 8004232:	4b7a      	ldr	r3, [pc, #488]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004242:	4b77      	ldr	r3, [pc, #476]	@ (8004420 <HAL_RCC_OscConfig+0x474>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d118      	bne.n	8004280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424e:	4b74      	ldr	r3, [pc, #464]	@ (8004420 <HAL_RCC_OscConfig+0x474>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a73      	ldr	r2, [pc, #460]	@ (8004420 <HAL_RCC_OscConfig+0x474>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800425a:	f7fe fc01 	bl	8002a60 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fe fbfd 	bl	8002a60 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e10c      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	4b6a      	ldr	r3, [pc, #424]	@ (8004420 <HAL_RCC_OscConfig+0x474>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x2ea>
 8004288:	4b64      	ldr	r3, [pc, #400]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428c:	4a63      	ldr	r2, [pc, #396]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6713      	str	r3, [r2, #112]	@ 0x70
 8004294:	e01c      	b.n	80042d0 <HAL_RCC_OscConfig+0x324>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b05      	cmp	r3, #5
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x30c>
 800429e:	4b5f      	ldr	r3, [pc, #380]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a2:	4a5e      	ldr	r2, [pc, #376]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042a4:	f043 0304 	orr.w	r3, r3, #4
 80042a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042aa:	4b5c      	ldr	r3, [pc, #368]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	4a5b      	ldr	r2, [pc, #364]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b6:	e00b      	b.n	80042d0 <HAL_RCC_OscConfig+0x324>
 80042b8:	4b58      	ldr	r3, [pc, #352]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042bc:	4a57      	ldr	r2, [pc, #348]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c4:	4b55      	ldr	r3, [pc, #340]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c8:	4a54      	ldr	r2, [pc, #336]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042ca:	f023 0304 	bic.w	r3, r3, #4
 80042ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d015      	beq.n	8004304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fe fbc2 	bl	8002a60 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fe fbbe 	bl	8002a60 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0cb      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f6:	4b49      	ldr	r3, [pc, #292]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0ee      	beq.n	80042e0 <HAL_RCC_OscConfig+0x334>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004304:	f7fe fbac 	bl	8002a60 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430a:	e00a      	b.n	8004322 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fe fba8 	bl	8002a60 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0b5      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004322:	4b3e      	ldr	r3, [pc, #248]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ee      	bne.n	800430c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004334:	4b39      	ldr	r3, [pc, #228]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	4a38      	ldr	r2, [pc, #224]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 800433a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80a1 	beq.w	800448c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800434a:	4b34      	ldr	r3, [pc, #208]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b08      	cmp	r3, #8
 8004354:	d05c      	beq.n	8004410 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d141      	bne.n	80043e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435e:	4b31      	ldr	r3, [pc, #196]	@ (8004424 <HAL_RCC_OscConfig+0x478>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fe fb7c 	bl	8002a60 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436c:	f7fe fb78 	bl	8002a60 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e087      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	4b27      	ldr	r3, [pc, #156]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	019b      	lsls	r3, r3, #6
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	3b01      	subs	r3, #1
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	491b      	ldr	r1, [pc, #108]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004424 <HAL_RCC_OscConfig+0x478>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ba:	f7fe fb51 	bl	8002a60 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fe fb4d 	bl	8002a60 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e05c      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d4:	4b11      	ldr	r3, [pc, #68]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x416>
 80043e0:	e054      	b.n	800448c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <HAL_RCC_OscConfig+0x478>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fe fb3a 	bl	8002a60 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fe fb36 	bl	8002a60 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e045      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x444>
 800440e:	e03d      	b.n	800448c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d107      	bne.n	8004428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e038      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
 800441c:	40023800 	.word	0x40023800
 8004420:	40007000 	.word	0x40007000
 8004424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004428:	4b1b      	ldr	r3, [pc, #108]	@ (8004498 <HAL_RCC_OscConfig+0x4ec>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d028      	beq.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d121      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d11a      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004458:	4013      	ands	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800445e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004460:	4293      	cmp	r3, r2
 8004462:	d111      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	085b      	lsrs	r3, r3, #1
 8004470:	3b01      	subs	r3, #1
 8004472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d107      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800

0800449c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0cc      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b0:	4b68      	ldr	r3, [pc, #416]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d90c      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b65      	ldr	r3, [pc, #404]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b63      	ldr	r3, [pc, #396]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0b8      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f0:	4b59      	ldr	r3, [pc, #356]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a58      	ldr	r2, [pc, #352]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004508:	4b53      	ldr	r3, [pc, #332]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a52      	ldr	r2, [pc, #328]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004514:	4b50      	ldr	r3, [pc, #320]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	494d      	ldr	r1, [pc, #308]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d044      	beq.n	80045bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d107      	bne.n	800454a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	4b47      	ldr	r3, [pc, #284]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d119      	bne.n	800457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e07f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d003      	beq.n	800455a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004556:	2b03      	cmp	r3, #3
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455a:	4b3f      	ldr	r3, [pc, #252]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e06f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456a:	4b3b      	ldr	r3, [pc, #236]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e067      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800457a:	4b37      	ldr	r3, [pc, #220]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4934      	ldr	r1, [pc, #208]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800458c:	f7fe fa68 	bl	8002a60 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	e00a      	b.n	80045aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004594:	f7fe fa64 	bl	8002a60 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e04f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 020c 	and.w	r2, r3, #12
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1eb      	bne.n	8004594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045bc:	4b25      	ldr	r3, [pc, #148]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d20c      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ca:	4b22      	ldr	r3, [pc, #136]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b20      	ldr	r3, [pc, #128]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e032      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f0:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4916      	ldr	r1, [pc, #88]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800460e:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	490e      	ldr	r1, [pc, #56]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004622:	f000 f821 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8004626:	4602      	mov	r2, r0
 8004628:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	490a      	ldr	r1, [pc, #40]	@ (800465c <HAL_RCC_ClockConfig+0x1c0>)
 8004634:	5ccb      	ldrb	r3, [r1, r3]
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800463e:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe f9ca 	bl	80029dc <HAL_InitTick>

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40023c00 	.word	0x40023c00
 8004658:	40023800 	.word	0x40023800
 800465c:	08007344 	.word	0x08007344
 8004660:	20000000 	.word	0x20000000
 8004664:	20000004 	.word	0x20000004

08004668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b094      	sub	sp, #80	@ 0x50
 800466e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004680:	4b7c      	ldr	r3, [pc, #496]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d00d      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x40>
 800468c:	2b08      	cmp	r3, #8
 800468e:	f200 80e7 	bhi.w	8004860 <HAL_RCC_GetSysClockFreq+0x1f8>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x34>
 8004696:	2b04      	cmp	r3, #4
 8004698:	d003      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800469a:	e0e1      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800469c:	4b76      	ldr	r3, [pc, #472]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x210>)
 800469e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a0:	e0e1      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a2:	4b76      	ldr	r3, [pc, #472]	@ (800487c <HAL_RCC_GetSysClockFreq+0x214>)
 80046a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a6:	e0de      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a8:	4b72      	ldr	r3, [pc, #456]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x20c>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b2:	4b70      	ldr	r3, [pc, #448]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x20c>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d065      	beq.n	800478a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046be:	4b6d      	ldr	r3, [pc, #436]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x20c>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	099b      	lsrs	r3, r3, #6
 80046c4:	2200      	movs	r2, #0
 80046c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046d2:	2300      	movs	r3, #0
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046da:	4622      	mov	r2, r4
 80046dc:	462b      	mov	r3, r5
 80046de:	f04f 0000 	mov.w	r0, #0
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	0159      	lsls	r1, r3, #5
 80046e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ec:	0150      	lsls	r0, r2, #5
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4621      	mov	r1, r4
 80046f4:	1a51      	subs	r1, r2, r1
 80046f6:	6139      	str	r1, [r7, #16]
 80046f8:	4629      	mov	r1, r5
 80046fa:	eb63 0301 	sbc.w	r3, r3, r1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800470c:	4659      	mov	r1, fp
 800470e:	018b      	lsls	r3, r1, #6
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004716:	4651      	mov	r1, sl
 8004718:	018a      	lsls	r2, r1, #6
 800471a:	46d4      	mov	ip, sl
 800471c:	ebb2 080c 	subs.w	r8, r2, ip
 8004720:	4659      	mov	r1, fp
 8004722:	eb63 0901 	sbc.w	r9, r3, r1
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800473a:	4690      	mov	r8, r2
 800473c:	4699      	mov	r9, r3
 800473e:	4623      	mov	r3, r4
 8004740:	eb18 0303 	adds.w	r3, r8, r3
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	462b      	mov	r3, r5
 8004748:	eb49 0303 	adc.w	r3, r9, r3
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800475a:	4629      	mov	r1, r5
 800475c:	024b      	lsls	r3, r1, #9
 800475e:	4620      	mov	r0, r4
 8004760:	4629      	mov	r1, r5
 8004762:	4604      	mov	r4, r0
 8004764:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004768:	4601      	mov	r1, r0
 800476a:	024a      	lsls	r2, r1, #9
 800476c:	4610      	mov	r0, r2
 800476e:	4619      	mov	r1, r3
 8004770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004772:	2200      	movs	r2, #0
 8004774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004778:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800477c:	f7fc fa14 	bl	8000ba8 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4613      	mov	r3, r2
 8004786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004788:	e05c      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478a:	4b3a      	ldr	r3, [pc, #232]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x20c>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	099b      	lsrs	r3, r3, #6
 8004790:	2200      	movs	r2, #0
 8004792:	4618      	mov	r0, r3
 8004794:	4611      	mov	r1, r2
 8004796:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800479a:	623b      	str	r3, [r7, #32]
 800479c:	2300      	movs	r3, #0
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047a4:	4642      	mov	r2, r8
 80047a6:	464b      	mov	r3, r9
 80047a8:	f04f 0000 	mov.w	r0, #0
 80047ac:	f04f 0100 	mov.w	r1, #0
 80047b0:	0159      	lsls	r1, r3, #5
 80047b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b6:	0150      	lsls	r0, r2, #5
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	46c4      	mov	ip, r8
 80047be:	ebb2 0a0c 	subs.w	sl, r2, ip
 80047c2:	4640      	mov	r0, r8
 80047c4:	4649      	mov	r1, r9
 80047c6:	468c      	mov	ip, r1
 80047c8:	eb63 0b0c 	sbc.w	fp, r3, ip
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047e0:	ebb2 040a 	subs.w	r4, r2, sl
 80047e4:	eb63 050b 	sbc.w	r5, r3, fp
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	00eb      	lsls	r3, r5, #3
 80047f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047f6:	00e2      	lsls	r2, r4, #3
 80047f8:	4614      	mov	r4, r2
 80047fa:	461d      	mov	r5, r3
 80047fc:	4603      	mov	r3, r0
 80047fe:	18e3      	adds	r3, r4, r3
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	460b      	mov	r3, r1
 8004804:	eb45 0303 	adc.w	r3, r5, r3
 8004808:	607b      	str	r3, [r7, #4]
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004816:	4629      	mov	r1, r5
 8004818:	028b      	lsls	r3, r1, #10
 800481a:	4620      	mov	r0, r4
 800481c:	4629      	mov	r1, r5
 800481e:	4604      	mov	r4, r0
 8004820:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004824:	4601      	mov	r1, r0
 8004826:	028a      	lsls	r2, r1, #10
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800482e:	2200      	movs	r2, #0
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	61fa      	str	r2, [r7, #28]
 8004834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004838:	f7fc f9b6 	bl	8000ba8 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4613      	mov	r3, r2
 8004842:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004844:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	3301      	adds	r3, #1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004854:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800485e:	e002      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004860:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x210>)
 8004862:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004868:	4618      	mov	r0, r3
 800486a:	3750      	adds	r7, #80	@ 0x50
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	00f42400 	.word	0x00f42400
 800487c:	007a1200 	.word	0x007a1200

08004880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004884:	4b02      	ldr	r3, [pc, #8]	@ (8004890 <HAL_RCC_GetHCLKFreq+0x10>)
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	20000000 	.word	0x20000000

08004894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004898:	f7ff fff2 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	0a9b      	lsrs	r3, r3, #10
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	4903      	ldr	r1, [pc, #12]	@ (80048b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048aa:	5ccb      	ldrb	r3, [r1, r3]
 80048ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40023800 	.word	0x40023800
 80048b8:	08007354 	.word	0x08007354

080048bc <__cvt>:
 80048bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	b088      	sub	sp, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	461d      	mov	r5, r3
 80048c6:	4614      	mov	r4, r2
 80048c8:	bfbc      	itt	lt
 80048ca:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80048ce:	4614      	movlt	r4, r2
 80048d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80048d2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80048d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80048d8:	bfb6      	itet	lt
 80048da:	461d      	movlt	r5, r3
 80048dc:	2300      	movge	r3, #0
 80048de:	232d      	movlt	r3, #45	@ 0x2d
 80048e0:	7013      	strb	r3, [r2, #0]
 80048e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048e4:	f023 0820 	bic.w	r8, r3, #32
 80048e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048ec:	d005      	beq.n	80048fa <__cvt+0x3e>
 80048ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80048f2:	d100      	bne.n	80048f6 <__cvt+0x3a>
 80048f4:	3601      	adds	r6, #1
 80048f6:	2302      	movs	r3, #2
 80048f8:	e000      	b.n	80048fc <__cvt+0x40>
 80048fa:	2303      	movs	r3, #3
 80048fc:	aa07      	add	r2, sp, #28
 80048fe:	9204      	str	r2, [sp, #16]
 8004900:	aa06      	add	r2, sp, #24
 8004902:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004906:	e9cd 3600 	strd	r3, r6, [sp]
 800490a:	4622      	mov	r2, r4
 800490c:	462b      	mov	r3, r5
 800490e:	f000 ff4f 	bl	80057b0 <_dtoa_r>
 8004912:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004916:	4607      	mov	r7, r0
 8004918:	d119      	bne.n	800494e <__cvt+0x92>
 800491a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800491c:	07db      	lsls	r3, r3, #31
 800491e:	d50e      	bpl.n	800493e <__cvt+0x82>
 8004920:	eb00 0906 	add.w	r9, r0, r6
 8004924:	2200      	movs	r2, #0
 8004926:	2300      	movs	r3, #0
 8004928:	4620      	mov	r0, r4
 800492a:	4629      	mov	r1, r5
 800492c:	f7fc f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004930:	b108      	cbz	r0, 8004936 <__cvt+0x7a>
 8004932:	f8cd 901c 	str.w	r9, [sp, #28]
 8004936:	2230      	movs	r2, #48	@ 0x30
 8004938:	9b07      	ldr	r3, [sp, #28]
 800493a:	454b      	cmp	r3, r9
 800493c:	d31e      	bcc.n	800497c <__cvt+0xc0>
 800493e:	9b07      	ldr	r3, [sp, #28]
 8004940:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004942:	1bdb      	subs	r3, r3, r7
 8004944:	4638      	mov	r0, r7
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	b008      	add	sp, #32
 800494a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004952:	eb00 0906 	add.w	r9, r0, r6
 8004956:	d1e5      	bne.n	8004924 <__cvt+0x68>
 8004958:	7803      	ldrb	r3, [r0, #0]
 800495a:	2b30      	cmp	r3, #48	@ 0x30
 800495c:	d10a      	bne.n	8004974 <__cvt+0xb8>
 800495e:	2200      	movs	r2, #0
 8004960:	2300      	movs	r3, #0
 8004962:	4620      	mov	r0, r4
 8004964:	4629      	mov	r1, r5
 8004966:	f7fc f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800496a:	b918      	cbnz	r0, 8004974 <__cvt+0xb8>
 800496c:	f1c6 0601 	rsb	r6, r6, #1
 8004970:	f8ca 6000 	str.w	r6, [sl]
 8004974:	f8da 3000 	ldr.w	r3, [sl]
 8004978:	4499      	add	r9, r3
 800497a:	e7d3      	b.n	8004924 <__cvt+0x68>
 800497c:	1c59      	adds	r1, r3, #1
 800497e:	9107      	str	r1, [sp, #28]
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	e7d9      	b.n	8004938 <__cvt+0x7c>

08004984 <__exponent>:
 8004984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004986:	2900      	cmp	r1, #0
 8004988:	bfba      	itte	lt
 800498a:	4249      	neglt	r1, r1
 800498c:	232d      	movlt	r3, #45	@ 0x2d
 800498e:	232b      	movge	r3, #43	@ 0x2b
 8004990:	2909      	cmp	r1, #9
 8004992:	7002      	strb	r2, [r0, #0]
 8004994:	7043      	strb	r3, [r0, #1]
 8004996:	dd29      	ble.n	80049ec <__exponent+0x68>
 8004998:	f10d 0307 	add.w	r3, sp, #7
 800499c:	461d      	mov	r5, r3
 800499e:	270a      	movs	r7, #10
 80049a0:	461a      	mov	r2, r3
 80049a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80049a6:	fb07 1416 	mls	r4, r7, r6, r1
 80049aa:	3430      	adds	r4, #48	@ 0x30
 80049ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80049b0:	460c      	mov	r4, r1
 80049b2:	2c63      	cmp	r4, #99	@ 0x63
 80049b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80049b8:	4631      	mov	r1, r6
 80049ba:	dcf1      	bgt.n	80049a0 <__exponent+0x1c>
 80049bc:	3130      	adds	r1, #48	@ 0x30
 80049be:	1e94      	subs	r4, r2, #2
 80049c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049c4:	1c41      	adds	r1, r0, #1
 80049c6:	4623      	mov	r3, r4
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	d30a      	bcc.n	80049e2 <__exponent+0x5e>
 80049cc:	f10d 0309 	add.w	r3, sp, #9
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	42ac      	cmp	r4, r5
 80049d4:	bf88      	it	hi
 80049d6:	2300      	movhi	r3, #0
 80049d8:	3302      	adds	r3, #2
 80049da:	4403      	add	r3, r0
 80049dc:	1a18      	subs	r0, r3, r0
 80049de:	b003      	add	sp, #12
 80049e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80049e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80049ea:	e7ed      	b.n	80049c8 <__exponent+0x44>
 80049ec:	2330      	movs	r3, #48	@ 0x30
 80049ee:	3130      	adds	r1, #48	@ 0x30
 80049f0:	7083      	strb	r3, [r0, #2]
 80049f2:	70c1      	strb	r1, [r0, #3]
 80049f4:	1d03      	adds	r3, r0, #4
 80049f6:	e7f1      	b.n	80049dc <__exponent+0x58>

080049f8 <_printf_float>:
 80049f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	b091      	sub	sp, #68	@ 0x44
 80049fe:	460c      	mov	r4, r1
 8004a00:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004a04:	4616      	mov	r6, r2
 8004a06:	461f      	mov	r7, r3
 8004a08:	4605      	mov	r5, r0
 8004a0a:	f000 fdc1 	bl	8005590 <_localeconv_r>
 8004a0e:	6803      	ldr	r3, [r0, #0]
 8004a10:	9308      	str	r3, [sp, #32]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fb fc2c 	bl	8000270 <strlen>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a20:	9009      	str	r0, [sp, #36]	@ 0x24
 8004a22:	3307      	adds	r3, #7
 8004a24:	f023 0307 	bic.w	r3, r3, #7
 8004a28:	f103 0208 	add.w	r2, r3, #8
 8004a2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a30:	f8d4 b000 	ldr.w	fp, [r4]
 8004a34:	f8c8 2000 	str.w	r2, [r8]
 8004a38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a42:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a4e:	4b9d      	ldr	r3, [pc, #628]	@ (8004cc4 <_printf_float+0x2cc>)
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	f7fc f86a 	bl	8000b2c <__aeabi_dcmpun>
 8004a58:	bb70      	cbnz	r0, 8004ab8 <_printf_float+0xc0>
 8004a5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a5e:	4b99      	ldr	r3, [pc, #612]	@ (8004cc4 <_printf_float+0x2cc>)
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295
 8004a64:	f7fc f844 	bl	8000af0 <__aeabi_dcmple>
 8004a68:	bb30      	cbnz	r0, 8004ab8 <_printf_float+0xc0>
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	4640      	mov	r0, r8
 8004a70:	4649      	mov	r1, r9
 8004a72:	f7fc f833 	bl	8000adc <__aeabi_dcmplt>
 8004a76:	b110      	cbz	r0, 8004a7e <_printf_float+0x86>
 8004a78:	232d      	movs	r3, #45	@ 0x2d
 8004a7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a7e:	4a92      	ldr	r2, [pc, #584]	@ (8004cc8 <_printf_float+0x2d0>)
 8004a80:	4b92      	ldr	r3, [pc, #584]	@ (8004ccc <_printf_float+0x2d4>)
 8004a82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a86:	bf94      	ite	ls
 8004a88:	4690      	movls	r8, r2
 8004a8a:	4698      	movhi	r8, r3
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	6123      	str	r3, [r4, #16]
 8004a90:	f02b 0304 	bic.w	r3, fp, #4
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	f04f 0900 	mov.w	r9, #0
 8004a9a:	9700      	str	r7, [sp, #0]
 8004a9c:	4633      	mov	r3, r6
 8004a9e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 f9d4 	bl	8004e50 <_printf_common>
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	f040 808f 	bne.w	8004bcc <_printf_float+0x1d4>
 8004aae:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab2:	b011      	add	sp, #68	@ 0x44
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	4640      	mov	r0, r8
 8004abe:	4649      	mov	r1, r9
 8004ac0:	f7fc f834 	bl	8000b2c <__aeabi_dcmpun>
 8004ac4:	b140      	cbz	r0, 8004ad8 <_printf_float+0xe0>
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bfbc      	itt	lt
 8004acc:	232d      	movlt	r3, #45	@ 0x2d
 8004ace:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004ad2:	4a7f      	ldr	r2, [pc, #508]	@ (8004cd0 <_printf_float+0x2d8>)
 8004ad4:	4b7f      	ldr	r3, [pc, #508]	@ (8004cd4 <_printf_float+0x2dc>)
 8004ad6:	e7d4      	b.n	8004a82 <_printf_float+0x8a>
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004ae0:	d13f      	bne.n	8004b62 <_printf_float+0x16a>
 8004ae2:	2306      	movs	r3, #6
 8004ae4:	6063      	str	r3, [r4, #4]
 8004ae6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004aea:	2200      	movs	r2, #0
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	9206      	str	r2, [sp, #24]
 8004af0:	aa0e      	add	r2, sp, #56	@ 0x38
 8004af2:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004af6:	aa0d      	add	r2, sp, #52	@ 0x34
 8004af8:	9203      	str	r2, [sp, #12]
 8004afa:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004afe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b02:	6863      	ldr	r3, [r4, #4]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	910a      	str	r1, [sp, #40]	@ 0x28
 8004b0e:	f7ff fed5 	bl	80048bc <__cvt>
 8004b12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b14:	2947      	cmp	r1, #71	@ 0x47
 8004b16:	4680      	mov	r8, r0
 8004b18:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004b1a:	d128      	bne.n	8004b6e <_printf_float+0x176>
 8004b1c:	1cc8      	adds	r0, r1, #3
 8004b1e:	db02      	blt.n	8004b26 <_printf_float+0x12e>
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	4299      	cmp	r1, r3
 8004b24:	dd40      	ble.n	8004ba8 <_printf_float+0x1b0>
 8004b26:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b2a:	fa5f fa8a 	uxtb.w	sl, sl
 8004b2e:	3901      	subs	r1, #1
 8004b30:	4652      	mov	r2, sl
 8004b32:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b36:	910d      	str	r1, [sp, #52]	@ 0x34
 8004b38:	f7ff ff24 	bl	8004984 <__exponent>
 8004b3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b3e:	1813      	adds	r3, r2, r0
 8004b40:	2a01      	cmp	r2, #1
 8004b42:	4681      	mov	r9, r0
 8004b44:	6123      	str	r3, [r4, #16]
 8004b46:	dc02      	bgt.n	8004b4e <_printf_float+0x156>
 8004b48:	6822      	ldr	r2, [r4, #0]
 8004b4a:	07d2      	lsls	r2, r2, #31
 8004b4c:	d501      	bpl.n	8004b52 <_printf_float+0x15a>
 8004b4e:	3301      	adds	r3, #1
 8004b50:	6123      	str	r3, [r4, #16]
 8004b52:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d09f      	beq.n	8004a9a <_printf_float+0xa2>
 8004b5a:	232d      	movs	r3, #45	@ 0x2d
 8004b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b60:	e79b      	b.n	8004a9a <_printf_float+0xa2>
 8004b62:	2947      	cmp	r1, #71	@ 0x47
 8004b64:	d1bf      	bne.n	8004ae6 <_printf_float+0xee>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1bd      	bne.n	8004ae6 <_printf_float+0xee>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e7ba      	b.n	8004ae4 <_printf_float+0xec>
 8004b6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b72:	d9dc      	bls.n	8004b2e <_printf_float+0x136>
 8004b74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b78:	d118      	bne.n	8004bac <_printf_float+0x1b4>
 8004b7a:	2900      	cmp	r1, #0
 8004b7c:	6863      	ldr	r3, [r4, #4]
 8004b7e:	dd0b      	ble.n	8004b98 <_printf_float+0x1a0>
 8004b80:	6121      	str	r1, [r4, #16]
 8004b82:	b913      	cbnz	r3, 8004b8a <_printf_float+0x192>
 8004b84:	6822      	ldr	r2, [r4, #0]
 8004b86:	07d0      	lsls	r0, r2, #31
 8004b88:	d502      	bpl.n	8004b90 <_printf_float+0x198>
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	440b      	add	r3, r1
 8004b8e:	6123      	str	r3, [r4, #16]
 8004b90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b92:	f04f 0900 	mov.w	r9, #0
 8004b96:	e7dc      	b.n	8004b52 <_printf_float+0x15a>
 8004b98:	b913      	cbnz	r3, 8004ba0 <_printf_float+0x1a8>
 8004b9a:	6822      	ldr	r2, [r4, #0]
 8004b9c:	07d2      	lsls	r2, r2, #31
 8004b9e:	d501      	bpl.n	8004ba4 <_printf_float+0x1ac>
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	e7f4      	b.n	8004b8e <_printf_float+0x196>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e7f2      	b.n	8004b8e <_printf_float+0x196>
 8004ba8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004bac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bae:	4299      	cmp	r1, r3
 8004bb0:	db05      	blt.n	8004bbe <_printf_float+0x1c6>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	6121      	str	r1, [r4, #16]
 8004bb6:	07d8      	lsls	r0, r3, #31
 8004bb8:	d5ea      	bpl.n	8004b90 <_printf_float+0x198>
 8004bba:	1c4b      	adds	r3, r1, #1
 8004bbc:	e7e7      	b.n	8004b8e <_printf_float+0x196>
 8004bbe:	2900      	cmp	r1, #0
 8004bc0:	bfd4      	ite	le
 8004bc2:	f1c1 0202 	rsble	r2, r1, #2
 8004bc6:	2201      	movgt	r2, #1
 8004bc8:	4413      	add	r3, r2
 8004bca:	e7e0      	b.n	8004b8e <_printf_float+0x196>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	055a      	lsls	r2, r3, #21
 8004bd0:	d407      	bmi.n	8004be2 <_printf_float+0x1ea>
 8004bd2:	6923      	ldr	r3, [r4, #16]
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b8      	blx	r7
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d12b      	bne.n	8004c38 <_printf_float+0x240>
 8004be0:	e765      	b.n	8004aae <_printf_float+0xb6>
 8004be2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004be6:	f240 80dd 	bls.w	8004da4 <_printf_float+0x3ac>
 8004bea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f7fb ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d033      	beq.n	8004c62 <_printf_float+0x26a>
 8004bfa:	4a37      	ldr	r2, [pc, #220]	@ (8004cd8 <_printf_float+0x2e0>)
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4628      	mov	r0, r5
 8004c02:	47b8      	blx	r7
 8004c04:	3001      	adds	r0, #1
 8004c06:	f43f af52 	beq.w	8004aae <_printf_float+0xb6>
 8004c0a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004c0e:	4543      	cmp	r3, r8
 8004c10:	db02      	blt.n	8004c18 <_printf_float+0x220>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	07d8      	lsls	r0, r3, #31
 8004c16:	d50f      	bpl.n	8004c38 <_printf_float+0x240>
 8004c18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	f43f af43 	beq.w	8004aae <_printf_float+0xb6>
 8004c28:	f04f 0900 	mov.w	r9, #0
 8004c2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c30:	f104 0a1a 	add.w	sl, r4, #26
 8004c34:	45c8      	cmp	r8, r9
 8004c36:	dc09      	bgt.n	8004c4c <_printf_float+0x254>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	079b      	lsls	r3, r3, #30
 8004c3c:	f100 8103 	bmi.w	8004e46 <_printf_float+0x44e>
 8004c40:	68e0      	ldr	r0, [r4, #12]
 8004c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c44:	4298      	cmp	r0, r3
 8004c46:	bfb8      	it	lt
 8004c48:	4618      	movlt	r0, r3
 8004c4a:	e732      	b.n	8004ab2 <_printf_float+0xba>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4652      	mov	r2, sl
 8004c50:	4631      	mov	r1, r6
 8004c52:	4628      	mov	r0, r5
 8004c54:	47b8      	blx	r7
 8004c56:	3001      	adds	r0, #1
 8004c58:	f43f af29 	beq.w	8004aae <_printf_float+0xb6>
 8004c5c:	f109 0901 	add.w	r9, r9, #1
 8004c60:	e7e8      	b.n	8004c34 <_printf_float+0x23c>
 8004c62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	dc39      	bgt.n	8004cdc <_printf_float+0x2e4>
 8004c68:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd8 <_printf_float+0x2e0>)
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	4628      	mov	r0, r5
 8004c70:	47b8      	blx	r7
 8004c72:	3001      	adds	r0, #1
 8004c74:	f43f af1b 	beq.w	8004aae <_printf_float+0xb6>
 8004c78:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004c7c:	ea59 0303 	orrs.w	r3, r9, r3
 8004c80:	d102      	bne.n	8004c88 <_printf_float+0x290>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	07d9      	lsls	r1, r3, #31
 8004c86:	d5d7      	bpl.n	8004c38 <_printf_float+0x240>
 8004c88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	f43f af0b 	beq.w	8004aae <_printf_float+0xb6>
 8004c98:	f04f 0a00 	mov.w	sl, #0
 8004c9c:	f104 0b1a 	add.w	fp, r4, #26
 8004ca0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ca2:	425b      	negs	r3, r3
 8004ca4:	4553      	cmp	r3, sl
 8004ca6:	dc01      	bgt.n	8004cac <_printf_float+0x2b4>
 8004ca8:	464b      	mov	r3, r9
 8004caa:	e793      	b.n	8004bd4 <_printf_float+0x1dc>
 8004cac:	2301      	movs	r3, #1
 8004cae:	465a      	mov	r2, fp
 8004cb0:	4631      	mov	r1, r6
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	47b8      	blx	r7
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	f43f aef9 	beq.w	8004aae <_printf_float+0xb6>
 8004cbc:	f10a 0a01 	add.w	sl, sl, #1
 8004cc0:	e7ee      	b.n	8004ca0 <_printf_float+0x2a8>
 8004cc2:	bf00      	nop
 8004cc4:	7fefffff 	.word	0x7fefffff
 8004cc8:	0800735c 	.word	0x0800735c
 8004ccc:	08007360 	.word	0x08007360
 8004cd0:	08007364 	.word	0x08007364
 8004cd4:	08007368 	.word	0x08007368
 8004cd8:	0800736c 	.word	0x0800736c
 8004cdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cde:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ce2:	4553      	cmp	r3, sl
 8004ce4:	bfa8      	it	ge
 8004ce6:	4653      	movge	r3, sl
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	4699      	mov	r9, r3
 8004cec:	dc36      	bgt.n	8004d5c <_printf_float+0x364>
 8004cee:	f04f 0b00 	mov.w	fp, #0
 8004cf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cf6:	f104 021a 	add.w	r2, r4, #26
 8004cfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cfe:	eba3 0309 	sub.w	r3, r3, r9
 8004d02:	455b      	cmp	r3, fp
 8004d04:	dc31      	bgt.n	8004d6a <_printf_float+0x372>
 8004d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d08:	459a      	cmp	sl, r3
 8004d0a:	dc3a      	bgt.n	8004d82 <_printf_float+0x38a>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	07da      	lsls	r2, r3, #31
 8004d10:	d437      	bmi.n	8004d82 <_printf_float+0x38a>
 8004d12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d14:	ebaa 0903 	sub.w	r9, sl, r3
 8004d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d1a:	ebaa 0303 	sub.w	r3, sl, r3
 8004d1e:	4599      	cmp	r9, r3
 8004d20:	bfa8      	it	ge
 8004d22:	4699      	movge	r9, r3
 8004d24:	f1b9 0f00 	cmp.w	r9, #0
 8004d28:	dc33      	bgt.n	8004d92 <_printf_float+0x39a>
 8004d2a:	f04f 0800 	mov.w	r8, #0
 8004d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d32:	f104 0b1a 	add.w	fp, r4, #26
 8004d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d38:	ebaa 0303 	sub.w	r3, sl, r3
 8004d3c:	eba3 0309 	sub.w	r3, r3, r9
 8004d40:	4543      	cmp	r3, r8
 8004d42:	f77f af79 	ble.w	8004c38 <_printf_float+0x240>
 8004d46:	2301      	movs	r3, #1
 8004d48:	465a      	mov	r2, fp
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	47b8      	blx	r7
 8004d50:	3001      	adds	r0, #1
 8004d52:	f43f aeac 	beq.w	8004aae <_printf_float+0xb6>
 8004d56:	f108 0801 	add.w	r8, r8, #1
 8004d5a:	e7ec      	b.n	8004d36 <_printf_float+0x33e>
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	4631      	mov	r1, r6
 8004d60:	4628      	mov	r0, r5
 8004d62:	47b8      	blx	r7
 8004d64:	3001      	adds	r0, #1
 8004d66:	d1c2      	bne.n	8004cee <_printf_float+0x2f6>
 8004d68:	e6a1      	b.n	8004aae <_printf_float+0xb6>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4628      	mov	r0, r5
 8004d70:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	f43f ae9a 	beq.w	8004aae <_printf_float+0xb6>
 8004d7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d7c:	f10b 0b01 	add.w	fp, fp, #1
 8004d80:	e7bb      	b.n	8004cfa <_printf_float+0x302>
 8004d82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d86:	4631      	mov	r1, r6
 8004d88:	4628      	mov	r0, r5
 8004d8a:	47b8      	blx	r7
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d1c0      	bne.n	8004d12 <_printf_float+0x31a>
 8004d90:	e68d      	b.n	8004aae <_printf_float+0xb6>
 8004d92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d94:	464b      	mov	r3, r9
 8004d96:	4442      	add	r2, r8
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d1c3      	bne.n	8004d2a <_printf_float+0x332>
 8004da2:	e684      	b.n	8004aae <_printf_float+0xb6>
 8004da4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004da8:	f1ba 0f01 	cmp.w	sl, #1
 8004dac:	dc01      	bgt.n	8004db2 <_printf_float+0x3ba>
 8004dae:	07db      	lsls	r3, r3, #31
 8004db0:	d536      	bpl.n	8004e20 <_printf_float+0x428>
 8004db2:	2301      	movs	r3, #1
 8004db4:	4642      	mov	r2, r8
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	f43f ae76 	beq.w	8004aae <_printf_float+0xb6>
 8004dc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f ae6e 	beq.w	8004aae <_printf_float+0xb6>
 8004dd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dde:	f7fb fe73 	bl	8000ac8 <__aeabi_dcmpeq>
 8004de2:	b9c0      	cbnz	r0, 8004e16 <_printf_float+0x41e>
 8004de4:	4653      	mov	r3, sl
 8004de6:	f108 0201 	add.w	r2, r8, #1
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	d10c      	bne.n	8004e0e <_printf_float+0x416>
 8004df4:	e65b      	b.n	8004aae <_printf_float+0xb6>
 8004df6:	2301      	movs	r3, #1
 8004df8:	465a      	mov	r2, fp
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	47b8      	blx	r7
 8004e00:	3001      	adds	r0, #1
 8004e02:	f43f ae54 	beq.w	8004aae <_printf_float+0xb6>
 8004e06:	f108 0801 	add.w	r8, r8, #1
 8004e0a:	45d0      	cmp	r8, sl
 8004e0c:	dbf3      	blt.n	8004df6 <_printf_float+0x3fe>
 8004e0e:	464b      	mov	r3, r9
 8004e10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e14:	e6df      	b.n	8004bd6 <_printf_float+0x1de>
 8004e16:	f04f 0800 	mov.w	r8, #0
 8004e1a:	f104 0b1a 	add.w	fp, r4, #26
 8004e1e:	e7f4      	b.n	8004e0a <_printf_float+0x412>
 8004e20:	2301      	movs	r3, #1
 8004e22:	4642      	mov	r2, r8
 8004e24:	e7e1      	b.n	8004dea <_printf_float+0x3f2>
 8004e26:	2301      	movs	r3, #1
 8004e28:	464a      	mov	r2, r9
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f ae3c 	beq.w	8004aae <_printf_float+0xb6>
 8004e36:	f108 0801 	add.w	r8, r8, #1
 8004e3a:	68e3      	ldr	r3, [r4, #12]
 8004e3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e3e:	1a5b      	subs	r3, r3, r1
 8004e40:	4543      	cmp	r3, r8
 8004e42:	dcf0      	bgt.n	8004e26 <_printf_float+0x42e>
 8004e44:	e6fc      	b.n	8004c40 <_printf_float+0x248>
 8004e46:	f04f 0800 	mov.w	r8, #0
 8004e4a:	f104 0919 	add.w	r9, r4, #25
 8004e4e:	e7f4      	b.n	8004e3a <_printf_float+0x442>

08004e50 <_printf_common>:
 8004e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e54:	4616      	mov	r6, r2
 8004e56:	4698      	mov	r8, r3
 8004e58:	688a      	ldr	r2, [r1, #8]
 8004e5a:	690b      	ldr	r3, [r1, #16]
 8004e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e60:	4293      	cmp	r3, r2
 8004e62:	bfb8      	it	lt
 8004e64:	4613      	movlt	r3, r2
 8004e66:	6033      	str	r3, [r6, #0]
 8004e68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e6c:	4607      	mov	r7, r0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	b10a      	cbz	r2, 8004e76 <_printf_common+0x26>
 8004e72:	3301      	adds	r3, #1
 8004e74:	6033      	str	r3, [r6, #0]
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	0699      	lsls	r1, r3, #26
 8004e7a:	bf42      	ittt	mi
 8004e7c:	6833      	ldrmi	r3, [r6, #0]
 8004e7e:	3302      	addmi	r3, #2
 8004e80:	6033      	strmi	r3, [r6, #0]
 8004e82:	6825      	ldr	r5, [r4, #0]
 8004e84:	f015 0506 	ands.w	r5, r5, #6
 8004e88:	d106      	bne.n	8004e98 <_printf_common+0x48>
 8004e8a:	f104 0a19 	add.w	sl, r4, #25
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	6832      	ldr	r2, [r6, #0]
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	42ab      	cmp	r3, r5
 8004e96:	dc26      	bgt.n	8004ee6 <_printf_common+0x96>
 8004e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e9c:	6822      	ldr	r2, [r4, #0]
 8004e9e:	3b00      	subs	r3, #0
 8004ea0:	bf18      	it	ne
 8004ea2:	2301      	movne	r3, #1
 8004ea4:	0692      	lsls	r2, r2, #26
 8004ea6:	d42b      	bmi.n	8004f00 <_printf_common+0xb0>
 8004ea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004eac:	4641      	mov	r1, r8
 8004eae:	4638      	mov	r0, r7
 8004eb0:	47c8      	blx	r9
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d01e      	beq.n	8004ef4 <_printf_common+0xa4>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	6922      	ldr	r2, [r4, #16]
 8004eba:	f003 0306 	and.w	r3, r3, #6
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	bf02      	ittt	eq
 8004ec2:	68e5      	ldreq	r5, [r4, #12]
 8004ec4:	6833      	ldreq	r3, [r6, #0]
 8004ec6:	1aed      	subeq	r5, r5, r3
 8004ec8:	68a3      	ldr	r3, [r4, #8]
 8004eca:	bf0c      	ite	eq
 8004ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed0:	2500      	movne	r5, #0
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	bfc4      	itt	gt
 8004ed6:	1a9b      	subgt	r3, r3, r2
 8004ed8:	18ed      	addgt	r5, r5, r3
 8004eda:	2600      	movs	r6, #0
 8004edc:	341a      	adds	r4, #26
 8004ede:	42b5      	cmp	r5, r6
 8004ee0:	d11a      	bne.n	8004f18 <_printf_common+0xc8>
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	e008      	b.n	8004ef8 <_printf_common+0xa8>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4652      	mov	r2, sl
 8004eea:	4641      	mov	r1, r8
 8004eec:	4638      	mov	r0, r7
 8004eee:	47c8      	blx	r9
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d103      	bne.n	8004efc <_printf_common+0xac>
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efc:	3501      	adds	r5, #1
 8004efe:	e7c6      	b.n	8004e8e <_printf_common+0x3e>
 8004f00:	18e1      	adds	r1, r4, r3
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	2030      	movs	r0, #48	@ 0x30
 8004f06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f0a:	4422      	add	r2, r4
 8004f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f14:	3302      	adds	r3, #2
 8004f16:	e7c7      	b.n	8004ea8 <_printf_common+0x58>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4622      	mov	r2, r4
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	4638      	mov	r0, r7
 8004f20:	47c8      	blx	r9
 8004f22:	3001      	adds	r0, #1
 8004f24:	d0e6      	beq.n	8004ef4 <_printf_common+0xa4>
 8004f26:	3601      	adds	r6, #1
 8004f28:	e7d9      	b.n	8004ede <_printf_common+0x8e>
	...

08004f2c <_printf_i>:
 8004f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	7e0f      	ldrb	r7, [r1, #24]
 8004f32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f34:	2f78      	cmp	r7, #120	@ 0x78
 8004f36:	4691      	mov	r9, r2
 8004f38:	4680      	mov	r8, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	469a      	mov	sl, r3
 8004f3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f42:	d807      	bhi.n	8004f54 <_printf_i+0x28>
 8004f44:	2f62      	cmp	r7, #98	@ 0x62
 8004f46:	d80a      	bhi.n	8004f5e <_printf_i+0x32>
 8004f48:	2f00      	cmp	r7, #0
 8004f4a:	f000 80d2 	beq.w	80050f2 <_printf_i+0x1c6>
 8004f4e:	2f58      	cmp	r7, #88	@ 0x58
 8004f50:	f000 80b9 	beq.w	80050c6 <_printf_i+0x19a>
 8004f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f5c:	e03a      	b.n	8004fd4 <_printf_i+0xa8>
 8004f5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f62:	2b15      	cmp	r3, #21
 8004f64:	d8f6      	bhi.n	8004f54 <_printf_i+0x28>
 8004f66:	a101      	add	r1, pc, #4	@ (adr r1, 8004f6c <_printf_i+0x40>)
 8004f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f6c:	08004fc5 	.word	0x08004fc5
 8004f70:	08004fd9 	.word	0x08004fd9
 8004f74:	08004f55 	.word	0x08004f55
 8004f78:	08004f55 	.word	0x08004f55
 8004f7c:	08004f55 	.word	0x08004f55
 8004f80:	08004f55 	.word	0x08004f55
 8004f84:	08004fd9 	.word	0x08004fd9
 8004f88:	08004f55 	.word	0x08004f55
 8004f8c:	08004f55 	.word	0x08004f55
 8004f90:	08004f55 	.word	0x08004f55
 8004f94:	08004f55 	.word	0x08004f55
 8004f98:	080050d9 	.word	0x080050d9
 8004f9c:	08005003 	.word	0x08005003
 8004fa0:	08005093 	.word	0x08005093
 8004fa4:	08004f55 	.word	0x08004f55
 8004fa8:	08004f55 	.word	0x08004f55
 8004fac:	080050fb 	.word	0x080050fb
 8004fb0:	08004f55 	.word	0x08004f55
 8004fb4:	08005003 	.word	0x08005003
 8004fb8:	08004f55 	.word	0x08004f55
 8004fbc:	08004f55 	.word	0x08004f55
 8004fc0:	0800509b 	.word	0x0800509b
 8004fc4:	6833      	ldr	r3, [r6, #0]
 8004fc6:	1d1a      	adds	r2, r3, #4
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6032      	str	r2, [r6, #0]
 8004fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e09d      	b.n	8005114 <_printf_i+0x1e8>
 8004fd8:	6833      	ldr	r3, [r6, #0]
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	1d19      	adds	r1, r3, #4
 8004fde:	6031      	str	r1, [r6, #0]
 8004fe0:	0606      	lsls	r6, r0, #24
 8004fe2:	d501      	bpl.n	8004fe8 <_printf_i+0xbc>
 8004fe4:	681d      	ldr	r5, [r3, #0]
 8004fe6:	e003      	b.n	8004ff0 <_printf_i+0xc4>
 8004fe8:	0645      	lsls	r5, r0, #25
 8004fea:	d5fb      	bpl.n	8004fe4 <_printf_i+0xb8>
 8004fec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ff0:	2d00      	cmp	r5, #0
 8004ff2:	da03      	bge.n	8004ffc <_printf_i+0xd0>
 8004ff4:	232d      	movs	r3, #45	@ 0x2d
 8004ff6:	426d      	negs	r5, r5
 8004ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ffc:	4859      	ldr	r0, [pc, #356]	@ (8005164 <_printf_i+0x238>)
 8004ffe:	230a      	movs	r3, #10
 8005000:	e011      	b.n	8005026 <_printf_i+0xfa>
 8005002:	6821      	ldr	r1, [r4, #0]
 8005004:	6833      	ldr	r3, [r6, #0]
 8005006:	0608      	lsls	r0, r1, #24
 8005008:	f853 5b04 	ldr.w	r5, [r3], #4
 800500c:	d402      	bmi.n	8005014 <_printf_i+0xe8>
 800500e:	0649      	lsls	r1, r1, #25
 8005010:	bf48      	it	mi
 8005012:	b2ad      	uxthmi	r5, r5
 8005014:	2f6f      	cmp	r7, #111	@ 0x6f
 8005016:	4853      	ldr	r0, [pc, #332]	@ (8005164 <_printf_i+0x238>)
 8005018:	6033      	str	r3, [r6, #0]
 800501a:	bf14      	ite	ne
 800501c:	230a      	movne	r3, #10
 800501e:	2308      	moveq	r3, #8
 8005020:	2100      	movs	r1, #0
 8005022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005026:	6866      	ldr	r6, [r4, #4]
 8005028:	60a6      	str	r6, [r4, #8]
 800502a:	2e00      	cmp	r6, #0
 800502c:	bfa2      	ittt	ge
 800502e:	6821      	ldrge	r1, [r4, #0]
 8005030:	f021 0104 	bicge.w	r1, r1, #4
 8005034:	6021      	strge	r1, [r4, #0]
 8005036:	b90d      	cbnz	r5, 800503c <_printf_i+0x110>
 8005038:	2e00      	cmp	r6, #0
 800503a:	d04b      	beq.n	80050d4 <_printf_i+0x1a8>
 800503c:	4616      	mov	r6, r2
 800503e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005042:	fb03 5711 	mls	r7, r3, r1, r5
 8005046:	5dc7      	ldrb	r7, [r0, r7]
 8005048:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800504c:	462f      	mov	r7, r5
 800504e:	42bb      	cmp	r3, r7
 8005050:	460d      	mov	r5, r1
 8005052:	d9f4      	bls.n	800503e <_printf_i+0x112>
 8005054:	2b08      	cmp	r3, #8
 8005056:	d10b      	bne.n	8005070 <_printf_i+0x144>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	07df      	lsls	r7, r3, #31
 800505c:	d508      	bpl.n	8005070 <_printf_i+0x144>
 800505e:	6923      	ldr	r3, [r4, #16]
 8005060:	6861      	ldr	r1, [r4, #4]
 8005062:	4299      	cmp	r1, r3
 8005064:	bfde      	ittt	le
 8005066:	2330      	movle	r3, #48	@ 0x30
 8005068:	f806 3c01 	strble.w	r3, [r6, #-1]
 800506c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005070:	1b92      	subs	r2, r2, r6
 8005072:	6122      	str	r2, [r4, #16]
 8005074:	f8cd a000 	str.w	sl, [sp]
 8005078:	464b      	mov	r3, r9
 800507a:	aa03      	add	r2, sp, #12
 800507c:	4621      	mov	r1, r4
 800507e:	4640      	mov	r0, r8
 8005080:	f7ff fee6 	bl	8004e50 <_printf_common>
 8005084:	3001      	adds	r0, #1
 8005086:	d14a      	bne.n	800511e <_printf_i+0x1f2>
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
 800508c:	b004      	add	sp, #16
 800508e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	f043 0320 	orr.w	r3, r3, #32
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	4833      	ldr	r0, [pc, #204]	@ (8005168 <_printf_i+0x23c>)
 800509c:	2778      	movs	r7, #120	@ 0x78
 800509e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	6831      	ldr	r1, [r6, #0]
 80050a6:	061f      	lsls	r7, r3, #24
 80050a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80050ac:	d402      	bmi.n	80050b4 <_printf_i+0x188>
 80050ae:	065f      	lsls	r7, r3, #25
 80050b0:	bf48      	it	mi
 80050b2:	b2ad      	uxthmi	r5, r5
 80050b4:	6031      	str	r1, [r6, #0]
 80050b6:	07d9      	lsls	r1, r3, #31
 80050b8:	bf44      	itt	mi
 80050ba:	f043 0320 	orrmi.w	r3, r3, #32
 80050be:	6023      	strmi	r3, [r4, #0]
 80050c0:	b11d      	cbz	r5, 80050ca <_printf_i+0x19e>
 80050c2:	2310      	movs	r3, #16
 80050c4:	e7ac      	b.n	8005020 <_printf_i+0xf4>
 80050c6:	4827      	ldr	r0, [pc, #156]	@ (8005164 <_printf_i+0x238>)
 80050c8:	e7e9      	b.n	800509e <_printf_i+0x172>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	f023 0320 	bic.w	r3, r3, #32
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	e7f6      	b.n	80050c2 <_printf_i+0x196>
 80050d4:	4616      	mov	r6, r2
 80050d6:	e7bd      	b.n	8005054 <_printf_i+0x128>
 80050d8:	6833      	ldr	r3, [r6, #0]
 80050da:	6825      	ldr	r5, [r4, #0]
 80050dc:	6961      	ldr	r1, [r4, #20]
 80050de:	1d18      	adds	r0, r3, #4
 80050e0:	6030      	str	r0, [r6, #0]
 80050e2:	062e      	lsls	r6, r5, #24
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	d501      	bpl.n	80050ec <_printf_i+0x1c0>
 80050e8:	6019      	str	r1, [r3, #0]
 80050ea:	e002      	b.n	80050f2 <_printf_i+0x1c6>
 80050ec:	0668      	lsls	r0, r5, #25
 80050ee:	d5fb      	bpl.n	80050e8 <_printf_i+0x1bc>
 80050f0:	8019      	strh	r1, [r3, #0]
 80050f2:	2300      	movs	r3, #0
 80050f4:	6123      	str	r3, [r4, #16]
 80050f6:	4616      	mov	r6, r2
 80050f8:	e7bc      	b.n	8005074 <_printf_i+0x148>
 80050fa:	6833      	ldr	r3, [r6, #0]
 80050fc:	1d1a      	adds	r2, r3, #4
 80050fe:	6032      	str	r2, [r6, #0]
 8005100:	681e      	ldr	r6, [r3, #0]
 8005102:	6862      	ldr	r2, [r4, #4]
 8005104:	2100      	movs	r1, #0
 8005106:	4630      	mov	r0, r6
 8005108:	f7fb f862 	bl	80001d0 <memchr>
 800510c:	b108      	cbz	r0, 8005112 <_printf_i+0x1e6>
 800510e:	1b80      	subs	r0, r0, r6
 8005110:	6060      	str	r0, [r4, #4]
 8005112:	6863      	ldr	r3, [r4, #4]
 8005114:	6123      	str	r3, [r4, #16]
 8005116:	2300      	movs	r3, #0
 8005118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800511c:	e7aa      	b.n	8005074 <_printf_i+0x148>
 800511e:	6923      	ldr	r3, [r4, #16]
 8005120:	4632      	mov	r2, r6
 8005122:	4649      	mov	r1, r9
 8005124:	4640      	mov	r0, r8
 8005126:	47d0      	blx	sl
 8005128:	3001      	adds	r0, #1
 800512a:	d0ad      	beq.n	8005088 <_printf_i+0x15c>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	079b      	lsls	r3, r3, #30
 8005130:	d413      	bmi.n	800515a <_printf_i+0x22e>
 8005132:	68e0      	ldr	r0, [r4, #12]
 8005134:	9b03      	ldr	r3, [sp, #12]
 8005136:	4298      	cmp	r0, r3
 8005138:	bfb8      	it	lt
 800513a:	4618      	movlt	r0, r3
 800513c:	e7a6      	b.n	800508c <_printf_i+0x160>
 800513e:	2301      	movs	r3, #1
 8005140:	4632      	mov	r2, r6
 8005142:	4649      	mov	r1, r9
 8005144:	4640      	mov	r0, r8
 8005146:	47d0      	blx	sl
 8005148:	3001      	adds	r0, #1
 800514a:	d09d      	beq.n	8005088 <_printf_i+0x15c>
 800514c:	3501      	adds	r5, #1
 800514e:	68e3      	ldr	r3, [r4, #12]
 8005150:	9903      	ldr	r1, [sp, #12]
 8005152:	1a5b      	subs	r3, r3, r1
 8005154:	42ab      	cmp	r3, r5
 8005156:	dcf2      	bgt.n	800513e <_printf_i+0x212>
 8005158:	e7eb      	b.n	8005132 <_printf_i+0x206>
 800515a:	2500      	movs	r5, #0
 800515c:	f104 0619 	add.w	r6, r4, #25
 8005160:	e7f5      	b.n	800514e <_printf_i+0x222>
 8005162:	bf00      	nop
 8005164:	0800736e 	.word	0x0800736e
 8005168:	0800737f 	.word	0x0800737f

0800516c <std>:
 800516c:	2300      	movs	r3, #0
 800516e:	b510      	push	{r4, lr}
 8005170:	4604      	mov	r4, r0
 8005172:	e9c0 3300 	strd	r3, r3, [r0]
 8005176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800517a:	6083      	str	r3, [r0, #8]
 800517c:	8181      	strh	r1, [r0, #12]
 800517e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005180:	81c2      	strh	r2, [r0, #14]
 8005182:	6183      	str	r3, [r0, #24]
 8005184:	4619      	mov	r1, r3
 8005186:	2208      	movs	r2, #8
 8005188:	305c      	adds	r0, #92	@ 0x5c
 800518a:	f000 f9f9 	bl	8005580 <memset>
 800518e:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <std+0x58>)
 8005190:	6263      	str	r3, [r4, #36]	@ 0x24
 8005192:	4b0d      	ldr	r3, [pc, #52]	@ (80051c8 <std+0x5c>)
 8005194:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005196:	4b0d      	ldr	r3, [pc, #52]	@ (80051cc <std+0x60>)
 8005198:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800519a:	4b0d      	ldr	r3, [pc, #52]	@ (80051d0 <std+0x64>)
 800519c:	6323      	str	r3, [r4, #48]	@ 0x30
 800519e:	4b0d      	ldr	r3, [pc, #52]	@ (80051d4 <std+0x68>)
 80051a0:	6224      	str	r4, [r4, #32]
 80051a2:	429c      	cmp	r4, r3
 80051a4:	d006      	beq.n	80051b4 <std+0x48>
 80051a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051aa:	4294      	cmp	r4, r2
 80051ac:	d002      	beq.n	80051b4 <std+0x48>
 80051ae:	33d0      	adds	r3, #208	@ 0xd0
 80051b0:	429c      	cmp	r4, r3
 80051b2:	d105      	bne.n	80051c0 <std+0x54>
 80051b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051bc:	f000 ba5c 	b.w	8005678 <__retarget_lock_init_recursive>
 80051c0:	bd10      	pop	{r4, pc}
 80051c2:	bf00      	nop
 80051c4:	080053d1 	.word	0x080053d1
 80051c8:	080053f3 	.word	0x080053f3
 80051cc:	0800542b 	.word	0x0800542b
 80051d0:	0800544f 	.word	0x0800544f
 80051d4:	2000024c 	.word	0x2000024c

080051d8 <stdio_exit_handler>:
 80051d8:	4a02      	ldr	r2, [pc, #8]	@ (80051e4 <stdio_exit_handler+0xc>)
 80051da:	4903      	ldr	r1, [pc, #12]	@ (80051e8 <stdio_exit_handler+0x10>)
 80051dc:	4803      	ldr	r0, [pc, #12]	@ (80051ec <stdio_exit_handler+0x14>)
 80051de:	f000 b869 	b.w	80052b4 <_fwalk_sglue>
 80051e2:	bf00      	nop
 80051e4:	2000000c 	.word	0x2000000c
 80051e8:	08006fc1 	.word	0x08006fc1
 80051ec:	2000001c 	.word	0x2000001c

080051f0 <cleanup_stdio>:
 80051f0:	6841      	ldr	r1, [r0, #4]
 80051f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <cleanup_stdio+0x34>)
 80051f4:	4299      	cmp	r1, r3
 80051f6:	b510      	push	{r4, lr}
 80051f8:	4604      	mov	r4, r0
 80051fa:	d001      	beq.n	8005200 <cleanup_stdio+0x10>
 80051fc:	f001 fee0 	bl	8006fc0 <_fflush_r>
 8005200:	68a1      	ldr	r1, [r4, #8]
 8005202:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <cleanup_stdio+0x38>)
 8005204:	4299      	cmp	r1, r3
 8005206:	d002      	beq.n	800520e <cleanup_stdio+0x1e>
 8005208:	4620      	mov	r0, r4
 800520a:	f001 fed9 	bl	8006fc0 <_fflush_r>
 800520e:	68e1      	ldr	r1, [r4, #12]
 8005210:	4b06      	ldr	r3, [pc, #24]	@ (800522c <cleanup_stdio+0x3c>)
 8005212:	4299      	cmp	r1, r3
 8005214:	d004      	beq.n	8005220 <cleanup_stdio+0x30>
 8005216:	4620      	mov	r0, r4
 8005218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800521c:	f001 bed0 	b.w	8006fc0 <_fflush_r>
 8005220:	bd10      	pop	{r4, pc}
 8005222:	bf00      	nop
 8005224:	2000024c 	.word	0x2000024c
 8005228:	200002b4 	.word	0x200002b4
 800522c:	2000031c 	.word	0x2000031c

08005230 <global_stdio_init.part.0>:
 8005230:	b510      	push	{r4, lr}
 8005232:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <global_stdio_init.part.0+0x30>)
 8005234:	4c0b      	ldr	r4, [pc, #44]	@ (8005264 <global_stdio_init.part.0+0x34>)
 8005236:	4a0c      	ldr	r2, [pc, #48]	@ (8005268 <global_stdio_init.part.0+0x38>)
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	4620      	mov	r0, r4
 800523c:	2200      	movs	r2, #0
 800523e:	2104      	movs	r1, #4
 8005240:	f7ff ff94 	bl	800516c <std>
 8005244:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005248:	2201      	movs	r2, #1
 800524a:	2109      	movs	r1, #9
 800524c:	f7ff ff8e 	bl	800516c <std>
 8005250:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005254:	2202      	movs	r2, #2
 8005256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525a:	2112      	movs	r1, #18
 800525c:	f7ff bf86 	b.w	800516c <std>
 8005260:	20000384 	.word	0x20000384
 8005264:	2000024c 	.word	0x2000024c
 8005268:	080051d9 	.word	0x080051d9

0800526c <__sfp_lock_acquire>:
 800526c:	4801      	ldr	r0, [pc, #4]	@ (8005274 <__sfp_lock_acquire+0x8>)
 800526e:	f000 ba04 	b.w	800567a <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	2000038d 	.word	0x2000038d

08005278 <__sfp_lock_release>:
 8005278:	4801      	ldr	r0, [pc, #4]	@ (8005280 <__sfp_lock_release+0x8>)
 800527a:	f000 b9ff 	b.w	800567c <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	2000038d 	.word	0x2000038d

08005284 <__sinit>:
 8005284:	b510      	push	{r4, lr}
 8005286:	4604      	mov	r4, r0
 8005288:	f7ff fff0 	bl	800526c <__sfp_lock_acquire>
 800528c:	6a23      	ldr	r3, [r4, #32]
 800528e:	b11b      	cbz	r3, 8005298 <__sinit+0x14>
 8005290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005294:	f7ff bff0 	b.w	8005278 <__sfp_lock_release>
 8005298:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <__sinit+0x28>)
 800529a:	6223      	str	r3, [r4, #32]
 800529c:	4b04      	ldr	r3, [pc, #16]	@ (80052b0 <__sinit+0x2c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f5      	bne.n	8005290 <__sinit+0xc>
 80052a4:	f7ff ffc4 	bl	8005230 <global_stdio_init.part.0>
 80052a8:	e7f2      	b.n	8005290 <__sinit+0xc>
 80052aa:	bf00      	nop
 80052ac:	080051f1 	.word	0x080051f1
 80052b0:	20000384 	.word	0x20000384

080052b4 <_fwalk_sglue>:
 80052b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b8:	4607      	mov	r7, r0
 80052ba:	4688      	mov	r8, r1
 80052bc:	4614      	mov	r4, r2
 80052be:	2600      	movs	r6, #0
 80052c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052c4:	f1b9 0901 	subs.w	r9, r9, #1
 80052c8:	d505      	bpl.n	80052d6 <_fwalk_sglue+0x22>
 80052ca:	6824      	ldr	r4, [r4, #0]
 80052cc:	2c00      	cmp	r4, #0
 80052ce:	d1f7      	bne.n	80052c0 <_fwalk_sglue+0xc>
 80052d0:	4630      	mov	r0, r6
 80052d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d6:	89ab      	ldrh	r3, [r5, #12]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d907      	bls.n	80052ec <_fwalk_sglue+0x38>
 80052dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052e0:	3301      	adds	r3, #1
 80052e2:	d003      	beq.n	80052ec <_fwalk_sglue+0x38>
 80052e4:	4629      	mov	r1, r5
 80052e6:	4638      	mov	r0, r7
 80052e8:	47c0      	blx	r8
 80052ea:	4306      	orrs	r6, r0
 80052ec:	3568      	adds	r5, #104	@ 0x68
 80052ee:	e7e9      	b.n	80052c4 <_fwalk_sglue+0x10>

080052f0 <iprintf>:
 80052f0:	b40f      	push	{r0, r1, r2, r3}
 80052f2:	b507      	push	{r0, r1, r2, lr}
 80052f4:	4906      	ldr	r1, [pc, #24]	@ (8005310 <iprintf+0x20>)
 80052f6:	ab04      	add	r3, sp, #16
 80052f8:	6808      	ldr	r0, [r1, #0]
 80052fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80052fe:	6881      	ldr	r1, [r0, #8]
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	f001 fcc5 	bl	8006c90 <_vfiprintf_r>
 8005306:	b003      	add	sp, #12
 8005308:	f85d eb04 	ldr.w	lr, [sp], #4
 800530c:	b004      	add	sp, #16
 800530e:	4770      	bx	lr
 8005310:	20000018 	.word	0x20000018

08005314 <_puts_r>:
 8005314:	6a03      	ldr	r3, [r0, #32]
 8005316:	b570      	push	{r4, r5, r6, lr}
 8005318:	6884      	ldr	r4, [r0, #8]
 800531a:	4605      	mov	r5, r0
 800531c:	460e      	mov	r6, r1
 800531e:	b90b      	cbnz	r3, 8005324 <_puts_r+0x10>
 8005320:	f7ff ffb0 	bl	8005284 <__sinit>
 8005324:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005326:	07db      	lsls	r3, r3, #31
 8005328:	d405      	bmi.n	8005336 <_puts_r+0x22>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	0598      	lsls	r0, r3, #22
 800532e:	d402      	bmi.n	8005336 <_puts_r+0x22>
 8005330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005332:	f000 f9a2 	bl	800567a <__retarget_lock_acquire_recursive>
 8005336:	89a3      	ldrh	r3, [r4, #12]
 8005338:	0719      	lsls	r1, r3, #28
 800533a:	d502      	bpl.n	8005342 <_puts_r+0x2e>
 800533c:	6923      	ldr	r3, [r4, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d135      	bne.n	80053ae <_puts_r+0x9a>
 8005342:	4621      	mov	r1, r4
 8005344:	4628      	mov	r0, r5
 8005346:	f000 f8c5 	bl	80054d4 <__swsetup_r>
 800534a:	b380      	cbz	r0, 80053ae <_puts_r+0x9a>
 800534c:	f04f 35ff 	mov.w	r5, #4294967295
 8005350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005352:	07da      	lsls	r2, r3, #31
 8005354:	d405      	bmi.n	8005362 <_puts_r+0x4e>
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	059b      	lsls	r3, r3, #22
 800535a:	d402      	bmi.n	8005362 <_puts_r+0x4e>
 800535c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800535e:	f000 f98d 	bl	800567c <__retarget_lock_release_recursive>
 8005362:	4628      	mov	r0, r5
 8005364:	bd70      	pop	{r4, r5, r6, pc}
 8005366:	2b00      	cmp	r3, #0
 8005368:	da04      	bge.n	8005374 <_puts_r+0x60>
 800536a:	69a2      	ldr	r2, [r4, #24]
 800536c:	429a      	cmp	r2, r3
 800536e:	dc17      	bgt.n	80053a0 <_puts_r+0x8c>
 8005370:	290a      	cmp	r1, #10
 8005372:	d015      	beq.n	80053a0 <_puts_r+0x8c>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	6022      	str	r2, [r4, #0]
 800537a:	7019      	strb	r1, [r3, #0]
 800537c:	68a3      	ldr	r3, [r4, #8]
 800537e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005382:	3b01      	subs	r3, #1
 8005384:	60a3      	str	r3, [r4, #8]
 8005386:	2900      	cmp	r1, #0
 8005388:	d1ed      	bne.n	8005366 <_puts_r+0x52>
 800538a:	2b00      	cmp	r3, #0
 800538c:	da11      	bge.n	80053b2 <_puts_r+0x9e>
 800538e:	4622      	mov	r2, r4
 8005390:	210a      	movs	r1, #10
 8005392:	4628      	mov	r0, r5
 8005394:	f000 f85f 	bl	8005456 <__swbuf_r>
 8005398:	3001      	adds	r0, #1
 800539a:	d0d7      	beq.n	800534c <_puts_r+0x38>
 800539c:	250a      	movs	r5, #10
 800539e:	e7d7      	b.n	8005350 <_puts_r+0x3c>
 80053a0:	4622      	mov	r2, r4
 80053a2:	4628      	mov	r0, r5
 80053a4:	f000 f857 	bl	8005456 <__swbuf_r>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d1e7      	bne.n	800537c <_puts_r+0x68>
 80053ac:	e7ce      	b.n	800534c <_puts_r+0x38>
 80053ae:	3e01      	subs	r6, #1
 80053b0:	e7e4      	b.n	800537c <_puts_r+0x68>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	6022      	str	r2, [r4, #0]
 80053b8:	220a      	movs	r2, #10
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e7ee      	b.n	800539c <_puts_r+0x88>
	...

080053c0 <puts>:
 80053c0:	4b02      	ldr	r3, [pc, #8]	@ (80053cc <puts+0xc>)
 80053c2:	4601      	mov	r1, r0
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	f7ff bfa5 	b.w	8005314 <_puts_r>
 80053ca:	bf00      	nop
 80053cc:	20000018 	.word	0x20000018

080053d0 <__sread>:
 80053d0:	b510      	push	{r4, lr}
 80053d2:	460c      	mov	r4, r1
 80053d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d8:	f000 f900 	bl	80055dc <_read_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	bfab      	itete	ge
 80053e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053e2:	89a3      	ldrhlt	r3, [r4, #12]
 80053e4:	181b      	addge	r3, r3, r0
 80053e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053ea:	bfac      	ite	ge
 80053ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053ee:	81a3      	strhlt	r3, [r4, #12]
 80053f0:	bd10      	pop	{r4, pc}

080053f2 <__swrite>:
 80053f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f6:	461f      	mov	r7, r3
 80053f8:	898b      	ldrh	r3, [r1, #12]
 80053fa:	05db      	lsls	r3, r3, #23
 80053fc:	4605      	mov	r5, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	4616      	mov	r6, r2
 8005402:	d505      	bpl.n	8005410 <__swrite+0x1e>
 8005404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005408:	2302      	movs	r3, #2
 800540a:	2200      	movs	r2, #0
 800540c:	f000 f8d4 	bl	80055b8 <_lseek_r>
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	4628      	mov	r0, r5
 8005422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005426:	f000 b8eb 	b.w	8005600 <_write_r>

0800542a <__sseek>:
 800542a:	b510      	push	{r4, lr}
 800542c:	460c      	mov	r4, r1
 800542e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005432:	f000 f8c1 	bl	80055b8 <_lseek_r>
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	bf15      	itete	ne
 800543c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800543e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005442:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005446:	81a3      	strheq	r3, [r4, #12]
 8005448:	bf18      	it	ne
 800544a:	81a3      	strhne	r3, [r4, #12]
 800544c:	bd10      	pop	{r4, pc}

0800544e <__sclose>:
 800544e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005452:	f000 b8a1 	b.w	8005598 <_close_r>

08005456 <__swbuf_r>:
 8005456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005458:	460e      	mov	r6, r1
 800545a:	4614      	mov	r4, r2
 800545c:	4605      	mov	r5, r0
 800545e:	b118      	cbz	r0, 8005468 <__swbuf_r+0x12>
 8005460:	6a03      	ldr	r3, [r0, #32]
 8005462:	b90b      	cbnz	r3, 8005468 <__swbuf_r+0x12>
 8005464:	f7ff ff0e 	bl	8005284 <__sinit>
 8005468:	69a3      	ldr	r3, [r4, #24]
 800546a:	60a3      	str	r3, [r4, #8]
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	071a      	lsls	r2, r3, #28
 8005470:	d501      	bpl.n	8005476 <__swbuf_r+0x20>
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	b943      	cbnz	r3, 8005488 <__swbuf_r+0x32>
 8005476:	4621      	mov	r1, r4
 8005478:	4628      	mov	r0, r5
 800547a:	f000 f82b 	bl	80054d4 <__swsetup_r>
 800547e:	b118      	cbz	r0, 8005488 <__swbuf_r+0x32>
 8005480:	f04f 37ff 	mov.w	r7, #4294967295
 8005484:	4638      	mov	r0, r7
 8005486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	6922      	ldr	r2, [r4, #16]
 800548c:	1a98      	subs	r0, r3, r2
 800548e:	6963      	ldr	r3, [r4, #20]
 8005490:	b2f6      	uxtb	r6, r6
 8005492:	4283      	cmp	r3, r0
 8005494:	4637      	mov	r7, r6
 8005496:	dc05      	bgt.n	80054a4 <__swbuf_r+0x4e>
 8005498:	4621      	mov	r1, r4
 800549a:	4628      	mov	r0, r5
 800549c:	f001 fd90 	bl	8006fc0 <_fflush_r>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d1ed      	bne.n	8005480 <__swbuf_r+0x2a>
 80054a4:	68a3      	ldr	r3, [r4, #8]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	60a3      	str	r3, [r4, #8]
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	6022      	str	r2, [r4, #0]
 80054b0:	701e      	strb	r6, [r3, #0]
 80054b2:	6962      	ldr	r2, [r4, #20]
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d004      	beq.n	80054c4 <__swbuf_r+0x6e>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	07db      	lsls	r3, r3, #31
 80054be:	d5e1      	bpl.n	8005484 <__swbuf_r+0x2e>
 80054c0:	2e0a      	cmp	r6, #10
 80054c2:	d1df      	bne.n	8005484 <__swbuf_r+0x2e>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4628      	mov	r0, r5
 80054c8:	f001 fd7a 	bl	8006fc0 <_fflush_r>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d0d9      	beq.n	8005484 <__swbuf_r+0x2e>
 80054d0:	e7d6      	b.n	8005480 <__swbuf_r+0x2a>
	...

080054d4 <__swsetup_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4b29      	ldr	r3, [pc, #164]	@ (800557c <__swsetup_r+0xa8>)
 80054d8:	4605      	mov	r5, r0
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	460c      	mov	r4, r1
 80054de:	b118      	cbz	r0, 80054e8 <__swsetup_r+0x14>
 80054e0:	6a03      	ldr	r3, [r0, #32]
 80054e2:	b90b      	cbnz	r3, 80054e8 <__swsetup_r+0x14>
 80054e4:	f7ff fece 	bl	8005284 <__sinit>
 80054e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ec:	0719      	lsls	r1, r3, #28
 80054ee:	d422      	bmi.n	8005536 <__swsetup_r+0x62>
 80054f0:	06da      	lsls	r2, r3, #27
 80054f2:	d407      	bmi.n	8005504 <__swsetup_r+0x30>
 80054f4:	2209      	movs	r2, #9
 80054f6:	602a      	str	r2, [r5, #0]
 80054f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054fc:	81a3      	strh	r3, [r4, #12]
 80054fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005502:	e033      	b.n	800556c <__swsetup_r+0x98>
 8005504:	0758      	lsls	r0, r3, #29
 8005506:	d512      	bpl.n	800552e <__swsetup_r+0x5a>
 8005508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800550a:	b141      	cbz	r1, 800551e <__swsetup_r+0x4a>
 800550c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005510:	4299      	cmp	r1, r3
 8005512:	d002      	beq.n	800551a <__swsetup_r+0x46>
 8005514:	4628      	mov	r0, r5
 8005516:	f000 ff13 	bl	8006340 <_free_r>
 800551a:	2300      	movs	r3, #0
 800551c:	6363      	str	r3, [r4, #52]	@ 0x34
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005524:	81a3      	strh	r3, [r4, #12]
 8005526:	2300      	movs	r3, #0
 8005528:	6063      	str	r3, [r4, #4]
 800552a:	6923      	ldr	r3, [r4, #16]
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	f043 0308 	orr.w	r3, r3, #8
 8005534:	81a3      	strh	r3, [r4, #12]
 8005536:	6923      	ldr	r3, [r4, #16]
 8005538:	b94b      	cbnz	r3, 800554e <__swsetup_r+0x7a>
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005544:	d003      	beq.n	800554e <__swsetup_r+0x7a>
 8005546:	4621      	mov	r1, r4
 8005548:	4628      	mov	r0, r5
 800554a:	f001 fd87 	bl	800705c <__smakebuf_r>
 800554e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005552:	f013 0201 	ands.w	r2, r3, #1
 8005556:	d00a      	beq.n	800556e <__swsetup_r+0x9a>
 8005558:	2200      	movs	r2, #0
 800555a:	60a2      	str	r2, [r4, #8]
 800555c:	6962      	ldr	r2, [r4, #20]
 800555e:	4252      	negs	r2, r2
 8005560:	61a2      	str	r2, [r4, #24]
 8005562:	6922      	ldr	r2, [r4, #16]
 8005564:	b942      	cbnz	r2, 8005578 <__swsetup_r+0xa4>
 8005566:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800556a:	d1c5      	bne.n	80054f8 <__swsetup_r+0x24>
 800556c:	bd38      	pop	{r3, r4, r5, pc}
 800556e:	0799      	lsls	r1, r3, #30
 8005570:	bf58      	it	pl
 8005572:	6962      	ldrpl	r2, [r4, #20]
 8005574:	60a2      	str	r2, [r4, #8]
 8005576:	e7f4      	b.n	8005562 <__swsetup_r+0x8e>
 8005578:	2000      	movs	r0, #0
 800557a:	e7f7      	b.n	800556c <__swsetup_r+0x98>
 800557c:	20000018 	.word	0x20000018

08005580 <memset>:
 8005580:	4402      	add	r2, r0
 8005582:	4603      	mov	r3, r0
 8005584:	4293      	cmp	r3, r2
 8005586:	d100      	bne.n	800558a <memset+0xa>
 8005588:	4770      	bx	lr
 800558a:	f803 1b01 	strb.w	r1, [r3], #1
 800558e:	e7f9      	b.n	8005584 <memset+0x4>

08005590 <_localeconv_r>:
 8005590:	4800      	ldr	r0, [pc, #0]	@ (8005594 <_localeconv_r+0x4>)
 8005592:	4770      	bx	lr
 8005594:	20000158 	.word	0x20000158

08005598 <_close_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d06      	ldr	r5, [pc, #24]	@ (80055b4 <_close_r+0x1c>)
 800559c:	2300      	movs	r3, #0
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	f7fd f961 	bl	800286a <_close>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_close_r+0x1a>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_close_r+0x1a>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	20000388 	.word	0x20000388

080055b8 <_lseek_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4d07      	ldr	r5, [pc, #28]	@ (80055d8 <_lseek_r+0x20>)
 80055bc:	4604      	mov	r4, r0
 80055be:	4608      	mov	r0, r1
 80055c0:	4611      	mov	r1, r2
 80055c2:	2200      	movs	r2, #0
 80055c4:	602a      	str	r2, [r5, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f7fd f973 	bl	80028b2 <_lseek>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_lseek_r+0x1e>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_lseek_r+0x1e>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	20000388 	.word	0x20000388

080055dc <_read_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d07      	ldr	r5, [pc, #28]	@ (80055fc <_read_r+0x20>)
 80055e0:	4604      	mov	r4, r0
 80055e2:	4608      	mov	r0, r1
 80055e4:	4611      	mov	r1, r2
 80055e6:	2200      	movs	r2, #0
 80055e8:	602a      	str	r2, [r5, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f7fd f920 	bl	8002830 <_read>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_read_r+0x1e>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_read_r+0x1e>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	20000388 	.word	0x20000388

08005600 <_write_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4d07      	ldr	r5, [pc, #28]	@ (8005620 <_write_r+0x20>)
 8005604:	4604      	mov	r4, r0
 8005606:	4608      	mov	r0, r1
 8005608:	4611      	mov	r1, r2
 800560a:	2200      	movs	r2, #0
 800560c:	602a      	str	r2, [r5, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	f7fd f834 	bl	800267c <_write>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_write_r+0x1e>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_write_r+0x1e>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	20000388 	.word	0x20000388

08005624 <__errno>:
 8005624:	4b01      	ldr	r3, [pc, #4]	@ (800562c <__errno+0x8>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20000018 	.word	0x20000018

08005630 <__libc_init_array>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	4d0d      	ldr	r5, [pc, #52]	@ (8005668 <__libc_init_array+0x38>)
 8005634:	4c0d      	ldr	r4, [pc, #52]	@ (800566c <__libc_init_array+0x3c>)
 8005636:	1b64      	subs	r4, r4, r5
 8005638:	10a4      	asrs	r4, r4, #2
 800563a:	2600      	movs	r6, #0
 800563c:	42a6      	cmp	r6, r4
 800563e:	d109      	bne.n	8005654 <__libc_init_array+0x24>
 8005640:	4d0b      	ldr	r5, [pc, #44]	@ (8005670 <__libc_init_array+0x40>)
 8005642:	4c0c      	ldr	r4, [pc, #48]	@ (8005674 <__libc_init_array+0x44>)
 8005644:	f001 fe28 	bl	8007298 <_init>
 8005648:	1b64      	subs	r4, r4, r5
 800564a:	10a4      	asrs	r4, r4, #2
 800564c:	2600      	movs	r6, #0
 800564e:	42a6      	cmp	r6, r4
 8005650:	d105      	bne.n	800565e <__libc_init_array+0x2e>
 8005652:	bd70      	pop	{r4, r5, r6, pc}
 8005654:	f855 3b04 	ldr.w	r3, [r5], #4
 8005658:	4798      	blx	r3
 800565a:	3601      	adds	r6, #1
 800565c:	e7ee      	b.n	800563c <__libc_init_array+0xc>
 800565e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005662:	4798      	blx	r3
 8005664:	3601      	adds	r6, #1
 8005666:	e7f2      	b.n	800564e <__libc_init_array+0x1e>
 8005668:	080076d8 	.word	0x080076d8
 800566c:	080076d8 	.word	0x080076d8
 8005670:	080076d8 	.word	0x080076d8
 8005674:	080076dc 	.word	0x080076dc

08005678 <__retarget_lock_init_recursive>:
 8005678:	4770      	bx	lr

0800567a <__retarget_lock_acquire_recursive>:
 800567a:	4770      	bx	lr

0800567c <__retarget_lock_release_recursive>:
 800567c:	4770      	bx	lr

0800567e <memcpy>:
 800567e:	440a      	add	r2, r1
 8005680:	4291      	cmp	r1, r2
 8005682:	f100 33ff 	add.w	r3, r0, #4294967295
 8005686:	d100      	bne.n	800568a <memcpy+0xc>
 8005688:	4770      	bx	lr
 800568a:	b510      	push	{r4, lr}
 800568c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005690:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005694:	4291      	cmp	r1, r2
 8005696:	d1f9      	bne.n	800568c <memcpy+0xe>
 8005698:	bd10      	pop	{r4, pc}

0800569a <quorem>:
 800569a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569e:	6903      	ldr	r3, [r0, #16]
 80056a0:	690c      	ldr	r4, [r1, #16]
 80056a2:	42a3      	cmp	r3, r4
 80056a4:	4607      	mov	r7, r0
 80056a6:	db7e      	blt.n	80057a6 <quorem+0x10c>
 80056a8:	3c01      	subs	r4, #1
 80056aa:	f101 0814 	add.w	r8, r1, #20
 80056ae:	00a3      	lsls	r3, r4, #2
 80056b0:	f100 0514 	add.w	r5, r0, #20
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056c4:	3301      	adds	r3, #1
 80056c6:	429a      	cmp	r2, r3
 80056c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80056d0:	d32e      	bcc.n	8005730 <quorem+0x96>
 80056d2:	f04f 0a00 	mov.w	sl, #0
 80056d6:	46c4      	mov	ip, r8
 80056d8:	46ae      	mov	lr, r5
 80056da:	46d3      	mov	fp, sl
 80056dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056e0:	b298      	uxth	r0, r3
 80056e2:	fb06 a000 	mla	r0, r6, r0, sl
 80056e6:	0c02      	lsrs	r2, r0, #16
 80056e8:	0c1b      	lsrs	r3, r3, #16
 80056ea:	fb06 2303 	mla	r3, r6, r3, r2
 80056ee:	f8de 2000 	ldr.w	r2, [lr]
 80056f2:	b280      	uxth	r0, r0
 80056f4:	b292      	uxth	r2, r2
 80056f6:	1a12      	subs	r2, r2, r0
 80056f8:	445a      	add	r2, fp
 80056fa:	f8de 0000 	ldr.w	r0, [lr]
 80056fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005702:	b29b      	uxth	r3, r3
 8005704:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005708:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800570c:	b292      	uxth	r2, r2
 800570e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005712:	45e1      	cmp	r9, ip
 8005714:	f84e 2b04 	str.w	r2, [lr], #4
 8005718:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800571c:	d2de      	bcs.n	80056dc <quorem+0x42>
 800571e:	9b00      	ldr	r3, [sp, #0]
 8005720:	58eb      	ldr	r3, [r5, r3]
 8005722:	b92b      	cbnz	r3, 8005730 <quorem+0x96>
 8005724:	9b01      	ldr	r3, [sp, #4]
 8005726:	3b04      	subs	r3, #4
 8005728:	429d      	cmp	r5, r3
 800572a:	461a      	mov	r2, r3
 800572c:	d32f      	bcc.n	800578e <quorem+0xf4>
 800572e:	613c      	str	r4, [r7, #16]
 8005730:	4638      	mov	r0, r7
 8005732:	f001 f97f 	bl	8006a34 <__mcmp>
 8005736:	2800      	cmp	r0, #0
 8005738:	db25      	blt.n	8005786 <quorem+0xec>
 800573a:	4629      	mov	r1, r5
 800573c:	2000      	movs	r0, #0
 800573e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005742:	f8d1 c000 	ldr.w	ip, [r1]
 8005746:	fa1f fe82 	uxth.w	lr, r2
 800574a:	fa1f f38c 	uxth.w	r3, ip
 800574e:	eba3 030e 	sub.w	r3, r3, lr
 8005752:	4403      	add	r3, r0
 8005754:	0c12      	lsrs	r2, r2, #16
 8005756:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800575a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800575e:	b29b      	uxth	r3, r3
 8005760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005764:	45c1      	cmp	r9, r8
 8005766:	f841 3b04 	str.w	r3, [r1], #4
 800576a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800576e:	d2e6      	bcs.n	800573e <quorem+0xa4>
 8005770:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005774:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005778:	b922      	cbnz	r2, 8005784 <quorem+0xea>
 800577a:	3b04      	subs	r3, #4
 800577c:	429d      	cmp	r5, r3
 800577e:	461a      	mov	r2, r3
 8005780:	d30b      	bcc.n	800579a <quorem+0x100>
 8005782:	613c      	str	r4, [r7, #16]
 8005784:	3601      	adds	r6, #1
 8005786:	4630      	mov	r0, r6
 8005788:	b003      	add	sp, #12
 800578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	3b04      	subs	r3, #4
 8005792:	2a00      	cmp	r2, #0
 8005794:	d1cb      	bne.n	800572e <quorem+0x94>
 8005796:	3c01      	subs	r4, #1
 8005798:	e7c6      	b.n	8005728 <quorem+0x8e>
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	3b04      	subs	r3, #4
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d1ef      	bne.n	8005782 <quorem+0xe8>
 80057a2:	3c01      	subs	r4, #1
 80057a4:	e7ea      	b.n	800577c <quorem+0xe2>
 80057a6:	2000      	movs	r0, #0
 80057a8:	e7ee      	b.n	8005788 <quorem+0xee>
 80057aa:	0000      	movs	r0, r0
 80057ac:	0000      	movs	r0, r0
	...

080057b0 <_dtoa_r>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	69c7      	ldr	r7, [r0, #28]
 80057b6:	b097      	sub	sp, #92	@ 0x5c
 80057b8:	4614      	mov	r4, r2
 80057ba:	461d      	mov	r5, r3
 80057bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80057c0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80057c2:	4683      	mov	fp, r0
 80057c4:	b97f      	cbnz	r7, 80057e6 <_dtoa_r+0x36>
 80057c6:	2010      	movs	r0, #16
 80057c8:	f000 fe04 	bl	80063d4 <malloc>
 80057cc:	4602      	mov	r2, r0
 80057ce:	f8cb 001c 	str.w	r0, [fp, #28]
 80057d2:	b920      	cbnz	r0, 80057de <_dtoa_r+0x2e>
 80057d4:	4ba8      	ldr	r3, [pc, #672]	@ (8005a78 <_dtoa_r+0x2c8>)
 80057d6:	21ef      	movs	r1, #239	@ 0xef
 80057d8:	48a8      	ldr	r0, [pc, #672]	@ (8005a7c <_dtoa_r+0x2cc>)
 80057da:	f001 fcad 	bl	8007138 <__assert_func>
 80057de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80057e2:	6007      	str	r7, [r0, #0]
 80057e4:	60c7      	str	r7, [r0, #12]
 80057e6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057ea:	6819      	ldr	r1, [r3, #0]
 80057ec:	b159      	cbz	r1, 8005806 <_dtoa_r+0x56>
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	604a      	str	r2, [r1, #4]
 80057f2:	2301      	movs	r3, #1
 80057f4:	4093      	lsls	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]
 80057f8:	4658      	mov	r0, fp
 80057fa:	f000 fee1 	bl	80065c0 <_Bfree>
 80057fe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	1e2b      	subs	r3, r5, #0
 8005808:	bfb9      	ittee	lt
 800580a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800580e:	9303      	strlt	r3, [sp, #12]
 8005810:	2300      	movge	r3, #0
 8005812:	6033      	strge	r3, [r6, #0]
 8005814:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005818:	4b99      	ldr	r3, [pc, #612]	@ (8005a80 <_dtoa_r+0x2d0>)
 800581a:	bfbc      	itt	lt
 800581c:	2201      	movlt	r2, #1
 800581e:	6032      	strlt	r2, [r6, #0]
 8005820:	ea33 0308 	bics.w	r3, r3, r8
 8005824:	d112      	bne.n	800584c <_dtoa_r+0x9c>
 8005826:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005828:	f242 730f 	movw	r3, #9999	@ 0x270f
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005832:	4323      	orrs	r3, r4
 8005834:	f000 8551 	beq.w	80062da <_dtoa_r+0xb2a>
 8005838:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800583a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 8005a84 <_dtoa_r+0x2d4>
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8553 	beq.w	80062ea <_dtoa_r+0xb3a>
 8005844:	f10a 0303 	add.w	r3, sl, #3
 8005848:	f000 bd4d 	b.w	80062e6 <_dtoa_r+0xb36>
 800584c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005850:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005858:	2200      	movs	r2, #0
 800585a:	2300      	movs	r3, #0
 800585c:	f7fb f934 	bl	8000ac8 <__aeabi_dcmpeq>
 8005860:	4607      	mov	r7, r0
 8005862:	b158      	cbz	r0, 800587c <_dtoa_r+0xcc>
 8005864:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005866:	2301      	movs	r3, #1
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800586c:	b113      	cbz	r3, 8005874 <_dtoa_r+0xc4>
 800586e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005870:	4b85      	ldr	r3, [pc, #532]	@ (8005a88 <_dtoa_r+0x2d8>)
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005a8c <_dtoa_r+0x2dc>
 8005878:	f000 bd37 	b.w	80062ea <_dtoa_r+0xb3a>
 800587c:	ab14      	add	r3, sp, #80	@ 0x50
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	ab15      	add	r3, sp, #84	@ 0x54
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	4658      	mov	r0, fp
 8005886:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800588a:	f001 f981 	bl	8006b90 <__d2b>
 800588e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005892:	4681      	mov	r9, r0
 8005894:	2e00      	cmp	r6, #0
 8005896:	d076      	beq.n	8005986 <_dtoa_r+0x1d6>
 8005898:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800589a:	9712      	str	r7, [sp, #72]	@ 0x48
 800589c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80058a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80058ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80058b0:	4619      	mov	r1, r3
 80058b2:	2200      	movs	r2, #0
 80058b4:	4b76      	ldr	r3, [pc, #472]	@ (8005a90 <_dtoa_r+0x2e0>)
 80058b6:	f7fa fce7 	bl	8000288 <__aeabi_dsub>
 80058ba:	a369      	add	r3, pc, #420	@ (adr r3, 8005a60 <_dtoa_r+0x2b0>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f7fa fe9a 	bl	80005f8 <__aeabi_dmul>
 80058c4:	a368      	add	r3, pc, #416	@ (adr r3, 8005a68 <_dtoa_r+0x2b8>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f7fa fcdf 	bl	800028c <__adddf3>
 80058ce:	4604      	mov	r4, r0
 80058d0:	4630      	mov	r0, r6
 80058d2:	460d      	mov	r5, r1
 80058d4:	f7fa fe26 	bl	8000524 <__aeabi_i2d>
 80058d8:	a365      	add	r3, pc, #404	@ (adr r3, 8005a70 <_dtoa_r+0x2c0>)
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	f7fa fe8b 	bl	80005f8 <__aeabi_dmul>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	f7fa fccf 	bl	800028c <__adddf3>
 80058ee:	4604      	mov	r4, r0
 80058f0:	460d      	mov	r5, r1
 80058f2:	f7fb f931 	bl	8000b58 <__aeabi_d2iz>
 80058f6:	2200      	movs	r2, #0
 80058f8:	4607      	mov	r7, r0
 80058fa:	2300      	movs	r3, #0
 80058fc:	4620      	mov	r0, r4
 80058fe:	4629      	mov	r1, r5
 8005900:	f7fb f8ec 	bl	8000adc <__aeabi_dcmplt>
 8005904:	b140      	cbz	r0, 8005918 <_dtoa_r+0x168>
 8005906:	4638      	mov	r0, r7
 8005908:	f7fa fe0c 	bl	8000524 <__aeabi_i2d>
 800590c:	4622      	mov	r2, r4
 800590e:	462b      	mov	r3, r5
 8005910:	f7fb f8da 	bl	8000ac8 <__aeabi_dcmpeq>
 8005914:	b900      	cbnz	r0, 8005918 <_dtoa_r+0x168>
 8005916:	3f01      	subs	r7, #1
 8005918:	2f16      	cmp	r7, #22
 800591a:	d852      	bhi.n	80059c2 <_dtoa_r+0x212>
 800591c:	4b5d      	ldr	r3, [pc, #372]	@ (8005a94 <_dtoa_r+0x2e4>)
 800591e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800592a:	f7fb f8d7 	bl	8000adc <__aeabi_dcmplt>
 800592e:	2800      	cmp	r0, #0
 8005930:	d049      	beq.n	80059c6 <_dtoa_r+0x216>
 8005932:	3f01      	subs	r7, #1
 8005934:	2300      	movs	r3, #0
 8005936:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005938:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800593a:	1b9b      	subs	r3, r3, r6
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	bf44      	itt	mi
 8005940:	f1c3 0801 	rsbmi	r8, r3, #1
 8005944:	2300      	movmi	r3, #0
 8005946:	9209      	str	r2, [sp, #36]	@ 0x24
 8005948:	bf54      	ite	pl
 800594a:	f04f 0800 	movpl.w	r8, #0
 800594e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005950:	2f00      	cmp	r7, #0
 8005952:	db3a      	blt.n	80059ca <_dtoa_r+0x21a>
 8005954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005956:	970e      	str	r7, [sp, #56]	@ 0x38
 8005958:	443b      	add	r3, r7
 800595a:	9309      	str	r3, [sp, #36]	@ 0x24
 800595c:	2300      	movs	r3, #0
 800595e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005960:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005962:	2b09      	cmp	r3, #9
 8005964:	d865      	bhi.n	8005a32 <_dtoa_r+0x282>
 8005966:	2b05      	cmp	r3, #5
 8005968:	bfc4      	itt	gt
 800596a:	3b04      	subgt	r3, #4
 800596c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800596e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005970:	f1a3 0302 	sub.w	r3, r3, #2
 8005974:	bfcc      	ite	gt
 8005976:	2400      	movgt	r4, #0
 8005978:	2401      	movle	r4, #1
 800597a:	2b03      	cmp	r3, #3
 800597c:	d864      	bhi.n	8005a48 <_dtoa_r+0x298>
 800597e:	e8df f003 	tbb	[pc, r3]
 8005982:	382b      	.short	0x382b
 8005984:	5636      	.short	0x5636
 8005986:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800598a:	441e      	add	r6, r3
 800598c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005990:	2b20      	cmp	r3, #32
 8005992:	bfc1      	itttt	gt
 8005994:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005998:	fa08 f803 	lslgt.w	r8, r8, r3
 800599c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80059a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80059a4:	bfd6      	itet	le
 80059a6:	f1c3 0320 	rsble	r3, r3, #32
 80059aa:	ea48 0003 	orrgt.w	r0, r8, r3
 80059ae:	fa04 f003 	lslle.w	r0, r4, r3
 80059b2:	f7fa fda7 	bl	8000504 <__aeabi_ui2d>
 80059b6:	2201      	movs	r2, #1
 80059b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80059bc:	3e01      	subs	r6, #1
 80059be:	9212      	str	r2, [sp, #72]	@ 0x48
 80059c0:	e776      	b.n	80058b0 <_dtoa_r+0x100>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e7b7      	b.n	8005936 <_dtoa_r+0x186>
 80059c6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80059c8:	e7b6      	b.n	8005938 <_dtoa_r+0x188>
 80059ca:	427b      	negs	r3, r7
 80059cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80059ce:	2300      	movs	r3, #0
 80059d0:	eba8 0807 	sub.w	r8, r8, r7
 80059d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80059d6:	e7c3      	b.n	8005960 <_dtoa_r+0x1b0>
 80059d8:	2300      	movs	r3, #0
 80059da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059de:	2b00      	cmp	r3, #0
 80059e0:	dc35      	bgt.n	8005a4e <_dtoa_r+0x29e>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80059e8:	461a      	mov	r2, r3
 80059ea:	9221      	str	r2, [sp, #132]	@ 0x84
 80059ec:	e00b      	b.n	8005a06 <_dtoa_r+0x256>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e7f3      	b.n	80059da <_dtoa_r+0x22a>
 80059f2:	2300      	movs	r3, #0
 80059f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	9308      	str	r3, [sp, #32]
 80059fc:	3301      	adds	r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	9307      	str	r3, [sp, #28]
 8005a02:	bfb8      	it	lt
 8005a04:	2301      	movlt	r3, #1
 8005a06:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	f102 0514 	add.w	r5, r2, #20
 8005a12:	429d      	cmp	r5, r3
 8005a14:	d91f      	bls.n	8005a56 <_dtoa_r+0x2a6>
 8005a16:	6041      	str	r1, [r0, #4]
 8005a18:	4658      	mov	r0, fp
 8005a1a:	f000 fd91 	bl	8006540 <_Balloc>
 8005a1e:	4682      	mov	sl, r0
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d13b      	bne.n	8005a9c <_dtoa_r+0x2ec>
 8005a24:	4b1c      	ldr	r3, [pc, #112]	@ (8005a98 <_dtoa_r+0x2e8>)
 8005a26:	4602      	mov	r2, r0
 8005a28:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a2c:	e6d4      	b.n	80057d8 <_dtoa_r+0x28>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e7e0      	b.n	80059f4 <_dtoa_r+0x244>
 8005a32:	2401      	movs	r4, #1
 8005a34:	2300      	movs	r3, #0
 8005a36:	9320      	str	r3, [sp, #128]	@ 0x80
 8005a38:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005a42:	2200      	movs	r2, #0
 8005a44:	2312      	movs	r3, #18
 8005a46:	e7d0      	b.n	80059ea <_dtoa_r+0x23a>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a4c:	e7f5      	b.n	8005a3a <_dtoa_r+0x28a>
 8005a4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a50:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005a54:	e7d7      	b.n	8005a06 <_dtoa_r+0x256>
 8005a56:	3101      	adds	r1, #1
 8005a58:	0052      	lsls	r2, r2, #1
 8005a5a:	e7d8      	b.n	8005a0e <_dtoa_r+0x25e>
 8005a5c:	f3af 8000 	nop.w
 8005a60:	636f4361 	.word	0x636f4361
 8005a64:	3fd287a7 	.word	0x3fd287a7
 8005a68:	8b60c8b3 	.word	0x8b60c8b3
 8005a6c:	3fc68a28 	.word	0x3fc68a28
 8005a70:	509f79fb 	.word	0x509f79fb
 8005a74:	3fd34413 	.word	0x3fd34413
 8005a78:	0800739d 	.word	0x0800739d
 8005a7c:	080073b4 	.word	0x080073b4
 8005a80:	7ff00000 	.word	0x7ff00000
 8005a84:	08007399 	.word	0x08007399
 8005a88:	0800736d 	.word	0x0800736d
 8005a8c:	0800736c 	.word	0x0800736c
 8005a90:	3ff80000 	.word	0x3ff80000
 8005a94:	080074b0 	.word	0x080074b0
 8005a98:	0800740c 	.word	0x0800740c
 8005a9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005aa0:	6018      	str	r0, [r3, #0]
 8005aa2:	9b07      	ldr	r3, [sp, #28]
 8005aa4:	2b0e      	cmp	r3, #14
 8005aa6:	f200 80a4 	bhi.w	8005bf2 <_dtoa_r+0x442>
 8005aaa:	2c00      	cmp	r4, #0
 8005aac:	f000 80a1 	beq.w	8005bf2 <_dtoa_r+0x442>
 8005ab0:	2f00      	cmp	r7, #0
 8005ab2:	dd33      	ble.n	8005b1c <_dtoa_r+0x36c>
 8005ab4:	4b86      	ldr	r3, [pc, #536]	@ (8005cd0 <_dtoa_r+0x520>)
 8005ab6:	f007 020f 	and.w	r2, r7, #15
 8005aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005abe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ac2:	05f8      	lsls	r0, r7, #23
 8005ac4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ac8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005acc:	d516      	bpl.n	8005afc <_dtoa_r+0x34c>
 8005ace:	4b81      	ldr	r3, [pc, #516]	@ (8005cd4 <_dtoa_r+0x524>)
 8005ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ad8:	f7fa feb8 	bl	800084c <__aeabi_ddiv>
 8005adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ae0:	f004 040f 	and.w	r4, r4, #15
 8005ae4:	2603      	movs	r6, #3
 8005ae6:	4d7b      	ldr	r5, [pc, #492]	@ (8005cd4 <_dtoa_r+0x524>)
 8005ae8:	b954      	cbnz	r4, 8005b00 <_dtoa_r+0x350>
 8005aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005af2:	f7fa feab 	bl	800084c <__aeabi_ddiv>
 8005af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005afa:	e028      	b.n	8005b4e <_dtoa_r+0x39e>
 8005afc:	2602      	movs	r6, #2
 8005afe:	e7f2      	b.n	8005ae6 <_dtoa_r+0x336>
 8005b00:	07e1      	lsls	r1, r4, #31
 8005b02:	d508      	bpl.n	8005b16 <_dtoa_r+0x366>
 8005b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b0c:	f7fa fd74 	bl	80005f8 <__aeabi_dmul>
 8005b10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b14:	3601      	adds	r6, #1
 8005b16:	1064      	asrs	r4, r4, #1
 8005b18:	3508      	adds	r5, #8
 8005b1a:	e7e5      	b.n	8005ae8 <_dtoa_r+0x338>
 8005b1c:	f000 80d2 	beq.w	8005cc4 <_dtoa_r+0x514>
 8005b20:	427c      	negs	r4, r7
 8005b22:	4b6b      	ldr	r3, [pc, #428]	@ (8005cd0 <_dtoa_r+0x520>)
 8005b24:	4d6b      	ldr	r5, [pc, #428]	@ (8005cd4 <_dtoa_r+0x524>)
 8005b26:	f004 020f 	and.w	r2, r4, #15
 8005b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b36:	f7fa fd5f 	bl	80005f8 <__aeabi_dmul>
 8005b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b3e:	1124      	asrs	r4, r4, #4
 8005b40:	2300      	movs	r3, #0
 8005b42:	2602      	movs	r6, #2
 8005b44:	2c00      	cmp	r4, #0
 8005b46:	f040 80b2 	bne.w	8005cae <_dtoa_r+0x4fe>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1d3      	bne.n	8005af6 <_dtoa_r+0x346>
 8005b4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80b7 	beq.w	8005cc8 <_dtoa_r+0x518>
 8005b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8005cd8 <_dtoa_r+0x528>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4620      	mov	r0, r4
 8005b60:	4629      	mov	r1, r5
 8005b62:	f7fa ffbb 	bl	8000adc <__aeabi_dcmplt>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f000 80ae 	beq.w	8005cc8 <_dtoa_r+0x518>
 8005b6c:	9b07      	ldr	r3, [sp, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80aa 	beq.w	8005cc8 <_dtoa_r+0x518>
 8005b74:	9b08      	ldr	r3, [sp, #32]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	dd37      	ble.n	8005bea <_dtoa_r+0x43a>
 8005b7a:	1e7b      	subs	r3, r7, #1
 8005b7c:	9304      	str	r3, [sp, #16]
 8005b7e:	4620      	mov	r0, r4
 8005b80:	4b56      	ldr	r3, [pc, #344]	@ (8005cdc <_dtoa_r+0x52c>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	4629      	mov	r1, r5
 8005b86:	f7fa fd37 	bl	80005f8 <__aeabi_dmul>
 8005b8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b8e:	9c08      	ldr	r4, [sp, #32]
 8005b90:	3601      	adds	r6, #1
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7fa fcc6 	bl	8000524 <__aeabi_i2d>
 8005b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b9c:	f7fa fd2c 	bl	80005f8 <__aeabi_dmul>
 8005ba0:	4b4f      	ldr	r3, [pc, #316]	@ (8005ce0 <_dtoa_r+0x530>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f7fa fb72 	bl	800028c <__adddf3>
 8005ba8:	4605      	mov	r5, r0
 8005baa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005bae:	2c00      	cmp	r4, #0
 8005bb0:	f040 809a 	bne.w	8005ce8 <_dtoa_r+0x538>
 8005bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8005ce4 <_dtoa_r+0x534>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f7fa fb64 	bl	8000288 <__aeabi_dsub>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bc8:	462a      	mov	r2, r5
 8005bca:	4633      	mov	r3, r6
 8005bcc:	f7fa ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	f040 828e 	bne.w	80060f2 <_dtoa_r+0x942>
 8005bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bda:	462a      	mov	r2, r5
 8005bdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005be0:	f7fa ff7c 	bl	8000adc <__aeabi_dcmplt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f040 8127 	bne.w	8005e38 <_dtoa_r+0x688>
 8005bea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005bee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005bf2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f2c0 8163 	blt.w	8005ec0 <_dtoa_r+0x710>
 8005bfa:	2f0e      	cmp	r7, #14
 8005bfc:	f300 8160 	bgt.w	8005ec0 <_dtoa_r+0x710>
 8005c00:	4b33      	ldr	r3, [pc, #204]	@ (8005cd0 <_dtoa_r+0x520>)
 8005c02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	da03      	bge.n	8005c1c <_dtoa_r+0x46c>
 8005c14:	9b07      	ldr	r3, [sp, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f340 8100 	ble.w	8005e1c <_dtoa_r+0x66c>
 8005c1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c20:	4656      	mov	r6, sl
 8005c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c26:	4620      	mov	r0, r4
 8005c28:	4629      	mov	r1, r5
 8005c2a:	f7fa fe0f 	bl	800084c <__aeabi_ddiv>
 8005c2e:	f7fa ff93 	bl	8000b58 <__aeabi_d2iz>
 8005c32:	4680      	mov	r8, r0
 8005c34:	f7fa fc76 	bl	8000524 <__aeabi_i2d>
 8005c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c3c:	f7fa fcdc 	bl	80005f8 <__aeabi_dmul>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4620      	mov	r0, r4
 8005c46:	4629      	mov	r1, r5
 8005c48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c4c:	f7fa fb1c 	bl	8000288 <__aeabi_dsub>
 8005c50:	f806 4b01 	strb.w	r4, [r6], #1
 8005c54:	9d07      	ldr	r5, [sp, #28]
 8005c56:	eba6 040a 	sub.w	r4, r6, sl
 8005c5a:	42a5      	cmp	r5, r4
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	f040 8116 	bne.w	8005e90 <_dtoa_r+0x6e0>
 8005c64:	f7fa fb12 	bl	800028c <__adddf3>
 8005c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	460d      	mov	r5, r1
 8005c70:	f7fa ff52 	bl	8000b18 <__aeabi_dcmpgt>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	f040 80f8 	bne.w	8005e6a <_dtoa_r+0x6ba>
 8005c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c7e:	4620      	mov	r0, r4
 8005c80:	4629      	mov	r1, r5
 8005c82:	f7fa ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c86:	b118      	cbz	r0, 8005c90 <_dtoa_r+0x4e0>
 8005c88:	f018 0f01 	tst.w	r8, #1
 8005c8c:	f040 80ed 	bne.w	8005e6a <_dtoa_r+0x6ba>
 8005c90:	4649      	mov	r1, r9
 8005c92:	4658      	mov	r0, fp
 8005c94:	f000 fc94 	bl	80065c0 <_Bfree>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	7033      	strb	r3, [r6, #0]
 8005c9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c9e:	3701      	adds	r7, #1
 8005ca0:	601f      	str	r7, [r3, #0]
 8005ca2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8320 	beq.w	80062ea <_dtoa_r+0xb3a>
 8005caa:	601e      	str	r6, [r3, #0]
 8005cac:	e31d      	b.n	80062ea <_dtoa_r+0xb3a>
 8005cae:	07e2      	lsls	r2, r4, #31
 8005cb0:	d505      	bpl.n	8005cbe <_dtoa_r+0x50e>
 8005cb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cb6:	f7fa fc9f 	bl	80005f8 <__aeabi_dmul>
 8005cba:	3601      	adds	r6, #1
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	1064      	asrs	r4, r4, #1
 8005cc0:	3508      	adds	r5, #8
 8005cc2:	e73f      	b.n	8005b44 <_dtoa_r+0x394>
 8005cc4:	2602      	movs	r6, #2
 8005cc6:	e742      	b.n	8005b4e <_dtoa_r+0x39e>
 8005cc8:	9c07      	ldr	r4, [sp, #28]
 8005cca:	9704      	str	r7, [sp, #16]
 8005ccc:	e761      	b.n	8005b92 <_dtoa_r+0x3e2>
 8005cce:	bf00      	nop
 8005cd0:	080074b0 	.word	0x080074b0
 8005cd4:	08007488 	.word	0x08007488
 8005cd8:	3ff00000 	.word	0x3ff00000
 8005cdc:	40240000 	.word	0x40240000
 8005ce0:	401c0000 	.word	0x401c0000
 8005ce4:	40140000 	.word	0x40140000
 8005ce8:	4b70      	ldr	r3, [pc, #448]	@ (8005eac <_dtoa_r+0x6fc>)
 8005cea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cf4:	4454      	add	r4, sl
 8005cf6:	2900      	cmp	r1, #0
 8005cf8:	d045      	beq.n	8005d86 <_dtoa_r+0x5d6>
 8005cfa:	496d      	ldr	r1, [pc, #436]	@ (8005eb0 <_dtoa_r+0x700>)
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	f7fa fda5 	bl	800084c <__aeabi_ddiv>
 8005d02:	4633      	mov	r3, r6
 8005d04:	462a      	mov	r2, r5
 8005d06:	f7fa fabf 	bl	8000288 <__aeabi_dsub>
 8005d0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d0e:	4656      	mov	r6, sl
 8005d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d14:	f7fa ff20 	bl	8000b58 <__aeabi_d2iz>
 8005d18:	4605      	mov	r5, r0
 8005d1a:	f7fa fc03 	bl	8000524 <__aeabi_i2d>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d26:	f7fa faaf 	bl	8000288 <__aeabi_dsub>
 8005d2a:	3530      	adds	r5, #48	@ 0x30
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d34:	f806 5b01 	strb.w	r5, [r6], #1
 8005d38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d3c:	f7fa fece 	bl	8000adc <__aeabi_dcmplt>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d163      	bne.n	8005e0c <_dtoa_r+0x65c>
 8005d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d48:	495a      	ldr	r1, [pc, #360]	@ (8005eb4 <_dtoa_r+0x704>)
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7fa fa9c 	bl	8000288 <__aeabi_dsub>
 8005d50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d54:	f7fa fec2 	bl	8000adc <__aeabi_dcmplt>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	f040 8087 	bne.w	8005e6c <_dtoa_r+0x6bc>
 8005d5e:	42a6      	cmp	r6, r4
 8005d60:	f43f af43 	beq.w	8005bea <_dtoa_r+0x43a>
 8005d64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d68:	4b53      	ldr	r3, [pc, #332]	@ (8005eb8 <_dtoa_r+0x708>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f7fa fc44 	bl	80005f8 <__aeabi_dmul>
 8005d70:	4b51      	ldr	r3, [pc, #324]	@ (8005eb8 <_dtoa_r+0x708>)
 8005d72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d76:	2200      	movs	r2, #0
 8005d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d7c:	f7fa fc3c 	bl	80005f8 <__aeabi_dmul>
 8005d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d84:	e7c4      	b.n	8005d10 <_dtoa_r+0x560>
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f7fa fc35 	bl	80005f8 <__aeabi_dmul>
 8005d8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d92:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005d94:	4656      	mov	r6, sl
 8005d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d9a:	f7fa fedd 	bl	8000b58 <__aeabi_d2iz>
 8005d9e:	4605      	mov	r5, r0
 8005da0:	f7fa fbc0 	bl	8000524 <__aeabi_i2d>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dac:	f7fa fa6c 	bl	8000288 <__aeabi_dsub>
 8005db0:	3530      	adds	r5, #48	@ 0x30
 8005db2:	f806 5b01 	strb.w	r5, [r6], #1
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	42a6      	cmp	r6, r4
 8005dbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	d124      	bne.n	8005e10 <_dtoa_r+0x660>
 8005dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8005eb0 <_dtoa_r+0x700>)
 8005dc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005dcc:	f7fa fa5e 	bl	800028c <__adddf3>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dd8:	f7fa fe9e 	bl	8000b18 <__aeabi_dcmpgt>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d145      	bne.n	8005e6c <_dtoa_r+0x6bc>
 8005de0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005de4:	4932      	ldr	r1, [pc, #200]	@ (8005eb0 <_dtoa_r+0x700>)
 8005de6:	2000      	movs	r0, #0
 8005de8:	f7fa fa4e 	bl	8000288 <__aeabi_dsub>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005df4:	f7fa fe72 	bl	8000adc <__aeabi_dcmplt>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	f43f aef6 	beq.w	8005bea <_dtoa_r+0x43a>
 8005dfe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005e00:	1e73      	subs	r3, r6, #1
 8005e02:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e08:	2b30      	cmp	r3, #48	@ 0x30
 8005e0a:	d0f8      	beq.n	8005dfe <_dtoa_r+0x64e>
 8005e0c:	9f04      	ldr	r7, [sp, #16]
 8005e0e:	e73f      	b.n	8005c90 <_dtoa_r+0x4e0>
 8005e10:	4b29      	ldr	r3, [pc, #164]	@ (8005eb8 <_dtoa_r+0x708>)
 8005e12:	f7fa fbf1 	bl	80005f8 <__aeabi_dmul>
 8005e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e1a:	e7bc      	b.n	8005d96 <_dtoa_r+0x5e6>
 8005e1c:	d10c      	bne.n	8005e38 <_dtoa_r+0x688>
 8005e1e:	4b27      	ldr	r3, [pc, #156]	@ (8005ebc <_dtoa_r+0x70c>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e26:	f7fa fbe7 	bl	80005f8 <__aeabi_dmul>
 8005e2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e2e:	f7fa fe69 	bl	8000b04 <__aeabi_dcmpge>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	f000 815b 	beq.w	80060ee <_dtoa_r+0x93e>
 8005e38:	2400      	movs	r4, #0
 8005e3a:	4625      	mov	r5, r4
 8005e3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	4656      	mov	r6, sl
 8005e44:	2700      	movs	r7, #0
 8005e46:	4621      	mov	r1, r4
 8005e48:	4658      	mov	r0, fp
 8005e4a:	f000 fbb9 	bl	80065c0 <_Bfree>
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	d0dc      	beq.n	8005e0c <_dtoa_r+0x65c>
 8005e52:	b12f      	cbz	r7, 8005e60 <_dtoa_r+0x6b0>
 8005e54:	42af      	cmp	r7, r5
 8005e56:	d003      	beq.n	8005e60 <_dtoa_r+0x6b0>
 8005e58:	4639      	mov	r1, r7
 8005e5a:	4658      	mov	r0, fp
 8005e5c:	f000 fbb0 	bl	80065c0 <_Bfree>
 8005e60:	4629      	mov	r1, r5
 8005e62:	4658      	mov	r0, fp
 8005e64:	f000 fbac 	bl	80065c0 <_Bfree>
 8005e68:	e7d0      	b.n	8005e0c <_dtoa_r+0x65c>
 8005e6a:	9704      	str	r7, [sp, #16]
 8005e6c:	4633      	mov	r3, r6
 8005e6e:	461e      	mov	r6, r3
 8005e70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e74:	2a39      	cmp	r2, #57	@ 0x39
 8005e76:	d107      	bne.n	8005e88 <_dtoa_r+0x6d8>
 8005e78:	459a      	cmp	sl, r3
 8005e7a:	d1f8      	bne.n	8005e6e <_dtoa_r+0x6be>
 8005e7c:	9a04      	ldr	r2, [sp, #16]
 8005e7e:	3201      	adds	r2, #1
 8005e80:	9204      	str	r2, [sp, #16]
 8005e82:	2230      	movs	r2, #48	@ 0x30
 8005e84:	f88a 2000 	strb.w	r2, [sl]
 8005e88:	781a      	ldrb	r2, [r3, #0]
 8005e8a:	3201      	adds	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e7bd      	b.n	8005e0c <_dtoa_r+0x65c>
 8005e90:	4b09      	ldr	r3, [pc, #36]	@ (8005eb8 <_dtoa_r+0x708>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	f7fa fbb0 	bl	80005f8 <__aeabi_dmul>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	460d      	mov	r5, r1
 8005ea0:	f7fa fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	f43f aebc 	beq.w	8005c22 <_dtoa_r+0x472>
 8005eaa:	e6f1      	b.n	8005c90 <_dtoa_r+0x4e0>
 8005eac:	080074b0 	.word	0x080074b0
 8005eb0:	3fe00000 	.word	0x3fe00000
 8005eb4:	3ff00000 	.word	0x3ff00000
 8005eb8:	40240000 	.word	0x40240000
 8005ebc:	40140000 	.word	0x40140000
 8005ec0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	f000 80db 	beq.w	800607e <_dtoa_r+0x8ce>
 8005ec8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005eca:	2a01      	cmp	r2, #1
 8005ecc:	f300 80bf 	bgt.w	800604e <_dtoa_r+0x89e>
 8005ed0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	f000 80b7 	beq.w	8006046 <_dtoa_r+0x896>
 8005ed8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005edc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ede:	4646      	mov	r6, r8
 8005ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	441a      	add	r2, r3
 8005ee6:	4658      	mov	r0, fp
 8005ee8:	4498      	add	r8, r3
 8005eea:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eec:	f000 fc1c 	bl	8006728 <__i2b>
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	b15e      	cbz	r6, 8005f0c <_dtoa_r+0x75c>
 8005ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	dd08      	ble.n	8005f0c <_dtoa_r+0x75c>
 8005efa:	42b3      	cmp	r3, r6
 8005efc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005efe:	bfa8      	it	ge
 8005f00:	4633      	movge	r3, r6
 8005f02:	eba8 0803 	sub.w	r8, r8, r3
 8005f06:	1af6      	subs	r6, r6, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f0e:	b1f3      	cbz	r3, 8005f4e <_dtoa_r+0x79e>
 8005f10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 80b7 	beq.w	8006086 <_dtoa_r+0x8d6>
 8005f18:	b18c      	cbz	r4, 8005f3e <_dtoa_r+0x78e>
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4658      	mov	r0, fp
 8005f20:	f000 fcc2 	bl	80068a8 <__pow5mult>
 8005f24:	464a      	mov	r2, r9
 8005f26:	4601      	mov	r1, r0
 8005f28:	4605      	mov	r5, r0
 8005f2a:	4658      	mov	r0, fp
 8005f2c:	f000 fc12 	bl	8006754 <__multiply>
 8005f30:	4649      	mov	r1, r9
 8005f32:	9004      	str	r0, [sp, #16]
 8005f34:	4658      	mov	r0, fp
 8005f36:	f000 fb43 	bl	80065c0 <_Bfree>
 8005f3a:	9b04      	ldr	r3, [sp, #16]
 8005f3c:	4699      	mov	r9, r3
 8005f3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f40:	1b1a      	subs	r2, r3, r4
 8005f42:	d004      	beq.n	8005f4e <_dtoa_r+0x79e>
 8005f44:	4649      	mov	r1, r9
 8005f46:	4658      	mov	r0, fp
 8005f48:	f000 fcae 	bl	80068a8 <__pow5mult>
 8005f4c:	4681      	mov	r9, r0
 8005f4e:	2101      	movs	r1, #1
 8005f50:	4658      	mov	r0, fp
 8005f52:	f000 fbe9 	bl	8006728 <__i2b>
 8005f56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f58:	4604      	mov	r4, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 81c9 	beq.w	80062f2 <_dtoa_r+0xb42>
 8005f60:	461a      	mov	r2, r3
 8005f62:	4601      	mov	r1, r0
 8005f64:	4658      	mov	r0, fp
 8005f66:	f000 fc9f 	bl	80068a8 <__pow5mult>
 8005f6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	4604      	mov	r4, r0
 8005f70:	f300 808f 	bgt.w	8006092 <_dtoa_r+0x8e2>
 8005f74:	9b02      	ldr	r3, [sp, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f040 8087 	bne.w	800608a <_dtoa_r+0x8da>
 8005f7c:	9b03      	ldr	r3, [sp, #12]
 8005f7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f040 8083 	bne.w	800608e <_dtoa_r+0x8de>
 8005f88:	9b03      	ldr	r3, [sp, #12]
 8005f8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f8e:	0d1b      	lsrs	r3, r3, #20
 8005f90:	051b      	lsls	r3, r3, #20
 8005f92:	b12b      	cbz	r3, 8005fa0 <_dtoa_r+0x7f0>
 8005f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f96:	3301      	adds	r3, #1
 8005f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f9a:	f108 0801 	add.w	r8, r8, #1
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 81aa 	beq.w	80062fe <_dtoa_r+0xb4e>
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fb0:	6918      	ldr	r0, [r3, #16]
 8005fb2:	f000 fb6d 	bl	8006690 <__hi0bits>
 8005fb6:	f1c0 0020 	rsb	r0, r0, #32
 8005fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fbc:	4418      	add	r0, r3
 8005fbe:	f010 001f 	ands.w	r0, r0, #31
 8005fc2:	d071      	beq.n	80060a8 <_dtoa_r+0x8f8>
 8005fc4:	f1c0 0320 	rsb	r3, r0, #32
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	dd65      	ble.n	8006098 <_dtoa_r+0x8e8>
 8005fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fce:	f1c0 001c 	rsb	r0, r0, #28
 8005fd2:	4403      	add	r3, r0
 8005fd4:	4480      	add	r8, r0
 8005fd6:	4406      	add	r6, r0
 8005fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fda:	f1b8 0f00 	cmp.w	r8, #0
 8005fde:	dd05      	ble.n	8005fec <_dtoa_r+0x83c>
 8005fe0:	4649      	mov	r1, r9
 8005fe2:	4642      	mov	r2, r8
 8005fe4:	4658      	mov	r0, fp
 8005fe6:	f000 fcb9 	bl	800695c <__lshift>
 8005fea:	4681      	mov	r9, r0
 8005fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dd05      	ble.n	8005ffe <_dtoa_r+0x84e>
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4658      	mov	r0, fp
 8005ff8:	f000 fcb0 	bl	800695c <__lshift>
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d053      	beq.n	80060ac <_dtoa_r+0x8fc>
 8006004:	4621      	mov	r1, r4
 8006006:	4648      	mov	r0, r9
 8006008:	f000 fd14 	bl	8006a34 <__mcmp>
 800600c:	2800      	cmp	r0, #0
 800600e:	da4d      	bge.n	80060ac <_dtoa_r+0x8fc>
 8006010:	1e7b      	subs	r3, r7, #1
 8006012:	9304      	str	r3, [sp, #16]
 8006014:	4649      	mov	r1, r9
 8006016:	2300      	movs	r3, #0
 8006018:	220a      	movs	r2, #10
 800601a:	4658      	mov	r0, fp
 800601c:	f000 faf2 	bl	8006604 <__multadd>
 8006020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006022:	4681      	mov	r9, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 816c 	beq.w	8006302 <_dtoa_r+0xb52>
 800602a:	2300      	movs	r3, #0
 800602c:	4629      	mov	r1, r5
 800602e:	220a      	movs	r2, #10
 8006030:	4658      	mov	r0, fp
 8006032:	f000 fae7 	bl	8006604 <__multadd>
 8006036:	9b08      	ldr	r3, [sp, #32]
 8006038:	2b00      	cmp	r3, #0
 800603a:	4605      	mov	r5, r0
 800603c:	dc61      	bgt.n	8006102 <_dtoa_r+0x952>
 800603e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006040:	2b02      	cmp	r3, #2
 8006042:	dc3b      	bgt.n	80060bc <_dtoa_r+0x90c>
 8006044:	e05d      	b.n	8006102 <_dtoa_r+0x952>
 8006046:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006048:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800604c:	e746      	b.n	8005edc <_dtoa_r+0x72c>
 800604e:	9b07      	ldr	r3, [sp, #28]
 8006050:	1e5c      	subs	r4, r3, #1
 8006052:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006054:	42a3      	cmp	r3, r4
 8006056:	bfbf      	itttt	lt
 8006058:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800605a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800605c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800605e:	1ae3      	sublt	r3, r4, r3
 8006060:	bfb4      	ite	lt
 8006062:	18d2      	addlt	r2, r2, r3
 8006064:	1b1c      	subge	r4, r3, r4
 8006066:	9b07      	ldr	r3, [sp, #28]
 8006068:	bfbc      	itt	lt
 800606a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800606c:	2400      	movlt	r4, #0
 800606e:	2b00      	cmp	r3, #0
 8006070:	bfb5      	itete	lt
 8006072:	eba8 0603 	sublt.w	r6, r8, r3
 8006076:	9b07      	ldrge	r3, [sp, #28]
 8006078:	2300      	movlt	r3, #0
 800607a:	4646      	movge	r6, r8
 800607c:	e730      	b.n	8005ee0 <_dtoa_r+0x730>
 800607e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006080:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006082:	4646      	mov	r6, r8
 8006084:	e735      	b.n	8005ef2 <_dtoa_r+0x742>
 8006086:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006088:	e75c      	b.n	8005f44 <_dtoa_r+0x794>
 800608a:	2300      	movs	r3, #0
 800608c:	e788      	b.n	8005fa0 <_dtoa_r+0x7f0>
 800608e:	9b02      	ldr	r3, [sp, #8]
 8006090:	e786      	b.n	8005fa0 <_dtoa_r+0x7f0>
 8006092:	2300      	movs	r3, #0
 8006094:	930a      	str	r3, [sp, #40]	@ 0x28
 8006096:	e788      	b.n	8005faa <_dtoa_r+0x7fa>
 8006098:	d09f      	beq.n	8005fda <_dtoa_r+0x82a>
 800609a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800609c:	331c      	adds	r3, #28
 800609e:	441a      	add	r2, r3
 80060a0:	4498      	add	r8, r3
 80060a2:	441e      	add	r6, r3
 80060a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80060a6:	e798      	b.n	8005fda <_dtoa_r+0x82a>
 80060a8:	4603      	mov	r3, r0
 80060aa:	e7f6      	b.n	800609a <_dtoa_r+0x8ea>
 80060ac:	9b07      	ldr	r3, [sp, #28]
 80060ae:	9704      	str	r7, [sp, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	dc20      	bgt.n	80060f6 <_dtoa_r+0x946>
 80060b4:	9308      	str	r3, [sp, #32]
 80060b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	dd1e      	ble.n	80060fa <_dtoa_r+0x94a>
 80060bc:	9b08      	ldr	r3, [sp, #32]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f47f aebc 	bne.w	8005e3c <_dtoa_r+0x68c>
 80060c4:	4621      	mov	r1, r4
 80060c6:	2205      	movs	r2, #5
 80060c8:	4658      	mov	r0, fp
 80060ca:	f000 fa9b 	bl	8006604 <__multadd>
 80060ce:	4601      	mov	r1, r0
 80060d0:	4604      	mov	r4, r0
 80060d2:	4648      	mov	r0, r9
 80060d4:	f000 fcae 	bl	8006a34 <__mcmp>
 80060d8:	2800      	cmp	r0, #0
 80060da:	f77f aeaf 	ble.w	8005e3c <_dtoa_r+0x68c>
 80060de:	4656      	mov	r6, sl
 80060e0:	2331      	movs	r3, #49	@ 0x31
 80060e2:	f806 3b01 	strb.w	r3, [r6], #1
 80060e6:	9b04      	ldr	r3, [sp, #16]
 80060e8:	3301      	adds	r3, #1
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	e6aa      	b.n	8005e44 <_dtoa_r+0x694>
 80060ee:	9c07      	ldr	r4, [sp, #28]
 80060f0:	9704      	str	r7, [sp, #16]
 80060f2:	4625      	mov	r5, r4
 80060f4:	e7f3      	b.n	80060de <_dtoa_r+0x92e>
 80060f6:	9b07      	ldr	r3, [sp, #28]
 80060f8:	9308      	str	r3, [sp, #32]
 80060fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8104 	beq.w	800630a <_dtoa_r+0xb5a>
 8006102:	2e00      	cmp	r6, #0
 8006104:	dd05      	ble.n	8006112 <_dtoa_r+0x962>
 8006106:	4629      	mov	r1, r5
 8006108:	4632      	mov	r2, r6
 800610a:	4658      	mov	r0, fp
 800610c:	f000 fc26 	bl	800695c <__lshift>
 8006110:	4605      	mov	r5, r0
 8006112:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006114:	2b00      	cmp	r3, #0
 8006116:	d05a      	beq.n	80061ce <_dtoa_r+0xa1e>
 8006118:	6869      	ldr	r1, [r5, #4]
 800611a:	4658      	mov	r0, fp
 800611c:	f000 fa10 	bl	8006540 <_Balloc>
 8006120:	4606      	mov	r6, r0
 8006122:	b928      	cbnz	r0, 8006130 <_dtoa_r+0x980>
 8006124:	4b84      	ldr	r3, [pc, #528]	@ (8006338 <_dtoa_r+0xb88>)
 8006126:	4602      	mov	r2, r0
 8006128:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800612c:	f7ff bb54 	b.w	80057d8 <_dtoa_r+0x28>
 8006130:	692a      	ldr	r2, [r5, #16]
 8006132:	3202      	adds	r2, #2
 8006134:	0092      	lsls	r2, r2, #2
 8006136:	f105 010c 	add.w	r1, r5, #12
 800613a:	300c      	adds	r0, #12
 800613c:	f7ff fa9f 	bl	800567e <memcpy>
 8006140:	2201      	movs	r2, #1
 8006142:	4631      	mov	r1, r6
 8006144:	4658      	mov	r0, fp
 8006146:	f000 fc09 	bl	800695c <__lshift>
 800614a:	f10a 0301 	add.w	r3, sl, #1
 800614e:	9307      	str	r3, [sp, #28]
 8006150:	9b08      	ldr	r3, [sp, #32]
 8006152:	4453      	add	r3, sl
 8006154:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006156:	9b02      	ldr	r3, [sp, #8]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	462f      	mov	r7, r5
 800615e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006160:	4605      	mov	r5, r0
 8006162:	9b07      	ldr	r3, [sp, #28]
 8006164:	4621      	mov	r1, r4
 8006166:	3b01      	subs	r3, #1
 8006168:	4648      	mov	r0, r9
 800616a:	9302      	str	r3, [sp, #8]
 800616c:	f7ff fa95 	bl	800569a <quorem>
 8006170:	4639      	mov	r1, r7
 8006172:	9008      	str	r0, [sp, #32]
 8006174:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006178:	4648      	mov	r0, r9
 800617a:	f000 fc5b 	bl	8006a34 <__mcmp>
 800617e:	462a      	mov	r2, r5
 8006180:	9009      	str	r0, [sp, #36]	@ 0x24
 8006182:	4621      	mov	r1, r4
 8006184:	4658      	mov	r0, fp
 8006186:	f000 fc71 	bl	8006a6c <__mdiff>
 800618a:	68c2      	ldr	r2, [r0, #12]
 800618c:	4606      	mov	r6, r0
 800618e:	bb02      	cbnz	r2, 80061d2 <_dtoa_r+0xa22>
 8006190:	4601      	mov	r1, r0
 8006192:	4648      	mov	r0, r9
 8006194:	f000 fc4e 	bl	8006a34 <__mcmp>
 8006198:	4602      	mov	r2, r0
 800619a:	4631      	mov	r1, r6
 800619c:	4658      	mov	r0, fp
 800619e:	920c      	str	r2, [sp, #48]	@ 0x30
 80061a0:	f000 fa0e 	bl	80065c0 <_Bfree>
 80061a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80061a8:	9e07      	ldr	r6, [sp, #28]
 80061aa:	ea43 0102 	orr.w	r1, r3, r2
 80061ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061b0:	4319      	orrs	r1, r3
 80061b2:	d110      	bne.n	80061d6 <_dtoa_r+0xa26>
 80061b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061b8:	d029      	beq.n	800620e <_dtoa_r+0xa5e>
 80061ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	dd02      	ble.n	80061c6 <_dtoa_r+0xa16>
 80061c0:	9b08      	ldr	r3, [sp, #32]
 80061c2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80061c6:	9b02      	ldr	r3, [sp, #8]
 80061c8:	f883 8000 	strb.w	r8, [r3]
 80061cc:	e63b      	b.n	8005e46 <_dtoa_r+0x696>
 80061ce:	4628      	mov	r0, r5
 80061d0:	e7bb      	b.n	800614a <_dtoa_r+0x99a>
 80061d2:	2201      	movs	r2, #1
 80061d4:	e7e1      	b.n	800619a <_dtoa_r+0x9ea>
 80061d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	db04      	blt.n	80061e6 <_dtoa_r+0xa36>
 80061dc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80061de:	430b      	orrs	r3, r1
 80061e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061e2:	430b      	orrs	r3, r1
 80061e4:	d120      	bne.n	8006228 <_dtoa_r+0xa78>
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	dded      	ble.n	80061c6 <_dtoa_r+0xa16>
 80061ea:	4649      	mov	r1, r9
 80061ec:	2201      	movs	r2, #1
 80061ee:	4658      	mov	r0, fp
 80061f0:	f000 fbb4 	bl	800695c <__lshift>
 80061f4:	4621      	mov	r1, r4
 80061f6:	4681      	mov	r9, r0
 80061f8:	f000 fc1c 	bl	8006a34 <__mcmp>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	dc03      	bgt.n	8006208 <_dtoa_r+0xa58>
 8006200:	d1e1      	bne.n	80061c6 <_dtoa_r+0xa16>
 8006202:	f018 0f01 	tst.w	r8, #1
 8006206:	d0de      	beq.n	80061c6 <_dtoa_r+0xa16>
 8006208:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800620c:	d1d8      	bne.n	80061c0 <_dtoa_r+0xa10>
 800620e:	9a02      	ldr	r2, [sp, #8]
 8006210:	2339      	movs	r3, #57	@ 0x39
 8006212:	7013      	strb	r3, [r2, #0]
 8006214:	4633      	mov	r3, r6
 8006216:	461e      	mov	r6, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800621e:	2a39      	cmp	r2, #57	@ 0x39
 8006220:	d052      	beq.n	80062c8 <_dtoa_r+0xb18>
 8006222:	3201      	adds	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e60e      	b.n	8005e46 <_dtoa_r+0x696>
 8006228:	2a00      	cmp	r2, #0
 800622a:	dd07      	ble.n	800623c <_dtoa_r+0xa8c>
 800622c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006230:	d0ed      	beq.n	800620e <_dtoa_r+0xa5e>
 8006232:	9a02      	ldr	r2, [sp, #8]
 8006234:	f108 0301 	add.w	r3, r8, #1
 8006238:	7013      	strb	r3, [r2, #0]
 800623a:	e604      	b.n	8005e46 <_dtoa_r+0x696>
 800623c:	9b07      	ldr	r3, [sp, #28]
 800623e:	9a07      	ldr	r2, [sp, #28]
 8006240:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006244:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006246:	4293      	cmp	r3, r2
 8006248:	d028      	beq.n	800629c <_dtoa_r+0xaec>
 800624a:	4649      	mov	r1, r9
 800624c:	2300      	movs	r3, #0
 800624e:	220a      	movs	r2, #10
 8006250:	4658      	mov	r0, fp
 8006252:	f000 f9d7 	bl	8006604 <__multadd>
 8006256:	42af      	cmp	r7, r5
 8006258:	4681      	mov	r9, r0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	f04f 020a 	mov.w	r2, #10
 8006262:	4639      	mov	r1, r7
 8006264:	4658      	mov	r0, fp
 8006266:	d107      	bne.n	8006278 <_dtoa_r+0xac8>
 8006268:	f000 f9cc 	bl	8006604 <__multadd>
 800626c:	4607      	mov	r7, r0
 800626e:	4605      	mov	r5, r0
 8006270:	9b07      	ldr	r3, [sp, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	9307      	str	r3, [sp, #28]
 8006276:	e774      	b.n	8006162 <_dtoa_r+0x9b2>
 8006278:	f000 f9c4 	bl	8006604 <__multadd>
 800627c:	4629      	mov	r1, r5
 800627e:	4607      	mov	r7, r0
 8006280:	2300      	movs	r3, #0
 8006282:	220a      	movs	r2, #10
 8006284:	4658      	mov	r0, fp
 8006286:	f000 f9bd 	bl	8006604 <__multadd>
 800628a:	4605      	mov	r5, r0
 800628c:	e7f0      	b.n	8006270 <_dtoa_r+0xac0>
 800628e:	9b08      	ldr	r3, [sp, #32]
 8006290:	2b00      	cmp	r3, #0
 8006292:	bfcc      	ite	gt
 8006294:	461e      	movgt	r6, r3
 8006296:	2601      	movle	r6, #1
 8006298:	4456      	add	r6, sl
 800629a:	2700      	movs	r7, #0
 800629c:	4649      	mov	r1, r9
 800629e:	2201      	movs	r2, #1
 80062a0:	4658      	mov	r0, fp
 80062a2:	f000 fb5b 	bl	800695c <__lshift>
 80062a6:	4621      	mov	r1, r4
 80062a8:	4681      	mov	r9, r0
 80062aa:	f000 fbc3 	bl	8006a34 <__mcmp>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	dcb0      	bgt.n	8006214 <_dtoa_r+0xa64>
 80062b2:	d102      	bne.n	80062ba <_dtoa_r+0xb0a>
 80062b4:	f018 0f01 	tst.w	r8, #1
 80062b8:	d1ac      	bne.n	8006214 <_dtoa_r+0xa64>
 80062ba:	4633      	mov	r3, r6
 80062bc:	461e      	mov	r6, r3
 80062be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062c2:	2a30      	cmp	r2, #48	@ 0x30
 80062c4:	d0fa      	beq.n	80062bc <_dtoa_r+0xb0c>
 80062c6:	e5be      	b.n	8005e46 <_dtoa_r+0x696>
 80062c8:	459a      	cmp	sl, r3
 80062ca:	d1a4      	bne.n	8006216 <_dtoa_r+0xa66>
 80062cc:	9b04      	ldr	r3, [sp, #16]
 80062ce:	3301      	adds	r3, #1
 80062d0:	9304      	str	r3, [sp, #16]
 80062d2:	2331      	movs	r3, #49	@ 0x31
 80062d4:	f88a 3000 	strb.w	r3, [sl]
 80062d8:	e5b5      	b.n	8005e46 <_dtoa_r+0x696>
 80062da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062dc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800633c <_dtoa_r+0xb8c>
 80062e0:	b11b      	cbz	r3, 80062ea <_dtoa_r+0xb3a>
 80062e2:	f10a 0308 	add.w	r3, sl, #8
 80062e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	4650      	mov	r0, sl
 80062ec:	b017      	add	sp, #92	@ 0x5c
 80062ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	f77f ae3d 	ble.w	8005f74 <_dtoa_r+0x7c4>
 80062fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80062fe:	2001      	movs	r0, #1
 8006300:	e65b      	b.n	8005fba <_dtoa_r+0x80a>
 8006302:	9b08      	ldr	r3, [sp, #32]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f77f aed6 	ble.w	80060b6 <_dtoa_r+0x906>
 800630a:	4656      	mov	r6, sl
 800630c:	4621      	mov	r1, r4
 800630e:	4648      	mov	r0, r9
 8006310:	f7ff f9c3 	bl	800569a <quorem>
 8006314:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006318:	f806 8b01 	strb.w	r8, [r6], #1
 800631c:	9b08      	ldr	r3, [sp, #32]
 800631e:	eba6 020a 	sub.w	r2, r6, sl
 8006322:	4293      	cmp	r3, r2
 8006324:	ddb3      	ble.n	800628e <_dtoa_r+0xade>
 8006326:	4649      	mov	r1, r9
 8006328:	2300      	movs	r3, #0
 800632a:	220a      	movs	r2, #10
 800632c:	4658      	mov	r0, fp
 800632e:	f000 f969 	bl	8006604 <__multadd>
 8006332:	4681      	mov	r9, r0
 8006334:	e7ea      	b.n	800630c <_dtoa_r+0xb5c>
 8006336:	bf00      	nop
 8006338:	0800740c 	.word	0x0800740c
 800633c:	08007390 	.word	0x08007390

08006340 <_free_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4605      	mov	r5, r0
 8006344:	2900      	cmp	r1, #0
 8006346:	d041      	beq.n	80063cc <_free_r+0x8c>
 8006348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800634c:	1f0c      	subs	r4, r1, #4
 800634e:	2b00      	cmp	r3, #0
 8006350:	bfb8      	it	lt
 8006352:	18e4      	addlt	r4, r4, r3
 8006354:	f000 f8e8 	bl	8006528 <__malloc_lock>
 8006358:	4a1d      	ldr	r2, [pc, #116]	@ (80063d0 <_free_r+0x90>)
 800635a:	6813      	ldr	r3, [r2, #0]
 800635c:	b933      	cbnz	r3, 800636c <_free_r+0x2c>
 800635e:	6063      	str	r3, [r4, #4]
 8006360:	6014      	str	r4, [r2, #0]
 8006362:	4628      	mov	r0, r5
 8006364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006368:	f000 b8e4 	b.w	8006534 <__malloc_unlock>
 800636c:	42a3      	cmp	r3, r4
 800636e:	d908      	bls.n	8006382 <_free_r+0x42>
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	1821      	adds	r1, r4, r0
 8006374:	428b      	cmp	r3, r1
 8006376:	bf01      	itttt	eq
 8006378:	6819      	ldreq	r1, [r3, #0]
 800637a:	685b      	ldreq	r3, [r3, #4]
 800637c:	1809      	addeq	r1, r1, r0
 800637e:	6021      	streq	r1, [r4, #0]
 8006380:	e7ed      	b.n	800635e <_free_r+0x1e>
 8006382:	461a      	mov	r2, r3
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	b10b      	cbz	r3, 800638c <_free_r+0x4c>
 8006388:	42a3      	cmp	r3, r4
 800638a:	d9fa      	bls.n	8006382 <_free_r+0x42>
 800638c:	6811      	ldr	r1, [r2, #0]
 800638e:	1850      	adds	r0, r2, r1
 8006390:	42a0      	cmp	r0, r4
 8006392:	d10b      	bne.n	80063ac <_free_r+0x6c>
 8006394:	6820      	ldr	r0, [r4, #0]
 8006396:	4401      	add	r1, r0
 8006398:	1850      	adds	r0, r2, r1
 800639a:	4283      	cmp	r3, r0
 800639c:	6011      	str	r1, [r2, #0]
 800639e:	d1e0      	bne.n	8006362 <_free_r+0x22>
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	6053      	str	r3, [r2, #4]
 80063a6:	4408      	add	r0, r1
 80063a8:	6010      	str	r0, [r2, #0]
 80063aa:	e7da      	b.n	8006362 <_free_r+0x22>
 80063ac:	d902      	bls.n	80063b4 <_free_r+0x74>
 80063ae:	230c      	movs	r3, #12
 80063b0:	602b      	str	r3, [r5, #0]
 80063b2:	e7d6      	b.n	8006362 <_free_r+0x22>
 80063b4:	6820      	ldr	r0, [r4, #0]
 80063b6:	1821      	adds	r1, r4, r0
 80063b8:	428b      	cmp	r3, r1
 80063ba:	bf04      	itt	eq
 80063bc:	6819      	ldreq	r1, [r3, #0]
 80063be:	685b      	ldreq	r3, [r3, #4]
 80063c0:	6063      	str	r3, [r4, #4]
 80063c2:	bf04      	itt	eq
 80063c4:	1809      	addeq	r1, r1, r0
 80063c6:	6021      	streq	r1, [r4, #0]
 80063c8:	6054      	str	r4, [r2, #4]
 80063ca:	e7ca      	b.n	8006362 <_free_r+0x22>
 80063cc:	bd38      	pop	{r3, r4, r5, pc}
 80063ce:	bf00      	nop
 80063d0:	20000394 	.word	0x20000394

080063d4 <malloc>:
 80063d4:	4b02      	ldr	r3, [pc, #8]	@ (80063e0 <malloc+0xc>)
 80063d6:	4601      	mov	r1, r0
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	f000 b825 	b.w	8006428 <_malloc_r>
 80063de:	bf00      	nop
 80063e0:	20000018 	.word	0x20000018

080063e4 <sbrk_aligned>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006424 <sbrk_aligned+0x40>)
 80063e8:	460c      	mov	r4, r1
 80063ea:	6831      	ldr	r1, [r6, #0]
 80063ec:	4605      	mov	r5, r0
 80063ee:	b911      	cbnz	r1, 80063f6 <sbrk_aligned+0x12>
 80063f0:	f000 fe92 	bl	8007118 <_sbrk_r>
 80063f4:	6030      	str	r0, [r6, #0]
 80063f6:	4621      	mov	r1, r4
 80063f8:	4628      	mov	r0, r5
 80063fa:	f000 fe8d 	bl	8007118 <_sbrk_r>
 80063fe:	1c43      	adds	r3, r0, #1
 8006400:	d103      	bne.n	800640a <sbrk_aligned+0x26>
 8006402:	f04f 34ff 	mov.w	r4, #4294967295
 8006406:	4620      	mov	r0, r4
 8006408:	bd70      	pop	{r4, r5, r6, pc}
 800640a:	1cc4      	adds	r4, r0, #3
 800640c:	f024 0403 	bic.w	r4, r4, #3
 8006410:	42a0      	cmp	r0, r4
 8006412:	d0f8      	beq.n	8006406 <sbrk_aligned+0x22>
 8006414:	1a21      	subs	r1, r4, r0
 8006416:	4628      	mov	r0, r5
 8006418:	f000 fe7e 	bl	8007118 <_sbrk_r>
 800641c:	3001      	adds	r0, #1
 800641e:	d1f2      	bne.n	8006406 <sbrk_aligned+0x22>
 8006420:	e7ef      	b.n	8006402 <sbrk_aligned+0x1e>
 8006422:	bf00      	nop
 8006424:	20000390 	.word	0x20000390

08006428 <_malloc_r>:
 8006428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800642c:	1ccd      	adds	r5, r1, #3
 800642e:	f025 0503 	bic.w	r5, r5, #3
 8006432:	3508      	adds	r5, #8
 8006434:	2d0c      	cmp	r5, #12
 8006436:	bf38      	it	cc
 8006438:	250c      	movcc	r5, #12
 800643a:	2d00      	cmp	r5, #0
 800643c:	4606      	mov	r6, r0
 800643e:	db01      	blt.n	8006444 <_malloc_r+0x1c>
 8006440:	42a9      	cmp	r1, r5
 8006442:	d904      	bls.n	800644e <_malloc_r+0x26>
 8006444:	230c      	movs	r3, #12
 8006446:	6033      	str	r3, [r6, #0]
 8006448:	2000      	movs	r0, #0
 800644a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800644e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006524 <_malloc_r+0xfc>
 8006452:	f000 f869 	bl	8006528 <__malloc_lock>
 8006456:	f8d8 3000 	ldr.w	r3, [r8]
 800645a:	461c      	mov	r4, r3
 800645c:	bb44      	cbnz	r4, 80064b0 <_malloc_r+0x88>
 800645e:	4629      	mov	r1, r5
 8006460:	4630      	mov	r0, r6
 8006462:	f7ff ffbf 	bl	80063e4 <sbrk_aligned>
 8006466:	1c43      	adds	r3, r0, #1
 8006468:	4604      	mov	r4, r0
 800646a:	d158      	bne.n	800651e <_malloc_r+0xf6>
 800646c:	f8d8 4000 	ldr.w	r4, [r8]
 8006470:	4627      	mov	r7, r4
 8006472:	2f00      	cmp	r7, #0
 8006474:	d143      	bne.n	80064fe <_malloc_r+0xd6>
 8006476:	2c00      	cmp	r4, #0
 8006478:	d04b      	beq.n	8006512 <_malloc_r+0xea>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	4639      	mov	r1, r7
 800647e:	4630      	mov	r0, r6
 8006480:	eb04 0903 	add.w	r9, r4, r3
 8006484:	f000 fe48 	bl	8007118 <_sbrk_r>
 8006488:	4581      	cmp	r9, r0
 800648a:	d142      	bne.n	8006512 <_malloc_r+0xea>
 800648c:	6821      	ldr	r1, [r4, #0]
 800648e:	1a6d      	subs	r5, r5, r1
 8006490:	4629      	mov	r1, r5
 8006492:	4630      	mov	r0, r6
 8006494:	f7ff ffa6 	bl	80063e4 <sbrk_aligned>
 8006498:	3001      	adds	r0, #1
 800649a:	d03a      	beq.n	8006512 <_malloc_r+0xea>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	442b      	add	r3, r5
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	f8d8 3000 	ldr.w	r3, [r8]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	bb62      	cbnz	r2, 8006504 <_malloc_r+0xdc>
 80064aa:	f8c8 7000 	str.w	r7, [r8]
 80064ae:	e00f      	b.n	80064d0 <_malloc_r+0xa8>
 80064b0:	6822      	ldr	r2, [r4, #0]
 80064b2:	1b52      	subs	r2, r2, r5
 80064b4:	d420      	bmi.n	80064f8 <_malloc_r+0xd0>
 80064b6:	2a0b      	cmp	r2, #11
 80064b8:	d917      	bls.n	80064ea <_malloc_r+0xc2>
 80064ba:	1961      	adds	r1, r4, r5
 80064bc:	42a3      	cmp	r3, r4
 80064be:	6025      	str	r5, [r4, #0]
 80064c0:	bf18      	it	ne
 80064c2:	6059      	strne	r1, [r3, #4]
 80064c4:	6863      	ldr	r3, [r4, #4]
 80064c6:	bf08      	it	eq
 80064c8:	f8c8 1000 	streq.w	r1, [r8]
 80064cc:	5162      	str	r2, [r4, r5]
 80064ce:	604b      	str	r3, [r1, #4]
 80064d0:	4630      	mov	r0, r6
 80064d2:	f000 f82f 	bl	8006534 <__malloc_unlock>
 80064d6:	f104 000b 	add.w	r0, r4, #11
 80064da:	1d23      	adds	r3, r4, #4
 80064dc:	f020 0007 	bic.w	r0, r0, #7
 80064e0:	1ac2      	subs	r2, r0, r3
 80064e2:	bf1c      	itt	ne
 80064e4:	1a1b      	subne	r3, r3, r0
 80064e6:	50a3      	strne	r3, [r4, r2]
 80064e8:	e7af      	b.n	800644a <_malloc_r+0x22>
 80064ea:	6862      	ldr	r2, [r4, #4]
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	bf0c      	ite	eq
 80064f0:	f8c8 2000 	streq.w	r2, [r8]
 80064f4:	605a      	strne	r2, [r3, #4]
 80064f6:	e7eb      	b.n	80064d0 <_malloc_r+0xa8>
 80064f8:	4623      	mov	r3, r4
 80064fa:	6864      	ldr	r4, [r4, #4]
 80064fc:	e7ae      	b.n	800645c <_malloc_r+0x34>
 80064fe:	463c      	mov	r4, r7
 8006500:	687f      	ldr	r7, [r7, #4]
 8006502:	e7b6      	b.n	8006472 <_malloc_r+0x4a>
 8006504:	461a      	mov	r2, r3
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	42a3      	cmp	r3, r4
 800650a:	d1fb      	bne.n	8006504 <_malloc_r+0xdc>
 800650c:	2300      	movs	r3, #0
 800650e:	6053      	str	r3, [r2, #4]
 8006510:	e7de      	b.n	80064d0 <_malloc_r+0xa8>
 8006512:	230c      	movs	r3, #12
 8006514:	6033      	str	r3, [r6, #0]
 8006516:	4630      	mov	r0, r6
 8006518:	f000 f80c 	bl	8006534 <__malloc_unlock>
 800651c:	e794      	b.n	8006448 <_malloc_r+0x20>
 800651e:	6005      	str	r5, [r0, #0]
 8006520:	e7d6      	b.n	80064d0 <_malloc_r+0xa8>
 8006522:	bf00      	nop
 8006524:	20000394 	.word	0x20000394

08006528 <__malloc_lock>:
 8006528:	4801      	ldr	r0, [pc, #4]	@ (8006530 <__malloc_lock+0x8>)
 800652a:	f7ff b8a6 	b.w	800567a <__retarget_lock_acquire_recursive>
 800652e:	bf00      	nop
 8006530:	2000038c 	.word	0x2000038c

08006534 <__malloc_unlock>:
 8006534:	4801      	ldr	r0, [pc, #4]	@ (800653c <__malloc_unlock+0x8>)
 8006536:	f7ff b8a1 	b.w	800567c <__retarget_lock_release_recursive>
 800653a:	bf00      	nop
 800653c:	2000038c 	.word	0x2000038c

08006540 <_Balloc>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	69c6      	ldr	r6, [r0, #28]
 8006544:	4604      	mov	r4, r0
 8006546:	460d      	mov	r5, r1
 8006548:	b976      	cbnz	r6, 8006568 <_Balloc+0x28>
 800654a:	2010      	movs	r0, #16
 800654c:	f7ff ff42 	bl	80063d4 <malloc>
 8006550:	4602      	mov	r2, r0
 8006552:	61e0      	str	r0, [r4, #28]
 8006554:	b920      	cbnz	r0, 8006560 <_Balloc+0x20>
 8006556:	4b18      	ldr	r3, [pc, #96]	@ (80065b8 <_Balloc+0x78>)
 8006558:	4818      	ldr	r0, [pc, #96]	@ (80065bc <_Balloc+0x7c>)
 800655a:	216b      	movs	r1, #107	@ 0x6b
 800655c:	f000 fdec 	bl	8007138 <__assert_func>
 8006560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006564:	6006      	str	r6, [r0, #0]
 8006566:	60c6      	str	r6, [r0, #12]
 8006568:	69e6      	ldr	r6, [r4, #28]
 800656a:	68f3      	ldr	r3, [r6, #12]
 800656c:	b183      	cbz	r3, 8006590 <_Balloc+0x50>
 800656e:	69e3      	ldr	r3, [r4, #28]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006576:	b9b8      	cbnz	r0, 80065a8 <_Balloc+0x68>
 8006578:	2101      	movs	r1, #1
 800657a:	fa01 f605 	lsl.w	r6, r1, r5
 800657e:	1d72      	adds	r2, r6, #5
 8006580:	0092      	lsls	r2, r2, #2
 8006582:	4620      	mov	r0, r4
 8006584:	f000 fdf6 	bl	8007174 <_calloc_r>
 8006588:	b160      	cbz	r0, 80065a4 <_Balloc+0x64>
 800658a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800658e:	e00e      	b.n	80065ae <_Balloc+0x6e>
 8006590:	2221      	movs	r2, #33	@ 0x21
 8006592:	2104      	movs	r1, #4
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fded 	bl	8007174 <_calloc_r>
 800659a:	69e3      	ldr	r3, [r4, #28]
 800659c:	60f0      	str	r0, [r6, #12]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e4      	bne.n	800656e <_Balloc+0x2e>
 80065a4:	2000      	movs	r0, #0
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	6802      	ldr	r2, [r0, #0]
 80065aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065ae:	2300      	movs	r3, #0
 80065b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065b4:	e7f7      	b.n	80065a6 <_Balloc+0x66>
 80065b6:	bf00      	nop
 80065b8:	0800739d 	.word	0x0800739d
 80065bc:	0800741d 	.word	0x0800741d

080065c0 <_Bfree>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	69c6      	ldr	r6, [r0, #28]
 80065c4:	4605      	mov	r5, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	b976      	cbnz	r6, 80065e8 <_Bfree+0x28>
 80065ca:	2010      	movs	r0, #16
 80065cc:	f7ff ff02 	bl	80063d4 <malloc>
 80065d0:	4602      	mov	r2, r0
 80065d2:	61e8      	str	r0, [r5, #28]
 80065d4:	b920      	cbnz	r0, 80065e0 <_Bfree+0x20>
 80065d6:	4b09      	ldr	r3, [pc, #36]	@ (80065fc <_Bfree+0x3c>)
 80065d8:	4809      	ldr	r0, [pc, #36]	@ (8006600 <_Bfree+0x40>)
 80065da:	218f      	movs	r1, #143	@ 0x8f
 80065dc:	f000 fdac 	bl	8007138 <__assert_func>
 80065e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065e4:	6006      	str	r6, [r0, #0]
 80065e6:	60c6      	str	r6, [r0, #12]
 80065e8:	b13c      	cbz	r4, 80065fa <_Bfree+0x3a>
 80065ea:	69eb      	ldr	r3, [r5, #28]
 80065ec:	6862      	ldr	r2, [r4, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065f4:	6021      	str	r1, [r4, #0]
 80065f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	0800739d 	.word	0x0800739d
 8006600:	0800741d 	.word	0x0800741d

08006604 <__multadd>:
 8006604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006608:	690d      	ldr	r5, [r1, #16]
 800660a:	4607      	mov	r7, r0
 800660c:	460c      	mov	r4, r1
 800660e:	461e      	mov	r6, r3
 8006610:	f101 0c14 	add.w	ip, r1, #20
 8006614:	2000      	movs	r0, #0
 8006616:	f8dc 3000 	ldr.w	r3, [ip]
 800661a:	b299      	uxth	r1, r3
 800661c:	fb02 6101 	mla	r1, r2, r1, r6
 8006620:	0c1e      	lsrs	r6, r3, #16
 8006622:	0c0b      	lsrs	r3, r1, #16
 8006624:	fb02 3306 	mla	r3, r2, r6, r3
 8006628:	b289      	uxth	r1, r1
 800662a:	3001      	adds	r0, #1
 800662c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006630:	4285      	cmp	r5, r0
 8006632:	f84c 1b04 	str.w	r1, [ip], #4
 8006636:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800663a:	dcec      	bgt.n	8006616 <__multadd+0x12>
 800663c:	b30e      	cbz	r6, 8006682 <__multadd+0x7e>
 800663e:	68a3      	ldr	r3, [r4, #8]
 8006640:	42ab      	cmp	r3, r5
 8006642:	dc19      	bgt.n	8006678 <__multadd+0x74>
 8006644:	6861      	ldr	r1, [r4, #4]
 8006646:	4638      	mov	r0, r7
 8006648:	3101      	adds	r1, #1
 800664a:	f7ff ff79 	bl	8006540 <_Balloc>
 800664e:	4680      	mov	r8, r0
 8006650:	b928      	cbnz	r0, 800665e <__multadd+0x5a>
 8006652:	4602      	mov	r2, r0
 8006654:	4b0c      	ldr	r3, [pc, #48]	@ (8006688 <__multadd+0x84>)
 8006656:	480d      	ldr	r0, [pc, #52]	@ (800668c <__multadd+0x88>)
 8006658:	21ba      	movs	r1, #186	@ 0xba
 800665a:	f000 fd6d 	bl	8007138 <__assert_func>
 800665e:	6922      	ldr	r2, [r4, #16]
 8006660:	3202      	adds	r2, #2
 8006662:	f104 010c 	add.w	r1, r4, #12
 8006666:	0092      	lsls	r2, r2, #2
 8006668:	300c      	adds	r0, #12
 800666a:	f7ff f808 	bl	800567e <memcpy>
 800666e:	4621      	mov	r1, r4
 8006670:	4638      	mov	r0, r7
 8006672:	f7ff ffa5 	bl	80065c0 <_Bfree>
 8006676:	4644      	mov	r4, r8
 8006678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800667c:	3501      	adds	r5, #1
 800667e:	615e      	str	r6, [r3, #20]
 8006680:	6125      	str	r5, [r4, #16]
 8006682:	4620      	mov	r0, r4
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006688:	0800740c 	.word	0x0800740c
 800668c:	0800741d 	.word	0x0800741d

08006690 <__hi0bits>:
 8006690:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006694:	4603      	mov	r3, r0
 8006696:	bf36      	itet	cc
 8006698:	0403      	lslcc	r3, r0, #16
 800669a:	2000      	movcs	r0, #0
 800669c:	2010      	movcc	r0, #16
 800669e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066a2:	bf3c      	itt	cc
 80066a4:	021b      	lslcc	r3, r3, #8
 80066a6:	3008      	addcc	r0, #8
 80066a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ac:	bf3c      	itt	cc
 80066ae:	011b      	lslcc	r3, r3, #4
 80066b0:	3004      	addcc	r0, #4
 80066b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b6:	bf3c      	itt	cc
 80066b8:	009b      	lslcc	r3, r3, #2
 80066ba:	3002      	addcc	r0, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	db05      	blt.n	80066cc <__hi0bits+0x3c>
 80066c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066c4:	f100 0001 	add.w	r0, r0, #1
 80066c8:	bf08      	it	eq
 80066ca:	2020      	moveq	r0, #32
 80066cc:	4770      	bx	lr

080066ce <__lo0bits>:
 80066ce:	6803      	ldr	r3, [r0, #0]
 80066d0:	4602      	mov	r2, r0
 80066d2:	f013 0007 	ands.w	r0, r3, #7
 80066d6:	d00b      	beq.n	80066f0 <__lo0bits+0x22>
 80066d8:	07d9      	lsls	r1, r3, #31
 80066da:	d421      	bmi.n	8006720 <__lo0bits+0x52>
 80066dc:	0798      	lsls	r0, r3, #30
 80066de:	bf49      	itett	mi
 80066e0:	085b      	lsrmi	r3, r3, #1
 80066e2:	089b      	lsrpl	r3, r3, #2
 80066e4:	2001      	movmi	r0, #1
 80066e6:	6013      	strmi	r3, [r2, #0]
 80066e8:	bf5c      	itt	pl
 80066ea:	6013      	strpl	r3, [r2, #0]
 80066ec:	2002      	movpl	r0, #2
 80066ee:	4770      	bx	lr
 80066f0:	b299      	uxth	r1, r3
 80066f2:	b909      	cbnz	r1, 80066f8 <__lo0bits+0x2a>
 80066f4:	0c1b      	lsrs	r3, r3, #16
 80066f6:	2010      	movs	r0, #16
 80066f8:	b2d9      	uxtb	r1, r3
 80066fa:	b909      	cbnz	r1, 8006700 <__lo0bits+0x32>
 80066fc:	3008      	adds	r0, #8
 80066fe:	0a1b      	lsrs	r3, r3, #8
 8006700:	0719      	lsls	r1, r3, #28
 8006702:	bf04      	itt	eq
 8006704:	091b      	lsreq	r3, r3, #4
 8006706:	3004      	addeq	r0, #4
 8006708:	0799      	lsls	r1, r3, #30
 800670a:	bf04      	itt	eq
 800670c:	089b      	lsreq	r3, r3, #2
 800670e:	3002      	addeq	r0, #2
 8006710:	07d9      	lsls	r1, r3, #31
 8006712:	d403      	bmi.n	800671c <__lo0bits+0x4e>
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	f100 0001 	add.w	r0, r0, #1
 800671a:	d003      	beq.n	8006724 <__lo0bits+0x56>
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	4770      	bx	lr
 8006720:	2000      	movs	r0, #0
 8006722:	4770      	bx	lr
 8006724:	2020      	movs	r0, #32
 8006726:	4770      	bx	lr

08006728 <__i2b>:
 8006728:	b510      	push	{r4, lr}
 800672a:	460c      	mov	r4, r1
 800672c:	2101      	movs	r1, #1
 800672e:	f7ff ff07 	bl	8006540 <_Balloc>
 8006732:	4602      	mov	r2, r0
 8006734:	b928      	cbnz	r0, 8006742 <__i2b+0x1a>
 8006736:	4b05      	ldr	r3, [pc, #20]	@ (800674c <__i2b+0x24>)
 8006738:	4805      	ldr	r0, [pc, #20]	@ (8006750 <__i2b+0x28>)
 800673a:	f240 1145 	movw	r1, #325	@ 0x145
 800673e:	f000 fcfb 	bl	8007138 <__assert_func>
 8006742:	2301      	movs	r3, #1
 8006744:	6144      	str	r4, [r0, #20]
 8006746:	6103      	str	r3, [r0, #16]
 8006748:	bd10      	pop	{r4, pc}
 800674a:	bf00      	nop
 800674c:	0800740c 	.word	0x0800740c
 8006750:	0800741d 	.word	0x0800741d

08006754 <__multiply>:
 8006754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	4614      	mov	r4, r2
 800675a:	690a      	ldr	r2, [r1, #16]
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	429a      	cmp	r2, r3
 8006760:	bfa8      	it	ge
 8006762:	4623      	movge	r3, r4
 8006764:	460f      	mov	r7, r1
 8006766:	bfa4      	itt	ge
 8006768:	460c      	movge	r4, r1
 800676a:	461f      	movge	r7, r3
 800676c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006770:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006774:	68a3      	ldr	r3, [r4, #8]
 8006776:	6861      	ldr	r1, [r4, #4]
 8006778:	eb0a 0609 	add.w	r6, sl, r9
 800677c:	42b3      	cmp	r3, r6
 800677e:	b085      	sub	sp, #20
 8006780:	bfb8      	it	lt
 8006782:	3101      	addlt	r1, #1
 8006784:	f7ff fedc 	bl	8006540 <_Balloc>
 8006788:	b930      	cbnz	r0, 8006798 <__multiply+0x44>
 800678a:	4602      	mov	r2, r0
 800678c:	4b44      	ldr	r3, [pc, #272]	@ (80068a0 <__multiply+0x14c>)
 800678e:	4845      	ldr	r0, [pc, #276]	@ (80068a4 <__multiply+0x150>)
 8006790:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006794:	f000 fcd0 	bl	8007138 <__assert_func>
 8006798:	f100 0514 	add.w	r5, r0, #20
 800679c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067a0:	462b      	mov	r3, r5
 80067a2:	2200      	movs	r2, #0
 80067a4:	4543      	cmp	r3, r8
 80067a6:	d321      	bcc.n	80067ec <__multiply+0x98>
 80067a8:	f107 0114 	add.w	r1, r7, #20
 80067ac:	f104 0214 	add.w	r2, r4, #20
 80067b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80067b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80067b8:	9302      	str	r3, [sp, #8]
 80067ba:	1b13      	subs	r3, r2, r4
 80067bc:	3b15      	subs	r3, #21
 80067be:	f023 0303 	bic.w	r3, r3, #3
 80067c2:	3304      	adds	r3, #4
 80067c4:	f104 0715 	add.w	r7, r4, #21
 80067c8:	42ba      	cmp	r2, r7
 80067ca:	bf38      	it	cc
 80067cc:	2304      	movcc	r3, #4
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	9b02      	ldr	r3, [sp, #8]
 80067d2:	9103      	str	r1, [sp, #12]
 80067d4:	428b      	cmp	r3, r1
 80067d6:	d80c      	bhi.n	80067f2 <__multiply+0x9e>
 80067d8:	2e00      	cmp	r6, #0
 80067da:	dd03      	ble.n	80067e4 <__multiply+0x90>
 80067dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d05a      	beq.n	800689a <__multiply+0x146>
 80067e4:	6106      	str	r6, [r0, #16]
 80067e6:	b005      	add	sp, #20
 80067e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ec:	f843 2b04 	str.w	r2, [r3], #4
 80067f0:	e7d8      	b.n	80067a4 <__multiply+0x50>
 80067f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80067f6:	f1ba 0f00 	cmp.w	sl, #0
 80067fa:	d023      	beq.n	8006844 <__multiply+0xf0>
 80067fc:	f104 0e14 	add.w	lr, r4, #20
 8006800:	46a9      	mov	r9, r5
 8006802:	f04f 0c00 	mov.w	ip, #0
 8006806:	f85e 7b04 	ldr.w	r7, [lr], #4
 800680a:	f8d9 3000 	ldr.w	r3, [r9]
 800680e:	fa1f fb87 	uxth.w	fp, r7
 8006812:	b29b      	uxth	r3, r3
 8006814:	fb0a 330b 	mla	r3, sl, fp, r3
 8006818:	4463      	add	r3, ip
 800681a:	f8d9 c000 	ldr.w	ip, [r9]
 800681e:	0c3f      	lsrs	r7, r7, #16
 8006820:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006824:	fb0a c707 	mla	r7, sl, r7, ip
 8006828:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800682c:	b29b      	uxth	r3, r3
 800682e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006832:	4572      	cmp	r2, lr
 8006834:	f849 3b04 	str.w	r3, [r9], #4
 8006838:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800683c:	d8e3      	bhi.n	8006806 <__multiply+0xb2>
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	f845 c003 	str.w	ip, [r5, r3]
 8006844:	9b03      	ldr	r3, [sp, #12]
 8006846:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800684a:	3104      	adds	r1, #4
 800684c:	f1b9 0f00 	cmp.w	r9, #0
 8006850:	d021      	beq.n	8006896 <__multiply+0x142>
 8006852:	682b      	ldr	r3, [r5, #0]
 8006854:	f104 0c14 	add.w	ip, r4, #20
 8006858:	46ae      	mov	lr, r5
 800685a:	f04f 0a00 	mov.w	sl, #0
 800685e:	f8bc b000 	ldrh.w	fp, [ip]
 8006862:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006866:	fb09 770b 	mla	r7, r9, fp, r7
 800686a:	4457      	add	r7, sl
 800686c:	b29b      	uxth	r3, r3
 800686e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006872:	f84e 3b04 	str.w	r3, [lr], #4
 8006876:	f85c 3b04 	ldr.w	r3, [ip], #4
 800687a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800687e:	f8be 3000 	ldrh.w	r3, [lr]
 8006882:	fb09 330a 	mla	r3, r9, sl, r3
 8006886:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800688a:	4562      	cmp	r2, ip
 800688c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006890:	d8e5      	bhi.n	800685e <__multiply+0x10a>
 8006892:	9f01      	ldr	r7, [sp, #4]
 8006894:	51eb      	str	r3, [r5, r7]
 8006896:	3504      	adds	r5, #4
 8006898:	e79a      	b.n	80067d0 <__multiply+0x7c>
 800689a:	3e01      	subs	r6, #1
 800689c:	e79c      	b.n	80067d8 <__multiply+0x84>
 800689e:	bf00      	nop
 80068a0:	0800740c 	.word	0x0800740c
 80068a4:	0800741d 	.word	0x0800741d

080068a8 <__pow5mult>:
 80068a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068ac:	4615      	mov	r5, r2
 80068ae:	f012 0203 	ands.w	r2, r2, #3
 80068b2:	4607      	mov	r7, r0
 80068b4:	460e      	mov	r6, r1
 80068b6:	d007      	beq.n	80068c8 <__pow5mult+0x20>
 80068b8:	4c25      	ldr	r4, [pc, #148]	@ (8006950 <__pow5mult+0xa8>)
 80068ba:	3a01      	subs	r2, #1
 80068bc:	2300      	movs	r3, #0
 80068be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068c2:	f7ff fe9f 	bl	8006604 <__multadd>
 80068c6:	4606      	mov	r6, r0
 80068c8:	10ad      	asrs	r5, r5, #2
 80068ca:	d03d      	beq.n	8006948 <__pow5mult+0xa0>
 80068cc:	69fc      	ldr	r4, [r7, #28]
 80068ce:	b97c      	cbnz	r4, 80068f0 <__pow5mult+0x48>
 80068d0:	2010      	movs	r0, #16
 80068d2:	f7ff fd7f 	bl	80063d4 <malloc>
 80068d6:	4602      	mov	r2, r0
 80068d8:	61f8      	str	r0, [r7, #28]
 80068da:	b928      	cbnz	r0, 80068e8 <__pow5mult+0x40>
 80068dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006954 <__pow5mult+0xac>)
 80068de:	481e      	ldr	r0, [pc, #120]	@ (8006958 <__pow5mult+0xb0>)
 80068e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80068e4:	f000 fc28 	bl	8007138 <__assert_func>
 80068e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068ec:	6004      	str	r4, [r0, #0]
 80068ee:	60c4      	str	r4, [r0, #12]
 80068f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80068f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068f8:	b94c      	cbnz	r4, 800690e <__pow5mult+0x66>
 80068fa:	f240 2171 	movw	r1, #625	@ 0x271
 80068fe:	4638      	mov	r0, r7
 8006900:	f7ff ff12 	bl	8006728 <__i2b>
 8006904:	2300      	movs	r3, #0
 8006906:	f8c8 0008 	str.w	r0, [r8, #8]
 800690a:	4604      	mov	r4, r0
 800690c:	6003      	str	r3, [r0, #0]
 800690e:	f04f 0900 	mov.w	r9, #0
 8006912:	07eb      	lsls	r3, r5, #31
 8006914:	d50a      	bpl.n	800692c <__pow5mult+0x84>
 8006916:	4631      	mov	r1, r6
 8006918:	4622      	mov	r2, r4
 800691a:	4638      	mov	r0, r7
 800691c:	f7ff ff1a 	bl	8006754 <__multiply>
 8006920:	4631      	mov	r1, r6
 8006922:	4680      	mov	r8, r0
 8006924:	4638      	mov	r0, r7
 8006926:	f7ff fe4b 	bl	80065c0 <_Bfree>
 800692a:	4646      	mov	r6, r8
 800692c:	106d      	asrs	r5, r5, #1
 800692e:	d00b      	beq.n	8006948 <__pow5mult+0xa0>
 8006930:	6820      	ldr	r0, [r4, #0]
 8006932:	b938      	cbnz	r0, 8006944 <__pow5mult+0x9c>
 8006934:	4622      	mov	r2, r4
 8006936:	4621      	mov	r1, r4
 8006938:	4638      	mov	r0, r7
 800693a:	f7ff ff0b 	bl	8006754 <__multiply>
 800693e:	6020      	str	r0, [r4, #0]
 8006940:	f8c0 9000 	str.w	r9, [r0]
 8006944:	4604      	mov	r4, r0
 8006946:	e7e4      	b.n	8006912 <__pow5mult+0x6a>
 8006948:	4630      	mov	r0, r6
 800694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800694e:	bf00      	nop
 8006950:	08007478 	.word	0x08007478
 8006954:	0800739d 	.word	0x0800739d
 8006958:	0800741d 	.word	0x0800741d

0800695c <__lshift>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	460c      	mov	r4, r1
 8006962:	6849      	ldr	r1, [r1, #4]
 8006964:	6923      	ldr	r3, [r4, #16]
 8006966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800696a:	68a3      	ldr	r3, [r4, #8]
 800696c:	4607      	mov	r7, r0
 800696e:	4691      	mov	r9, r2
 8006970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006974:	f108 0601 	add.w	r6, r8, #1
 8006978:	42b3      	cmp	r3, r6
 800697a:	db0b      	blt.n	8006994 <__lshift+0x38>
 800697c:	4638      	mov	r0, r7
 800697e:	f7ff fddf 	bl	8006540 <_Balloc>
 8006982:	4605      	mov	r5, r0
 8006984:	b948      	cbnz	r0, 800699a <__lshift+0x3e>
 8006986:	4602      	mov	r2, r0
 8006988:	4b28      	ldr	r3, [pc, #160]	@ (8006a2c <__lshift+0xd0>)
 800698a:	4829      	ldr	r0, [pc, #164]	@ (8006a30 <__lshift+0xd4>)
 800698c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006990:	f000 fbd2 	bl	8007138 <__assert_func>
 8006994:	3101      	adds	r1, #1
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	e7ee      	b.n	8006978 <__lshift+0x1c>
 800699a:	2300      	movs	r3, #0
 800699c:	f100 0114 	add.w	r1, r0, #20
 80069a0:	f100 0210 	add.w	r2, r0, #16
 80069a4:	4618      	mov	r0, r3
 80069a6:	4553      	cmp	r3, sl
 80069a8:	db33      	blt.n	8006a12 <__lshift+0xb6>
 80069aa:	6920      	ldr	r0, [r4, #16]
 80069ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069b0:	f104 0314 	add.w	r3, r4, #20
 80069b4:	f019 091f 	ands.w	r9, r9, #31
 80069b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069c0:	d02b      	beq.n	8006a1a <__lshift+0xbe>
 80069c2:	f1c9 0e20 	rsb	lr, r9, #32
 80069c6:	468a      	mov	sl, r1
 80069c8:	2200      	movs	r2, #0
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	fa00 f009 	lsl.w	r0, r0, r9
 80069d0:	4310      	orrs	r0, r2
 80069d2:	f84a 0b04 	str.w	r0, [sl], #4
 80069d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069da:	459c      	cmp	ip, r3
 80069dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80069e0:	d8f3      	bhi.n	80069ca <__lshift+0x6e>
 80069e2:	ebac 0304 	sub.w	r3, ip, r4
 80069e6:	3b15      	subs	r3, #21
 80069e8:	f023 0303 	bic.w	r3, r3, #3
 80069ec:	3304      	adds	r3, #4
 80069ee:	f104 0015 	add.w	r0, r4, #21
 80069f2:	4584      	cmp	ip, r0
 80069f4:	bf38      	it	cc
 80069f6:	2304      	movcc	r3, #4
 80069f8:	50ca      	str	r2, [r1, r3]
 80069fa:	b10a      	cbz	r2, 8006a00 <__lshift+0xa4>
 80069fc:	f108 0602 	add.w	r6, r8, #2
 8006a00:	3e01      	subs	r6, #1
 8006a02:	4638      	mov	r0, r7
 8006a04:	612e      	str	r6, [r5, #16]
 8006a06:	4621      	mov	r1, r4
 8006a08:	f7ff fdda 	bl	80065c0 <_Bfree>
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a12:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a16:	3301      	adds	r3, #1
 8006a18:	e7c5      	b.n	80069a6 <__lshift+0x4a>
 8006a1a:	3904      	subs	r1, #4
 8006a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a20:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a24:	459c      	cmp	ip, r3
 8006a26:	d8f9      	bhi.n	8006a1c <__lshift+0xc0>
 8006a28:	e7ea      	b.n	8006a00 <__lshift+0xa4>
 8006a2a:	bf00      	nop
 8006a2c:	0800740c 	.word	0x0800740c
 8006a30:	0800741d 	.word	0x0800741d

08006a34 <__mcmp>:
 8006a34:	690a      	ldr	r2, [r1, #16]
 8006a36:	4603      	mov	r3, r0
 8006a38:	6900      	ldr	r0, [r0, #16]
 8006a3a:	1a80      	subs	r0, r0, r2
 8006a3c:	b530      	push	{r4, r5, lr}
 8006a3e:	d10e      	bne.n	8006a5e <__mcmp+0x2a>
 8006a40:	3314      	adds	r3, #20
 8006a42:	3114      	adds	r1, #20
 8006a44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a54:	4295      	cmp	r5, r2
 8006a56:	d003      	beq.n	8006a60 <__mcmp+0x2c>
 8006a58:	d205      	bcs.n	8006a66 <__mcmp+0x32>
 8006a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5e:	bd30      	pop	{r4, r5, pc}
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d3f3      	bcc.n	8006a4c <__mcmp+0x18>
 8006a64:	e7fb      	b.n	8006a5e <__mcmp+0x2a>
 8006a66:	2001      	movs	r0, #1
 8006a68:	e7f9      	b.n	8006a5e <__mcmp+0x2a>
	...

08006a6c <__mdiff>:
 8006a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a70:	4689      	mov	r9, r1
 8006a72:	4606      	mov	r6, r0
 8006a74:	4611      	mov	r1, r2
 8006a76:	4648      	mov	r0, r9
 8006a78:	4614      	mov	r4, r2
 8006a7a:	f7ff ffdb 	bl	8006a34 <__mcmp>
 8006a7e:	1e05      	subs	r5, r0, #0
 8006a80:	d112      	bne.n	8006aa8 <__mdiff+0x3c>
 8006a82:	4629      	mov	r1, r5
 8006a84:	4630      	mov	r0, r6
 8006a86:	f7ff fd5b 	bl	8006540 <_Balloc>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	b928      	cbnz	r0, 8006a9a <__mdiff+0x2e>
 8006a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b88 <__mdiff+0x11c>)
 8006a90:	f240 2137 	movw	r1, #567	@ 0x237
 8006a94:	483d      	ldr	r0, [pc, #244]	@ (8006b8c <__mdiff+0x120>)
 8006a96:	f000 fb4f 	bl	8007138 <__assert_func>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	b003      	add	sp, #12
 8006aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa8:	bfbc      	itt	lt
 8006aaa:	464b      	movlt	r3, r9
 8006aac:	46a1      	movlt	r9, r4
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ab4:	bfba      	itte	lt
 8006ab6:	461c      	movlt	r4, r3
 8006ab8:	2501      	movlt	r5, #1
 8006aba:	2500      	movge	r5, #0
 8006abc:	f7ff fd40 	bl	8006540 <_Balloc>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	b918      	cbnz	r0, 8006acc <__mdiff+0x60>
 8006ac4:	4b30      	ldr	r3, [pc, #192]	@ (8006b88 <__mdiff+0x11c>)
 8006ac6:	f240 2145 	movw	r1, #581	@ 0x245
 8006aca:	e7e3      	b.n	8006a94 <__mdiff+0x28>
 8006acc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ad0:	6926      	ldr	r6, [r4, #16]
 8006ad2:	60c5      	str	r5, [r0, #12]
 8006ad4:	f109 0310 	add.w	r3, r9, #16
 8006ad8:	f109 0514 	add.w	r5, r9, #20
 8006adc:	f104 0e14 	add.w	lr, r4, #20
 8006ae0:	f100 0b14 	add.w	fp, r0, #20
 8006ae4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ae8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	46d9      	mov	r9, fp
 8006af0:	f04f 0c00 	mov.w	ip, #0
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006afa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	b281      	uxth	r1, r0
 8006b02:	fa1f f38a 	uxth.w	r3, sl
 8006b06:	1a5b      	subs	r3, r3, r1
 8006b08:	0c00      	lsrs	r0, r0, #16
 8006b0a:	4463      	add	r3, ip
 8006b0c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b10:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b1a:	4576      	cmp	r6, lr
 8006b1c:	f849 3b04 	str.w	r3, [r9], #4
 8006b20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b24:	d8e6      	bhi.n	8006af4 <__mdiff+0x88>
 8006b26:	1b33      	subs	r3, r6, r4
 8006b28:	3b15      	subs	r3, #21
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	3415      	adds	r4, #21
 8006b30:	3304      	adds	r3, #4
 8006b32:	42a6      	cmp	r6, r4
 8006b34:	bf38      	it	cc
 8006b36:	2304      	movcc	r3, #4
 8006b38:	441d      	add	r5, r3
 8006b3a:	445b      	add	r3, fp
 8006b3c:	461e      	mov	r6, r3
 8006b3e:	462c      	mov	r4, r5
 8006b40:	4544      	cmp	r4, r8
 8006b42:	d30e      	bcc.n	8006b62 <__mdiff+0xf6>
 8006b44:	f108 0103 	add.w	r1, r8, #3
 8006b48:	1b49      	subs	r1, r1, r5
 8006b4a:	f021 0103 	bic.w	r1, r1, #3
 8006b4e:	3d03      	subs	r5, #3
 8006b50:	45a8      	cmp	r8, r5
 8006b52:	bf38      	it	cc
 8006b54:	2100      	movcc	r1, #0
 8006b56:	440b      	add	r3, r1
 8006b58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b5c:	b191      	cbz	r1, 8006b84 <__mdiff+0x118>
 8006b5e:	6117      	str	r7, [r2, #16]
 8006b60:	e79e      	b.n	8006aa0 <__mdiff+0x34>
 8006b62:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b66:	46e6      	mov	lr, ip
 8006b68:	0c08      	lsrs	r0, r1, #16
 8006b6a:	fa1c fc81 	uxtah	ip, ip, r1
 8006b6e:	4471      	add	r1, lr
 8006b70:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b74:	b289      	uxth	r1, r1
 8006b76:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b7a:	f846 1b04 	str.w	r1, [r6], #4
 8006b7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b82:	e7dd      	b.n	8006b40 <__mdiff+0xd4>
 8006b84:	3f01      	subs	r7, #1
 8006b86:	e7e7      	b.n	8006b58 <__mdiff+0xec>
 8006b88:	0800740c 	.word	0x0800740c
 8006b8c:	0800741d 	.word	0x0800741d

08006b90 <__d2b>:
 8006b90:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006b94:	2101      	movs	r1, #1
 8006b96:	9e08      	ldr	r6, [sp, #32]
 8006b98:	4690      	mov	r8, r2
 8006b9a:	4699      	mov	r9, r3
 8006b9c:	f7ff fcd0 	bl	8006540 <_Balloc>
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	b930      	cbnz	r0, 8006bb2 <__d2b+0x22>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	4b24      	ldr	r3, [pc, #144]	@ (8006c38 <__d2b+0xa8>)
 8006ba8:	4824      	ldr	r0, [pc, #144]	@ (8006c3c <__d2b+0xac>)
 8006baa:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bae:	f000 fac3 	bl	8007138 <__assert_func>
 8006bb2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bba:	b10d      	cbz	r5, 8006bc0 <__d2b+0x30>
 8006bbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	f1b8 0300 	subs.w	r3, r8, #0
 8006bc6:	d024      	beq.n	8006c12 <__d2b+0x82>
 8006bc8:	4668      	mov	r0, sp
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	f7ff fd7f 	bl	80066ce <__lo0bits>
 8006bd0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006bd4:	b1d8      	cbz	r0, 8006c0e <__d2b+0x7e>
 8006bd6:	f1c0 0320 	rsb	r3, r0, #32
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	430b      	orrs	r3, r1
 8006be0:	40c2      	lsrs	r2, r0
 8006be2:	6163      	str	r3, [r4, #20]
 8006be4:	9201      	str	r2, [sp, #4]
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	61a3      	str	r3, [r4, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	bf0c      	ite	eq
 8006bee:	2201      	moveq	r2, #1
 8006bf0:	2202      	movne	r2, #2
 8006bf2:	6122      	str	r2, [r4, #16]
 8006bf4:	b1ad      	cbz	r5, 8006c22 <__d2b+0x92>
 8006bf6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006bfa:	4405      	add	r5, r0
 8006bfc:	6035      	str	r5, [r6, #0]
 8006bfe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c04:	6018      	str	r0, [r3, #0]
 8006c06:	4620      	mov	r0, r4
 8006c08:	b002      	add	sp, #8
 8006c0a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006c0e:	6161      	str	r1, [r4, #20]
 8006c10:	e7e9      	b.n	8006be6 <__d2b+0x56>
 8006c12:	a801      	add	r0, sp, #4
 8006c14:	f7ff fd5b 	bl	80066ce <__lo0bits>
 8006c18:	9b01      	ldr	r3, [sp, #4]
 8006c1a:	6163      	str	r3, [r4, #20]
 8006c1c:	3020      	adds	r0, #32
 8006c1e:	2201      	movs	r2, #1
 8006c20:	e7e7      	b.n	8006bf2 <__d2b+0x62>
 8006c22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c2a:	6030      	str	r0, [r6, #0]
 8006c2c:	6918      	ldr	r0, [r3, #16]
 8006c2e:	f7ff fd2f 	bl	8006690 <__hi0bits>
 8006c32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c36:	e7e4      	b.n	8006c02 <__d2b+0x72>
 8006c38:	0800740c 	.word	0x0800740c
 8006c3c:	0800741d 	.word	0x0800741d

08006c40 <__sfputc_r>:
 8006c40:	6893      	ldr	r3, [r2, #8]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	b410      	push	{r4}
 8006c48:	6093      	str	r3, [r2, #8]
 8006c4a:	da07      	bge.n	8006c5c <__sfputc_r+0x1c>
 8006c4c:	6994      	ldr	r4, [r2, #24]
 8006c4e:	42a3      	cmp	r3, r4
 8006c50:	db01      	blt.n	8006c56 <__sfputc_r+0x16>
 8006c52:	290a      	cmp	r1, #10
 8006c54:	d102      	bne.n	8006c5c <__sfputc_r+0x1c>
 8006c56:	bc10      	pop	{r4}
 8006c58:	f7fe bbfd 	b.w	8005456 <__swbuf_r>
 8006c5c:	6813      	ldr	r3, [r2, #0]
 8006c5e:	1c58      	adds	r0, r3, #1
 8006c60:	6010      	str	r0, [r2, #0]
 8006c62:	7019      	strb	r1, [r3, #0]
 8006c64:	4608      	mov	r0, r1
 8006c66:	bc10      	pop	{r4}
 8006c68:	4770      	bx	lr

08006c6a <__sfputs_r>:
 8006c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6c:	4606      	mov	r6, r0
 8006c6e:	460f      	mov	r7, r1
 8006c70:	4614      	mov	r4, r2
 8006c72:	18d5      	adds	r5, r2, r3
 8006c74:	42ac      	cmp	r4, r5
 8006c76:	d101      	bne.n	8006c7c <__sfputs_r+0x12>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	e007      	b.n	8006c8c <__sfputs_r+0x22>
 8006c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c80:	463a      	mov	r2, r7
 8006c82:	4630      	mov	r0, r6
 8006c84:	f7ff ffdc 	bl	8006c40 <__sfputc_r>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d1f3      	bne.n	8006c74 <__sfputs_r+0xa>
 8006c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c90 <_vfiprintf_r>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	460d      	mov	r5, r1
 8006c96:	b09d      	sub	sp, #116	@ 0x74
 8006c98:	4614      	mov	r4, r2
 8006c9a:	4698      	mov	r8, r3
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	b118      	cbz	r0, 8006ca8 <_vfiprintf_r+0x18>
 8006ca0:	6a03      	ldr	r3, [r0, #32]
 8006ca2:	b90b      	cbnz	r3, 8006ca8 <_vfiprintf_r+0x18>
 8006ca4:	f7fe faee 	bl	8005284 <__sinit>
 8006ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006caa:	07d9      	lsls	r1, r3, #31
 8006cac:	d405      	bmi.n	8006cba <_vfiprintf_r+0x2a>
 8006cae:	89ab      	ldrh	r3, [r5, #12]
 8006cb0:	059a      	lsls	r2, r3, #22
 8006cb2:	d402      	bmi.n	8006cba <_vfiprintf_r+0x2a>
 8006cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cb6:	f7fe fce0 	bl	800567a <__retarget_lock_acquire_recursive>
 8006cba:	89ab      	ldrh	r3, [r5, #12]
 8006cbc:	071b      	lsls	r3, r3, #28
 8006cbe:	d501      	bpl.n	8006cc4 <_vfiprintf_r+0x34>
 8006cc0:	692b      	ldr	r3, [r5, #16]
 8006cc2:	b99b      	cbnz	r3, 8006cec <_vfiprintf_r+0x5c>
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7fe fc04 	bl	80054d4 <__swsetup_r>
 8006ccc:	b170      	cbz	r0, 8006cec <_vfiprintf_r+0x5c>
 8006cce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cd0:	07dc      	lsls	r4, r3, #31
 8006cd2:	d504      	bpl.n	8006cde <_vfiprintf_r+0x4e>
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	b01d      	add	sp, #116	@ 0x74
 8006cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cde:	89ab      	ldrh	r3, [r5, #12]
 8006ce0:	0598      	lsls	r0, r3, #22
 8006ce2:	d4f7      	bmi.n	8006cd4 <_vfiprintf_r+0x44>
 8006ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ce6:	f7fe fcc9 	bl	800567c <__retarget_lock_release_recursive>
 8006cea:	e7f3      	b.n	8006cd4 <_vfiprintf_r+0x44>
 8006cec:	2300      	movs	r3, #0
 8006cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cfa:	2330      	movs	r3, #48	@ 0x30
 8006cfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006eac <_vfiprintf_r+0x21c>
 8006d00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d04:	f04f 0901 	mov.w	r9, #1
 8006d08:	4623      	mov	r3, r4
 8006d0a:	469a      	mov	sl, r3
 8006d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d10:	b10a      	cbz	r2, 8006d16 <_vfiprintf_r+0x86>
 8006d12:	2a25      	cmp	r2, #37	@ 0x25
 8006d14:	d1f9      	bne.n	8006d0a <_vfiprintf_r+0x7a>
 8006d16:	ebba 0b04 	subs.w	fp, sl, r4
 8006d1a:	d00b      	beq.n	8006d34 <_vfiprintf_r+0xa4>
 8006d1c:	465b      	mov	r3, fp
 8006d1e:	4622      	mov	r2, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7ff ffa1 	bl	8006c6a <__sfputs_r>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	f000 80a7 	beq.w	8006e7c <_vfiprintf_r+0x1ec>
 8006d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d30:	445a      	add	r2, fp
 8006d32:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d34:	f89a 3000 	ldrb.w	r3, [sl]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 809f 	beq.w	8006e7c <_vfiprintf_r+0x1ec>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f04f 32ff 	mov.w	r2, #4294967295
 8006d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d48:	f10a 0a01 	add.w	sl, sl, #1
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	9307      	str	r3, [sp, #28]
 8006d50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d54:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d56:	4654      	mov	r4, sl
 8006d58:	2205      	movs	r2, #5
 8006d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d5e:	4853      	ldr	r0, [pc, #332]	@ (8006eac <_vfiprintf_r+0x21c>)
 8006d60:	f7f9 fa36 	bl	80001d0 <memchr>
 8006d64:	9a04      	ldr	r2, [sp, #16]
 8006d66:	b9d8      	cbnz	r0, 8006da0 <_vfiprintf_r+0x110>
 8006d68:	06d1      	lsls	r1, r2, #27
 8006d6a:	bf44      	itt	mi
 8006d6c:	2320      	movmi	r3, #32
 8006d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d72:	0713      	lsls	r3, r2, #28
 8006d74:	bf44      	itt	mi
 8006d76:	232b      	movmi	r3, #43	@ 0x2b
 8006d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d82:	d015      	beq.n	8006db0 <_vfiprintf_r+0x120>
 8006d84:	9a07      	ldr	r2, [sp, #28]
 8006d86:	4654      	mov	r4, sl
 8006d88:	2000      	movs	r0, #0
 8006d8a:	f04f 0c0a 	mov.w	ip, #10
 8006d8e:	4621      	mov	r1, r4
 8006d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d94:	3b30      	subs	r3, #48	@ 0x30
 8006d96:	2b09      	cmp	r3, #9
 8006d98:	d94b      	bls.n	8006e32 <_vfiprintf_r+0x1a2>
 8006d9a:	b1b0      	cbz	r0, 8006dca <_vfiprintf_r+0x13a>
 8006d9c:	9207      	str	r2, [sp, #28]
 8006d9e:	e014      	b.n	8006dca <_vfiprintf_r+0x13a>
 8006da0:	eba0 0308 	sub.w	r3, r0, r8
 8006da4:	fa09 f303 	lsl.w	r3, r9, r3
 8006da8:	4313      	orrs	r3, r2
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	46a2      	mov	sl, r4
 8006dae:	e7d2      	b.n	8006d56 <_vfiprintf_r+0xc6>
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	1d19      	adds	r1, r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	9103      	str	r1, [sp, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bfbb      	ittet	lt
 8006dbc:	425b      	neglt	r3, r3
 8006dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc2:	9307      	strge	r3, [sp, #28]
 8006dc4:	9307      	strlt	r3, [sp, #28]
 8006dc6:	bfb8      	it	lt
 8006dc8:	9204      	strlt	r2, [sp, #16]
 8006dca:	7823      	ldrb	r3, [r4, #0]
 8006dcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dce:	d10a      	bne.n	8006de6 <_vfiprintf_r+0x156>
 8006dd0:	7863      	ldrb	r3, [r4, #1]
 8006dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dd4:	d132      	bne.n	8006e3c <_vfiprintf_r+0x1ac>
 8006dd6:	9b03      	ldr	r3, [sp, #12]
 8006dd8:	1d1a      	adds	r2, r3, #4
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	9203      	str	r2, [sp, #12]
 8006dde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006de2:	3402      	adds	r4, #2
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006eb0 <_vfiprintf_r+0x220>
 8006dea:	7821      	ldrb	r1, [r4, #0]
 8006dec:	2203      	movs	r2, #3
 8006dee:	4650      	mov	r0, sl
 8006df0:	f7f9 f9ee 	bl	80001d0 <memchr>
 8006df4:	b138      	cbz	r0, 8006e06 <_vfiprintf_r+0x176>
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	eba0 000a 	sub.w	r0, r0, sl
 8006dfc:	2240      	movs	r2, #64	@ 0x40
 8006dfe:	4082      	lsls	r2, r0
 8006e00:	4313      	orrs	r3, r2
 8006e02:	3401      	adds	r4, #1
 8006e04:	9304      	str	r3, [sp, #16]
 8006e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0a:	482a      	ldr	r0, [pc, #168]	@ (8006eb4 <_vfiprintf_r+0x224>)
 8006e0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e10:	2206      	movs	r2, #6
 8006e12:	f7f9 f9dd 	bl	80001d0 <memchr>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d03f      	beq.n	8006e9a <_vfiprintf_r+0x20a>
 8006e1a:	4b27      	ldr	r3, [pc, #156]	@ (8006eb8 <_vfiprintf_r+0x228>)
 8006e1c:	bb1b      	cbnz	r3, 8006e66 <_vfiprintf_r+0x1d6>
 8006e1e:	9b03      	ldr	r3, [sp, #12]
 8006e20:	3307      	adds	r3, #7
 8006e22:	f023 0307 	bic.w	r3, r3, #7
 8006e26:	3308      	adds	r3, #8
 8006e28:	9303      	str	r3, [sp, #12]
 8006e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e2c:	443b      	add	r3, r7
 8006e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e30:	e76a      	b.n	8006d08 <_vfiprintf_r+0x78>
 8006e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e36:	460c      	mov	r4, r1
 8006e38:	2001      	movs	r0, #1
 8006e3a:	e7a8      	b.n	8006d8e <_vfiprintf_r+0xfe>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	3401      	adds	r4, #1
 8006e40:	9305      	str	r3, [sp, #20]
 8006e42:	4619      	mov	r1, r3
 8006e44:	f04f 0c0a 	mov.w	ip, #10
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e4e:	3a30      	subs	r2, #48	@ 0x30
 8006e50:	2a09      	cmp	r2, #9
 8006e52:	d903      	bls.n	8006e5c <_vfiprintf_r+0x1cc>
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0c6      	beq.n	8006de6 <_vfiprintf_r+0x156>
 8006e58:	9105      	str	r1, [sp, #20]
 8006e5a:	e7c4      	b.n	8006de6 <_vfiprintf_r+0x156>
 8006e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e60:	4604      	mov	r4, r0
 8006e62:	2301      	movs	r3, #1
 8006e64:	e7f0      	b.n	8006e48 <_vfiprintf_r+0x1b8>
 8006e66:	ab03      	add	r3, sp, #12
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	462a      	mov	r2, r5
 8006e6c:	4b13      	ldr	r3, [pc, #76]	@ (8006ebc <_vfiprintf_r+0x22c>)
 8006e6e:	a904      	add	r1, sp, #16
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7fd fdc1 	bl	80049f8 <_printf_float>
 8006e76:	4607      	mov	r7, r0
 8006e78:	1c78      	adds	r0, r7, #1
 8006e7a:	d1d6      	bne.n	8006e2a <_vfiprintf_r+0x19a>
 8006e7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e7e:	07d9      	lsls	r1, r3, #31
 8006e80:	d405      	bmi.n	8006e8e <_vfiprintf_r+0x1fe>
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	059a      	lsls	r2, r3, #22
 8006e86:	d402      	bmi.n	8006e8e <_vfiprintf_r+0x1fe>
 8006e88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e8a:	f7fe fbf7 	bl	800567c <__retarget_lock_release_recursive>
 8006e8e:	89ab      	ldrh	r3, [r5, #12]
 8006e90:	065b      	lsls	r3, r3, #25
 8006e92:	f53f af1f 	bmi.w	8006cd4 <_vfiprintf_r+0x44>
 8006e96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e98:	e71e      	b.n	8006cd8 <_vfiprintf_r+0x48>
 8006e9a:	ab03      	add	r3, sp, #12
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	462a      	mov	r2, r5
 8006ea0:	4b06      	ldr	r3, [pc, #24]	@ (8006ebc <_vfiprintf_r+0x22c>)
 8006ea2:	a904      	add	r1, sp, #16
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f7fe f841 	bl	8004f2c <_printf_i>
 8006eaa:	e7e4      	b.n	8006e76 <_vfiprintf_r+0x1e6>
 8006eac:	08007578 	.word	0x08007578
 8006eb0:	0800757e 	.word	0x0800757e
 8006eb4:	08007582 	.word	0x08007582
 8006eb8:	080049f9 	.word	0x080049f9
 8006ebc:	08006c6b 	.word	0x08006c6b

08006ec0 <__sflush_r>:
 8006ec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	0716      	lsls	r6, r2, #28
 8006ec8:	4605      	mov	r5, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	d454      	bmi.n	8006f78 <__sflush_r+0xb8>
 8006ece:	684b      	ldr	r3, [r1, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	dc02      	bgt.n	8006eda <__sflush_r+0x1a>
 8006ed4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dd48      	ble.n	8006f6c <__sflush_r+0xac>
 8006eda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006edc:	2e00      	cmp	r6, #0
 8006ede:	d045      	beq.n	8006f6c <__sflush_r+0xac>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ee6:	682f      	ldr	r7, [r5, #0]
 8006ee8:	6a21      	ldr	r1, [r4, #32]
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	d030      	beq.n	8006f50 <__sflush_r+0x90>
 8006eee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	0759      	lsls	r1, r3, #29
 8006ef4:	d505      	bpl.n	8006f02 <__sflush_r+0x42>
 8006ef6:	6863      	ldr	r3, [r4, #4]
 8006ef8:	1ad2      	subs	r2, r2, r3
 8006efa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006efc:	b10b      	cbz	r3, 8006f02 <__sflush_r+0x42>
 8006efe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f00:	1ad2      	subs	r2, r2, r3
 8006f02:	2300      	movs	r3, #0
 8006f04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f06:	6a21      	ldr	r1, [r4, #32]
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b0      	blx	r6
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	d106      	bne.n	8006f20 <__sflush_r+0x60>
 8006f12:	6829      	ldr	r1, [r5, #0]
 8006f14:	291d      	cmp	r1, #29
 8006f16:	d82b      	bhi.n	8006f70 <__sflush_r+0xb0>
 8006f18:	4a28      	ldr	r2, [pc, #160]	@ (8006fbc <__sflush_r+0xfc>)
 8006f1a:	410a      	asrs	r2, r1
 8006f1c:	07d6      	lsls	r6, r2, #31
 8006f1e:	d427      	bmi.n	8006f70 <__sflush_r+0xb0>
 8006f20:	2200      	movs	r2, #0
 8006f22:	6062      	str	r2, [r4, #4]
 8006f24:	04d9      	lsls	r1, r3, #19
 8006f26:	6922      	ldr	r2, [r4, #16]
 8006f28:	6022      	str	r2, [r4, #0]
 8006f2a:	d504      	bpl.n	8006f36 <__sflush_r+0x76>
 8006f2c:	1c42      	adds	r2, r0, #1
 8006f2e:	d101      	bne.n	8006f34 <__sflush_r+0x74>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b903      	cbnz	r3, 8006f36 <__sflush_r+0x76>
 8006f34:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f38:	602f      	str	r7, [r5, #0]
 8006f3a:	b1b9      	cbz	r1, 8006f6c <__sflush_r+0xac>
 8006f3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f40:	4299      	cmp	r1, r3
 8006f42:	d002      	beq.n	8006f4a <__sflush_r+0x8a>
 8006f44:	4628      	mov	r0, r5
 8006f46:	f7ff f9fb 	bl	8006340 <_free_r>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f4e:	e00d      	b.n	8006f6c <__sflush_r+0xac>
 8006f50:	2301      	movs	r3, #1
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b0      	blx	r6
 8006f56:	4602      	mov	r2, r0
 8006f58:	1c50      	adds	r0, r2, #1
 8006f5a:	d1c9      	bne.n	8006ef0 <__sflush_r+0x30>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0c6      	beq.n	8006ef0 <__sflush_r+0x30>
 8006f62:	2b1d      	cmp	r3, #29
 8006f64:	d001      	beq.n	8006f6a <__sflush_r+0xaa>
 8006f66:	2b16      	cmp	r3, #22
 8006f68:	d11d      	bne.n	8006fa6 <__sflush_r+0xe6>
 8006f6a:	602f      	str	r7, [r5, #0]
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	e021      	b.n	8006fb4 <__sflush_r+0xf4>
 8006f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f74:	b21b      	sxth	r3, r3
 8006f76:	e01a      	b.n	8006fae <__sflush_r+0xee>
 8006f78:	690f      	ldr	r7, [r1, #16]
 8006f7a:	2f00      	cmp	r7, #0
 8006f7c:	d0f6      	beq.n	8006f6c <__sflush_r+0xac>
 8006f7e:	0793      	lsls	r3, r2, #30
 8006f80:	680e      	ldr	r6, [r1, #0]
 8006f82:	bf08      	it	eq
 8006f84:	694b      	ldreq	r3, [r1, #20]
 8006f86:	600f      	str	r7, [r1, #0]
 8006f88:	bf18      	it	ne
 8006f8a:	2300      	movne	r3, #0
 8006f8c:	1bf6      	subs	r6, r6, r7
 8006f8e:	608b      	str	r3, [r1, #8]
 8006f90:	2e00      	cmp	r6, #0
 8006f92:	ddeb      	ble.n	8006f6c <__sflush_r+0xac>
 8006f94:	6a21      	ldr	r1, [r4, #32]
 8006f96:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006f9a:	4633      	mov	r3, r6
 8006f9c:	463a      	mov	r2, r7
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	47e0      	blx	ip
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	dc07      	bgt.n	8006fb6 <__sflush_r+0xf6>
 8006fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb6:	4407      	add	r7, r0
 8006fb8:	1a36      	subs	r6, r6, r0
 8006fba:	e7e9      	b.n	8006f90 <__sflush_r+0xd0>
 8006fbc:	dfbffffe 	.word	0xdfbffffe

08006fc0 <_fflush_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	690b      	ldr	r3, [r1, #16]
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	b913      	cbnz	r3, 8006fd0 <_fflush_r+0x10>
 8006fca:	2500      	movs	r5, #0
 8006fcc:	4628      	mov	r0, r5
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	b118      	cbz	r0, 8006fda <_fflush_r+0x1a>
 8006fd2:	6a03      	ldr	r3, [r0, #32]
 8006fd4:	b90b      	cbnz	r3, 8006fda <_fflush_r+0x1a>
 8006fd6:	f7fe f955 	bl	8005284 <__sinit>
 8006fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0f3      	beq.n	8006fca <_fflush_r+0xa>
 8006fe2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fe4:	07d0      	lsls	r0, r2, #31
 8006fe6:	d404      	bmi.n	8006ff2 <_fflush_r+0x32>
 8006fe8:	0599      	lsls	r1, r3, #22
 8006fea:	d402      	bmi.n	8006ff2 <_fflush_r+0x32>
 8006fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fee:	f7fe fb44 	bl	800567a <__retarget_lock_acquire_recursive>
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	f7ff ff63 	bl	8006ec0 <__sflush_r>
 8006ffa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ffc:	07da      	lsls	r2, r3, #31
 8006ffe:	4605      	mov	r5, r0
 8007000:	d4e4      	bmi.n	8006fcc <_fflush_r+0xc>
 8007002:	89a3      	ldrh	r3, [r4, #12]
 8007004:	059b      	lsls	r3, r3, #22
 8007006:	d4e1      	bmi.n	8006fcc <_fflush_r+0xc>
 8007008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800700a:	f7fe fb37 	bl	800567c <__retarget_lock_release_recursive>
 800700e:	e7dd      	b.n	8006fcc <_fflush_r+0xc>

08007010 <__swhatbuf_r>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	460c      	mov	r4, r1
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	2900      	cmp	r1, #0
 800701a:	b096      	sub	sp, #88	@ 0x58
 800701c:	4615      	mov	r5, r2
 800701e:	461e      	mov	r6, r3
 8007020:	da0d      	bge.n	800703e <__swhatbuf_r+0x2e>
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007028:	f04f 0100 	mov.w	r1, #0
 800702c:	bf14      	ite	ne
 800702e:	2340      	movne	r3, #64	@ 0x40
 8007030:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007034:	2000      	movs	r0, #0
 8007036:	6031      	str	r1, [r6, #0]
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	b016      	add	sp, #88	@ 0x58
 800703c:	bd70      	pop	{r4, r5, r6, pc}
 800703e:	466a      	mov	r2, sp
 8007040:	f000 f848 	bl	80070d4 <_fstat_r>
 8007044:	2800      	cmp	r0, #0
 8007046:	dbec      	blt.n	8007022 <__swhatbuf_r+0x12>
 8007048:	9901      	ldr	r1, [sp, #4]
 800704a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800704e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007052:	4259      	negs	r1, r3
 8007054:	4159      	adcs	r1, r3
 8007056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800705a:	e7eb      	b.n	8007034 <__swhatbuf_r+0x24>

0800705c <__smakebuf_r>:
 800705c:	898b      	ldrh	r3, [r1, #12]
 800705e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007060:	079d      	lsls	r5, r3, #30
 8007062:	4606      	mov	r6, r0
 8007064:	460c      	mov	r4, r1
 8007066:	d507      	bpl.n	8007078 <__smakebuf_r+0x1c>
 8007068:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	6123      	str	r3, [r4, #16]
 8007070:	2301      	movs	r3, #1
 8007072:	6163      	str	r3, [r4, #20]
 8007074:	b003      	add	sp, #12
 8007076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007078:	ab01      	add	r3, sp, #4
 800707a:	466a      	mov	r2, sp
 800707c:	f7ff ffc8 	bl	8007010 <__swhatbuf_r>
 8007080:	9f00      	ldr	r7, [sp, #0]
 8007082:	4605      	mov	r5, r0
 8007084:	4639      	mov	r1, r7
 8007086:	4630      	mov	r0, r6
 8007088:	f7ff f9ce 	bl	8006428 <_malloc_r>
 800708c:	b948      	cbnz	r0, 80070a2 <__smakebuf_r+0x46>
 800708e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007092:	059a      	lsls	r2, r3, #22
 8007094:	d4ee      	bmi.n	8007074 <__smakebuf_r+0x18>
 8007096:	f023 0303 	bic.w	r3, r3, #3
 800709a:	f043 0302 	orr.w	r3, r3, #2
 800709e:	81a3      	strh	r3, [r4, #12]
 80070a0:	e7e2      	b.n	8007068 <__smakebuf_r+0xc>
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	6020      	str	r0, [r4, #0]
 80070a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070aa:	81a3      	strh	r3, [r4, #12]
 80070ac:	9b01      	ldr	r3, [sp, #4]
 80070ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070b2:	b15b      	cbz	r3, 80070cc <__smakebuf_r+0x70>
 80070b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070b8:	4630      	mov	r0, r6
 80070ba:	f000 f81d 	bl	80070f8 <_isatty_r>
 80070be:	b128      	cbz	r0, 80070cc <__smakebuf_r+0x70>
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	f023 0303 	bic.w	r3, r3, #3
 80070c6:	f043 0301 	orr.w	r3, r3, #1
 80070ca:	81a3      	strh	r3, [r4, #12]
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	431d      	orrs	r5, r3
 80070d0:	81a5      	strh	r5, [r4, #12]
 80070d2:	e7cf      	b.n	8007074 <__smakebuf_r+0x18>

080070d4 <_fstat_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4d07      	ldr	r5, [pc, #28]	@ (80070f4 <_fstat_r+0x20>)
 80070d8:	2300      	movs	r3, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	4611      	mov	r1, r2
 80070e0:	602b      	str	r3, [r5, #0]
 80070e2:	f7fb fbcd 	bl	8002880 <_fstat>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	d102      	bne.n	80070f0 <_fstat_r+0x1c>
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	b103      	cbz	r3, 80070f0 <_fstat_r+0x1c>
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	bd38      	pop	{r3, r4, r5, pc}
 80070f2:	bf00      	nop
 80070f4:	20000388 	.word	0x20000388

080070f8 <_isatty_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4d06      	ldr	r5, [pc, #24]	@ (8007114 <_isatty_r+0x1c>)
 80070fc:	2300      	movs	r3, #0
 80070fe:	4604      	mov	r4, r0
 8007100:	4608      	mov	r0, r1
 8007102:	602b      	str	r3, [r5, #0]
 8007104:	f7fb fbcb 	bl	800289e <_isatty>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_isatty_r+0x1a>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b103      	cbz	r3, 8007112 <_isatty_r+0x1a>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	20000388 	.word	0x20000388

08007118 <_sbrk_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d06      	ldr	r5, [pc, #24]	@ (8007134 <_sbrk_r+0x1c>)
 800711c:	2300      	movs	r3, #0
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	602b      	str	r3, [r5, #0]
 8007124:	f7fb fbd2 	bl	80028cc <_sbrk>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_sbrk_r+0x1a>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_sbrk_r+0x1a>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20000388 	.word	0x20000388

08007138 <__assert_func>:
 8007138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800713a:	4614      	mov	r4, r2
 800713c:	461a      	mov	r2, r3
 800713e:	4b09      	ldr	r3, [pc, #36]	@ (8007164 <__assert_func+0x2c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4605      	mov	r5, r0
 8007144:	68d8      	ldr	r0, [r3, #12]
 8007146:	b954      	cbnz	r4, 800715e <__assert_func+0x26>
 8007148:	4b07      	ldr	r3, [pc, #28]	@ (8007168 <__assert_func+0x30>)
 800714a:	461c      	mov	r4, r3
 800714c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007150:	9100      	str	r1, [sp, #0]
 8007152:	462b      	mov	r3, r5
 8007154:	4905      	ldr	r1, [pc, #20]	@ (800716c <__assert_func+0x34>)
 8007156:	f000 f841 	bl	80071dc <fiprintf>
 800715a:	f000 f851 	bl	8007200 <abort>
 800715e:	4b04      	ldr	r3, [pc, #16]	@ (8007170 <__assert_func+0x38>)
 8007160:	e7f4      	b.n	800714c <__assert_func+0x14>
 8007162:	bf00      	nop
 8007164:	20000018 	.word	0x20000018
 8007168:	080075ce 	.word	0x080075ce
 800716c:	080075a0 	.word	0x080075a0
 8007170:	08007593 	.word	0x08007593

08007174 <_calloc_r>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	fba1 5402 	umull	r5, r4, r1, r2
 800717a:	b93c      	cbnz	r4, 800718c <_calloc_r+0x18>
 800717c:	4629      	mov	r1, r5
 800717e:	f7ff f953 	bl	8006428 <_malloc_r>
 8007182:	4606      	mov	r6, r0
 8007184:	b928      	cbnz	r0, 8007192 <_calloc_r+0x1e>
 8007186:	2600      	movs	r6, #0
 8007188:	4630      	mov	r0, r6
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	220c      	movs	r2, #12
 800718e:	6002      	str	r2, [r0, #0]
 8007190:	e7f9      	b.n	8007186 <_calloc_r+0x12>
 8007192:	462a      	mov	r2, r5
 8007194:	4621      	mov	r1, r4
 8007196:	f7fe f9f3 	bl	8005580 <memset>
 800719a:	e7f5      	b.n	8007188 <_calloc_r+0x14>

0800719c <__ascii_mbtowc>:
 800719c:	b082      	sub	sp, #8
 800719e:	b901      	cbnz	r1, 80071a2 <__ascii_mbtowc+0x6>
 80071a0:	a901      	add	r1, sp, #4
 80071a2:	b142      	cbz	r2, 80071b6 <__ascii_mbtowc+0x1a>
 80071a4:	b14b      	cbz	r3, 80071ba <__ascii_mbtowc+0x1e>
 80071a6:	7813      	ldrb	r3, [r2, #0]
 80071a8:	600b      	str	r3, [r1, #0]
 80071aa:	7812      	ldrb	r2, [r2, #0]
 80071ac:	1e10      	subs	r0, r2, #0
 80071ae:	bf18      	it	ne
 80071b0:	2001      	movne	r0, #1
 80071b2:	b002      	add	sp, #8
 80071b4:	4770      	bx	lr
 80071b6:	4610      	mov	r0, r2
 80071b8:	e7fb      	b.n	80071b2 <__ascii_mbtowc+0x16>
 80071ba:	f06f 0001 	mvn.w	r0, #1
 80071be:	e7f8      	b.n	80071b2 <__ascii_mbtowc+0x16>

080071c0 <__ascii_wctomb>:
 80071c0:	4603      	mov	r3, r0
 80071c2:	4608      	mov	r0, r1
 80071c4:	b141      	cbz	r1, 80071d8 <__ascii_wctomb+0x18>
 80071c6:	2aff      	cmp	r2, #255	@ 0xff
 80071c8:	d904      	bls.n	80071d4 <__ascii_wctomb+0x14>
 80071ca:	228a      	movs	r2, #138	@ 0x8a
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	f04f 30ff 	mov.w	r0, #4294967295
 80071d2:	4770      	bx	lr
 80071d4:	700a      	strb	r2, [r1, #0]
 80071d6:	2001      	movs	r0, #1
 80071d8:	4770      	bx	lr
	...

080071dc <fiprintf>:
 80071dc:	b40e      	push	{r1, r2, r3}
 80071de:	b503      	push	{r0, r1, lr}
 80071e0:	4601      	mov	r1, r0
 80071e2:	ab03      	add	r3, sp, #12
 80071e4:	4805      	ldr	r0, [pc, #20]	@ (80071fc <fiprintf+0x20>)
 80071e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	f7ff fd4f 	bl	8006c90 <_vfiprintf_r>
 80071f2:	b002      	add	sp, #8
 80071f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f8:	b003      	add	sp, #12
 80071fa:	4770      	bx	lr
 80071fc:	20000018 	.word	0x20000018

08007200 <abort>:
 8007200:	b508      	push	{r3, lr}
 8007202:	2006      	movs	r0, #6
 8007204:	f000 f82c 	bl	8007260 <raise>
 8007208:	2001      	movs	r0, #1
 800720a:	f7fb fb06 	bl	800281a <_exit>

0800720e <_raise_r>:
 800720e:	291f      	cmp	r1, #31
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4605      	mov	r5, r0
 8007214:	460c      	mov	r4, r1
 8007216:	d904      	bls.n	8007222 <_raise_r+0x14>
 8007218:	2316      	movs	r3, #22
 800721a:	6003      	str	r3, [r0, #0]
 800721c:	f04f 30ff 	mov.w	r0, #4294967295
 8007220:	bd38      	pop	{r3, r4, r5, pc}
 8007222:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007224:	b112      	cbz	r2, 800722c <_raise_r+0x1e>
 8007226:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800722a:	b94b      	cbnz	r3, 8007240 <_raise_r+0x32>
 800722c:	4628      	mov	r0, r5
 800722e:	f000 f831 	bl	8007294 <_getpid_r>
 8007232:	4622      	mov	r2, r4
 8007234:	4601      	mov	r1, r0
 8007236:	4628      	mov	r0, r5
 8007238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800723c:	f000 b818 	b.w	8007270 <_kill_r>
 8007240:	2b01      	cmp	r3, #1
 8007242:	d00a      	beq.n	800725a <_raise_r+0x4c>
 8007244:	1c59      	adds	r1, r3, #1
 8007246:	d103      	bne.n	8007250 <_raise_r+0x42>
 8007248:	2316      	movs	r3, #22
 800724a:	6003      	str	r3, [r0, #0]
 800724c:	2001      	movs	r0, #1
 800724e:	e7e7      	b.n	8007220 <_raise_r+0x12>
 8007250:	2100      	movs	r1, #0
 8007252:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007256:	4620      	mov	r0, r4
 8007258:	4798      	blx	r3
 800725a:	2000      	movs	r0, #0
 800725c:	e7e0      	b.n	8007220 <_raise_r+0x12>
	...

08007260 <raise>:
 8007260:	4b02      	ldr	r3, [pc, #8]	@ (800726c <raise+0xc>)
 8007262:	4601      	mov	r1, r0
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	f7ff bfd2 	b.w	800720e <_raise_r>
 800726a:	bf00      	nop
 800726c:	20000018 	.word	0x20000018

08007270 <_kill_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	4d07      	ldr	r5, [pc, #28]	@ (8007290 <_kill_r+0x20>)
 8007274:	2300      	movs	r3, #0
 8007276:	4604      	mov	r4, r0
 8007278:	4608      	mov	r0, r1
 800727a:	4611      	mov	r1, r2
 800727c:	602b      	str	r3, [r5, #0]
 800727e:	f7fb fabc 	bl	80027fa <_kill>
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d102      	bne.n	800728c <_kill_r+0x1c>
 8007286:	682b      	ldr	r3, [r5, #0]
 8007288:	b103      	cbz	r3, 800728c <_kill_r+0x1c>
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	bd38      	pop	{r3, r4, r5, pc}
 800728e:	bf00      	nop
 8007290:	20000388 	.word	0x20000388

08007294 <_getpid_r>:
 8007294:	f7fb baaa 	b.w	80027ec <_getpid>

08007298 <_init>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	bf00      	nop
 800729c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729e:	bc08      	pop	{r3}
 80072a0:	469e      	mov	lr, r3
 80072a2:	4770      	bx	lr

080072a4 <_fini>:
 80072a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a6:	bf00      	nop
 80072a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072aa:	bc08      	pop	{r3}
 80072ac:	469e      	mov	lr, r3
 80072ae:	4770      	bx	lr
